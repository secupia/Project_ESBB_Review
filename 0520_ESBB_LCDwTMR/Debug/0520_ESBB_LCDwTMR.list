
0520_ESBB_LCDwTMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002900  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000200  20000070  08002bb8  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000270  08002bb8  00020270  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014ddc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d88  00000000  00000000  00034e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066a1  00000000  00000000  00037bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009b8  00000000  00000000  0003e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c20  00000000  00000000  0003ec58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005726  00000000  00000000  0003f878  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003661  00000000  00000000  00044f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000485ff  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002230  00000000  00000000  0004867c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f4 	.word	0x080029f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029f4 	.word	0x080029f4

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89e 	bl	80002a4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fb9e 	bl	80018ec <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000009c 	.word	0x2000009c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028c:	2301      	movs	r3, #1
 800028e:	0942      	lsrs	r2, r0, #5
 8000290:	f000 001f 	and.w	r0, r0, #31
 8000294:	fa03 f000 	lsl.w	r0, r3, r0
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_NVIC_EnableIRQ+0x14>)
 800029a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a4:	3801      	subs	r0, #1
 80002a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002aa:	d20a      	bcs.n	80002c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002d6:	4616      	mov	r6, r2
 80002d8:	4b65      	ldr	r3, [pc, #404]	; (8000470 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000480 <HAL_GPIO_Init+0x1b0>
 80002de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000484 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d17f      	bne.n	80003f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002f4:	684d      	ldr	r5, [r1, #4]
 80002f6:	2d12      	cmp	r5, #18
 80002f8:	f000 80af 	beq.w	800045a <HAL_GPIO_Init+0x18a>
 80002fc:	f200 8088 	bhi.w	8000410 <HAL_GPIO_Init+0x140>
 8000300:	2d02      	cmp	r5, #2
 8000302:	f000 80a7 	beq.w	8000454 <HAL_GPIO_Init+0x184>
 8000306:	d87c      	bhi.n	8000402 <HAL_GPIO_Init+0x132>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 808e 	beq.w	800042a <HAL_GPIO_Init+0x15a>
 800030e:	2d01      	cmp	r5, #1
 8000310:	f000 809e 	beq.w	8000450 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000314:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	bf93      	iteet	ls
 800031c:	4682      	movls	sl, r0
 800031e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000322:	3d08      	subhi	r5, #8
 8000324:	f8d0 b000 	ldrls.w	fp, [r0]
 8000328:	bf92      	itee	ls
 800032a:	00b5      	lslls	r5, r6, #2
 800032c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000330:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000332:	fa09 f805 	lsl.w	r8, r9, r5
 8000336:	ea2b 0808 	bic.w	r8, fp, r8
 800033a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033e:	bf88      	it	hi
 8000340:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000344:	ea48 0505 	orr.w	r5, r8, r5
 8000348:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800034c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000350:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000354:	d04e      	beq.n	80003f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4d47      	ldr	r5, [pc, #284]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 8000358:	4f46      	ldr	r7, [pc, #280]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 800035a:	69ad      	ldr	r5, [r5, #24]
 800035c:	f026 0803 	bic.w	r8, r6, #3
 8000360:	f045 0501 	orr.w	r5, r5, #1
 8000364:	61bd      	str	r5, [r7, #24]
 8000366:	69bd      	ldr	r5, [r7, #24]
 8000368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800036c:	f005 0501 	and.w	r5, r5, #1
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800037c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000384:	fa09 f90b 	lsl.w	r9, r9, fp
 8000388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800038c:	4d3a      	ldr	r5, [pc, #232]	; (8000478 <HAL_GPIO_Init+0x1a8>)
 800038e:	42a8      	cmp	r0, r5
 8000390:	d068      	beq.n	8000464 <HAL_GPIO_Init+0x194>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d066      	beq.n	8000468 <HAL_GPIO_Init+0x198>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d064      	beq.n	800046c <HAL_GPIO_Init+0x19c>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	bf0c      	ite	eq
 80003aa:	2503      	moveq	r5, #3
 80003ac:	2504      	movne	r5, #4
 80003ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003b6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003c0:	bf14      	ite	ne
 80003c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c4:	43a5      	biceq	r5, r4
 80003c6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ce:	bf14      	ite	ne
 80003d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003d2:	43a5      	biceq	r5, r4
 80003d4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ea:	bf14      	ite	ne
 80003ec:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ee:	ea25 0404 	biceq.w	r4, r5, r4
 80003f2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003f4:	3601      	adds	r6, #1
 80003f6:	2e10      	cmp	r6, #16
 80003f8:	f47f af73 	bne.w	80002e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003fc:	b003      	add	sp, #12
 80003fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000402:	2d03      	cmp	r5, #3
 8000404:	d022      	beq.n	800044c <HAL_GPIO_Init+0x17c>
 8000406:	2d11      	cmp	r5, #17
 8000408:	d184      	bne.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800040a:	68ca      	ldr	r2, [r1, #12]
 800040c:	3204      	adds	r2, #4
          break;
 800040e:	e781      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000410:	4f1a      	ldr	r7, [pc, #104]	; (800047c <HAL_GPIO_Init+0x1ac>)
 8000412:	42bd      	cmp	r5, r7
 8000414:	d009      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000416:	d812      	bhi.n	800043e <HAL_GPIO_Init+0x16e>
 8000418:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000488 <HAL_GPIO_Init+0x1b8>
 800041c:	454d      	cmp	r5, r9
 800041e:	d004      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000420:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000424:	454d      	cmp	r5, r9
 8000426:	f47f af75 	bne.w	8000314 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800042a:	688a      	ldr	r2, [r1, #8]
 800042c:	b1c2      	cbz	r2, 8000460 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800042e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000430:	bf0c      	ite	eq
 8000432:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000436:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800043a:	2208      	movs	r2, #8
 800043c:	e76a      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800043e:	4575      	cmp	r5, lr
 8000440:	d0f3      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000442:	4565      	cmp	r5, ip
 8000444:	d0f1      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000446:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800048c <HAL_GPIO_Init+0x1bc>
 800044a:	e7eb      	b.n	8000424 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800044c:	2200      	movs	r2, #0
 800044e:	e761      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000450:	68ca      	ldr	r2, [r1, #12]
          break;
 8000452:	e75f      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000454:	68ca      	ldr	r2, [r1, #12]
 8000456:	3208      	adds	r2, #8
          break;
 8000458:	e75c      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800045a:	68ca      	ldr	r2, [r1, #12]
 800045c:	320c      	adds	r2, #12
          break;
 800045e:	e759      	b.n	8000314 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000460:	2204      	movs	r2, #4
 8000462:	e757      	b.n	8000314 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000464:	2500      	movs	r5, #0
 8000466:	e7a2      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000468:	2501      	movs	r5, #1
 800046a:	e7a0      	b.n	80003ae <HAL_GPIO_Init+0xde>
 800046c:	2502      	movs	r5, #2
 800046e:	e79e      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000470:	40010400 	.word	0x40010400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	10210000 	.word	0x10210000
 8000480:	10310000 	.word	0x10310000
 8000484:	10320000 	.word	0x10320000
 8000488:	10110000 	.word	0x10110000
 800048c:	10220000 	.word	0x10220000

08000490 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000490:	6883      	ldr	r3, [r0, #8]
 8000492:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000494:	bf14      	ite	ne
 8000496:	2001      	movne	r0, #1
 8000498:	2000      	moveq	r0, #0
 800049a:	4770      	bx	lr

0800049c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800049c:	b10a      	cbz	r2, 80004a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800049e:	6101      	str	r1, [r0, #16]
 80004a0:	4770      	bx	lr
 80004a2:	0409      	lsls	r1, r1, #16
 80004a4:	e7fb      	b.n	800049e <HAL_GPIO_WritePin+0x2>

080004a6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004a6:	68c3      	ldr	r3, [r0, #12]
 80004a8:	4059      	eors	r1, r3
 80004aa:	60c1      	str	r1, [r0, #12]
 80004ac:	4770      	bx	lr
	...

080004b0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b0:	6803      	ldr	r3, [r0, #0]
{
 80004b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b6:	07db      	lsls	r3, r3, #31
{
 80004b8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ba:	d410      	bmi.n	80004de <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004bc:	682b      	ldr	r3, [r5, #0]
 80004be:	079f      	lsls	r7, r3, #30
 80004c0:	d45e      	bmi.n	8000580 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004c2:	682b      	ldr	r3, [r5, #0]
 80004c4:	0719      	lsls	r1, r3, #28
 80004c6:	f100 8095 	bmi.w	80005f4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004ca:	682b      	ldr	r3, [r5, #0]
 80004cc:	075a      	lsls	r2, r3, #29
 80004ce:	f100 80bf 	bmi.w	8000650 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004d2:	69ea      	ldr	r2, [r5, #28]
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	f040 812d 	bne.w	8000734 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004da:	2000      	movs	r0, #0
 80004dc:	e014      	b.n	8000508 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004de:	4c90      	ldr	r4, [pc, #576]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 80004e0:	6863      	ldr	r3, [r4, #4]
 80004e2:	f003 030c 	and.w	r3, r3, #12
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	d007      	beq.n	80004fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ea:	6863      	ldr	r3, [r4, #4]
 80004ec:	f003 030c 	and.w	r3, r3, #12
 80004f0:	2b08      	cmp	r3, #8
 80004f2:	d10c      	bne.n	800050e <HAL_RCC_OscConfig+0x5e>
 80004f4:	6863      	ldr	r3, [r4, #4]
 80004f6:	03de      	lsls	r6, r3, #15
 80004f8:	d509      	bpl.n	800050e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004fa:	6823      	ldr	r3, [r4, #0]
 80004fc:	039c      	lsls	r4, r3, #14
 80004fe:	d5dd      	bpl.n	80004bc <HAL_RCC_OscConfig+0xc>
 8000500:	686b      	ldr	r3, [r5, #4]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1da      	bne.n	80004bc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000506:	2001      	movs	r0, #1
}
 8000508:	b002      	add	sp, #8
 800050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800050e:	686b      	ldr	r3, [r5, #4]
 8000510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000514:	d110      	bne.n	8000538 <HAL_RCC_OscConfig+0x88>
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800051c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800051e:	f7ff fe57 	bl	80001d0 <HAL_GetTick>
 8000522:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	0398      	lsls	r0, r3, #14
 8000528:	d4c8      	bmi.n	80004bc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052a:	f7ff fe51 	bl	80001d0 <HAL_GetTick>
 800052e:	1b80      	subs	r0, r0, r6
 8000530:	2864      	cmp	r0, #100	; 0x64
 8000532:	d9f7      	bls.n	8000524 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000534:	2003      	movs	r0, #3
 8000536:	e7e7      	b.n	8000508 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000538:	b99b      	cbnz	r3, 8000562 <HAL_RCC_OscConfig+0xb2>
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000540:	6023      	str	r3, [r4, #0]
 8000542:	6823      	ldr	r3, [r4, #0]
 8000544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000548:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800054a:	f7ff fe41 	bl	80001d0 <HAL_GetTick>
 800054e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000550:	6823      	ldr	r3, [r4, #0]
 8000552:	0399      	lsls	r1, r3, #14
 8000554:	d5b2      	bpl.n	80004bc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000556:	f7ff fe3b 	bl	80001d0 <HAL_GetTick>
 800055a:	1b80      	subs	r0, r0, r6
 800055c:	2864      	cmp	r0, #100	; 0x64
 800055e:	d9f7      	bls.n	8000550 <HAL_RCC_OscConfig+0xa0>
 8000560:	e7e8      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000562:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	d103      	bne.n	8000572 <HAL_RCC_OscConfig+0xc2>
 800056a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800056e:	6023      	str	r3, [r4, #0]
 8000570:	e7d1      	b.n	8000516 <HAL_RCC_OscConfig+0x66>
 8000572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000576:	6023      	str	r3, [r4, #0]
 8000578:	6823      	ldr	r3, [r4, #0]
 800057a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800057e:	e7cd      	b.n	800051c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000580:	4c67      	ldr	r4, [pc, #412]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 8000582:	6863      	ldr	r3, [r4, #4]
 8000584:	f013 0f0c 	tst.w	r3, #12
 8000588:	d007      	beq.n	800059a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800058a:	6863      	ldr	r3, [r4, #4]
 800058c:	f003 030c 	and.w	r3, r3, #12
 8000590:	2b08      	cmp	r3, #8
 8000592:	d110      	bne.n	80005b6 <HAL_RCC_OscConfig+0x106>
 8000594:	6863      	ldr	r3, [r4, #4]
 8000596:	03da      	lsls	r2, r3, #15
 8000598:	d40d      	bmi.n	80005b6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	079b      	lsls	r3, r3, #30
 800059e:	d502      	bpl.n	80005a6 <HAL_RCC_OscConfig+0xf6>
 80005a0:	692b      	ldr	r3, [r5, #16]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d1af      	bne.n	8000506 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005a6:	6823      	ldr	r3, [r4, #0]
 80005a8:	696a      	ldr	r2, [r5, #20]
 80005aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005b2:	6023      	str	r3, [r4, #0]
 80005b4:	e785      	b.n	80004c2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005b6:	692a      	ldr	r2, [r5, #16]
 80005b8:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <HAL_RCC_OscConfig+0x274>)
 80005ba:	b16a      	cbz	r2, 80005d8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c0:	f7ff fe06 	bl	80001d0 <HAL_GetTick>
 80005c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	079f      	lsls	r7, r3, #30
 80005ca:	d4ec      	bmi.n	80005a6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005cc:	f7ff fe00 	bl	80001d0 <HAL_GetTick>
 80005d0:	1b80      	subs	r0, r0, r6
 80005d2:	2802      	cmp	r0, #2
 80005d4:	d9f7      	bls.n	80005c6 <HAL_RCC_OscConfig+0x116>
 80005d6:	e7ad      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005da:	f7ff fdf9 	bl	80001d0 <HAL_GetTick>
 80005de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	0798      	lsls	r0, r3, #30
 80005e4:	f57f af6d 	bpl.w	80004c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005e8:	f7ff fdf2 	bl	80001d0 <HAL_GetTick>
 80005ec:	1b80      	subs	r0, r0, r6
 80005ee:	2802      	cmp	r0, #2
 80005f0:	d9f6      	bls.n	80005e0 <HAL_RCC_OscConfig+0x130>
 80005f2:	e79f      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005f4:	69aa      	ldr	r2, [r5, #24]
 80005f6:	4c4a      	ldr	r4, [pc, #296]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 80005f8:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <HAL_RCC_OscConfig+0x278>)
 80005fa:	b1da      	cbz	r2, 8000634 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000600:	f7ff fde6 	bl	80001d0 <HAL_GetTick>
 8000604:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000608:	079b      	lsls	r3, r3, #30
 800060a:	d50d      	bpl.n	8000628 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800060c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000610:	4b46      	ldr	r3, [pc, #280]	; (800072c <HAL_RCC_OscConfig+0x27c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	fbb3 f3f2 	udiv	r3, r3, r2
 8000618:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800061a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800061c:	9b01      	ldr	r3, [sp, #4]
 800061e:	1e5a      	subs	r2, r3, #1
 8000620:	9201      	str	r2, [sp, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1f9      	bne.n	800061a <HAL_RCC_OscConfig+0x16a>
 8000626:	e750      	b.n	80004ca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000628:	f7ff fdd2 	bl	80001d0 <HAL_GetTick>
 800062c:	1b80      	subs	r0, r0, r6
 800062e:	2802      	cmp	r0, #2
 8000630:	d9e9      	bls.n	8000606 <HAL_RCC_OscConfig+0x156>
 8000632:	e77f      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000634:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000636:	f7ff fdcb 	bl	80001d0 <HAL_GetTick>
 800063a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800063c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800063e:	079f      	lsls	r7, r3, #30
 8000640:	f57f af43 	bpl.w	80004ca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000644:	f7ff fdc4 	bl	80001d0 <HAL_GetTick>
 8000648:	1b80      	subs	r0, r0, r6
 800064a:	2802      	cmp	r0, #2
 800064c:	d9f6      	bls.n	800063c <HAL_RCC_OscConfig+0x18c>
 800064e:	e771      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000650:	4c33      	ldr	r4, [pc, #204]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 8000652:	69e3      	ldr	r3, [r4, #28]
 8000654:	00d8      	lsls	r0, r3, #3
 8000656:	d424      	bmi.n	80006a2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000658:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	69e3      	ldr	r3, [r4, #28]
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61e3      	str	r3, [r4, #28]
 8000662:	69e3      	ldr	r3, [r4, #28]
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800066c:	4e30      	ldr	r6, [pc, #192]	; (8000730 <HAL_RCC_OscConfig+0x280>)
 800066e:	6833      	ldr	r3, [r6, #0]
 8000670:	05d9      	lsls	r1, r3, #23
 8000672:	d518      	bpl.n	80006a6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000674:	68eb      	ldr	r3, [r5, #12]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d126      	bne.n	80006c8 <HAL_RCC_OscConfig+0x218>
 800067a:	6a23      	ldr	r3, [r4, #32]
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000686:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800068a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800068c:	6a23      	ldr	r3, [r4, #32]
 800068e:	079b      	lsls	r3, r3, #30
 8000690:	d53f      	bpl.n	8000712 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000692:	2f00      	cmp	r7, #0
 8000694:	f43f af1d 	beq.w	80004d2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000698:	69e3      	ldr	r3, [r4, #28]
 800069a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800069e:	61e3      	str	r3, [r4, #28]
 80006a0:	e717      	b.n	80004d2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006a2:	2700      	movs	r7, #0
 80006a4:	e7e2      	b.n	800066c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006a6:	6833      	ldr	r3, [r6, #0]
 80006a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006ae:	f7ff fd8f 	bl	80001d0 <HAL_GetTick>
 80006b2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006b4:	6833      	ldr	r3, [r6, #0]
 80006b6:	05da      	lsls	r2, r3, #23
 80006b8:	d4dc      	bmi.n	8000674 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ba:	f7ff fd89 	bl	80001d0 <HAL_GetTick>
 80006be:	eba0 0008 	sub.w	r0, r0, r8
 80006c2:	2864      	cmp	r0, #100	; 0x64
 80006c4:	d9f6      	bls.n	80006b4 <HAL_RCC_OscConfig+0x204>
 80006c6:	e735      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c8:	b9ab      	cbnz	r3, 80006f6 <HAL_RCC_OscConfig+0x246>
 80006ca:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d0:	f023 0301 	bic.w	r3, r3, #1
 80006d4:	6223      	str	r3, [r4, #32]
 80006d6:	6a23      	ldr	r3, [r4, #32]
 80006d8:	f023 0304 	bic.w	r3, r3, #4
 80006dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006de:	f7ff fd77 	bl	80001d0 <HAL_GetTick>
 80006e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006e4:	6a23      	ldr	r3, [r4, #32]
 80006e6:	0798      	lsls	r0, r3, #30
 80006e8:	d5d3      	bpl.n	8000692 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ea:	f7ff fd71 	bl	80001d0 <HAL_GetTick>
 80006ee:	1b80      	subs	r0, r0, r6
 80006f0:	4540      	cmp	r0, r8
 80006f2:	d9f7      	bls.n	80006e4 <HAL_RCC_OscConfig+0x234>
 80006f4:	e71e      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	d103      	bne.n	8000704 <HAL_RCC_OscConfig+0x254>
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6223      	str	r3, [r4, #32]
 8000702:	e7ba      	b.n	800067a <HAL_RCC_OscConfig+0x1ca>
 8000704:	f023 0301 	bic.w	r3, r3, #1
 8000708:	6223      	str	r3, [r4, #32]
 800070a:	6a23      	ldr	r3, [r4, #32]
 800070c:	f023 0304 	bic.w	r3, r3, #4
 8000710:	e7b6      	b.n	8000680 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000712:	f7ff fd5d 	bl	80001d0 <HAL_GetTick>
 8000716:	eba0 0008 	sub.w	r0, r0, r8
 800071a:	42b0      	cmp	r0, r6
 800071c:	d9b6      	bls.n	800068c <HAL_RCC_OscConfig+0x1dc>
 800071e:	e709      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
 8000720:	40021000 	.word	0x40021000
 8000724:	42420000 	.word	0x42420000
 8000728:	42420480 	.word	0x42420480
 800072c:	20000008 	.word	0x20000008
 8000730:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000734:	4c22      	ldr	r4, [pc, #136]	; (80007c0 <HAL_RCC_OscConfig+0x310>)
 8000736:	6863      	ldr	r3, [r4, #4]
 8000738:	f003 030c 	and.w	r3, r3, #12
 800073c:	2b08      	cmp	r3, #8
 800073e:	f43f aee2 	beq.w	8000506 <HAL_RCC_OscConfig+0x56>
 8000742:	2300      	movs	r3, #0
 8000744:	4e1f      	ldr	r6, [pc, #124]	; (80007c4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000746:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000748:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800074a:	d12b      	bne.n	80007a4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800074c:	f7ff fd40 	bl	80001d0 <HAL_GetTick>
 8000750:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	0199      	lsls	r1, r3, #6
 8000756:	d41f      	bmi.n	8000798 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000758:	6a2b      	ldr	r3, [r5, #32]
 800075a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800075e:	d105      	bne.n	800076c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000760:	6862      	ldr	r2, [r4, #4]
 8000762:	68a9      	ldr	r1, [r5, #8]
 8000764:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000768:	430a      	orrs	r2, r1
 800076a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800076c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800076e:	6862      	ldr	r2, [r4, #4]
 8000770:	430b      	orrs	r3, r1
 8000772:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000776:	4313      	orrs	r3, r2
 8000778:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800077a:	2301      	movs	r3, #1
 800077c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800077e:	f7ff fd27 	bl	80001d0 <HAL_GetTick>
 8000782:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	019a      	lsls	r2, r3, #6
 8000788:	f53f aea7 	bmi.w	80004da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800078c:	f7ff fd20 	bl	80001d0 <HAL_GetTick>
 8000790:	1b40      	subs	r0, r0, r5
 8000792:	2802      	cmp	r0, #2
 8000794:	d9f6      	bls.n	8000784 <HAL_RCC_OscConfig+0x2d4>
 8000796:	e6cd      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000798:	f7ff fd1a 	bl	80001d0 <HAL_GetTick>
 800079c:	1bc0      	subs	r0, r0, r7
 800079e:	2802      	cmp	r0, #2
 80007a0:	d9d7      	bls.n	8000752 <HAL_RCC_OscConfig+0x2a2>
 80007a2:	e6c7      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007a4:	f7ff fd14 	bl	80001d0 <HAL_GetTick>
 80007a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	019b      	lsls	r3, r3, #6
 80007ae:	f57f ae94 	bpl.w	80004da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007b2:	f7ff fd0d 	bl	80001d0 <HAL_GetTick>
 80007b6:	1b40      	subs	r0, r0, r5
 80007b8:	2802      	cmp	r0, #2
 80007ba:	d9f6      	bls.n	80007aa <HAL_RCC_OscConfig+0x2fa>
 80007bc:	e6ba      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	42420060 	.word	0x42420060

080007c8 <HAL_RCC_GetSysClockFreq>:
{
 80007c8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007cc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ce:	ac02      	add	r4, sp, #8
 80007d0:	f103 0510 	add.w	r5, r3, #16
 80007d4:	4622      	mov	r2, r4
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	6859      	ldr	r1, [r3, #4]
 80007da:	3308      	adds	r3, #8
 80007dc:	c203      	stmia	r2!, {r0, r1}
 80007de:	42ab      	cmp	r3, r5
 80007e0:	4614      	mov	r4, r2
 80007e2:	d1f7      	bne.n	80007d4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e4:	2301      	movs	r3, #1
 80007e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80007ea:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007ec:	4911      	ldr	r1, [pc, #68]	; (8000834 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ee:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007f2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007f4:	f003 020c 	and.w	r2, r3, #12
 80007f8:	2a08      	cmp	r2, #8
 80007fa:	d117      	bne.n	800082c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000800:	a806      	add	r0, sp, #24
 8000802:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000804:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000806:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800080a:	d50c      	bpl.n	8000826 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800080c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000810:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000814:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000816:	aa06      	add	r2, sp, #24
 8000818:	4413      	add	r3, r2
 800081a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800081e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000822:	b007      	add	sp, #28
 8000824:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <HAL_RCC_GetSysClockFreq+0x74>)
 8000828:	4350      	muls	r0, r2
 800082a:	e7fa      	b.n	8000822 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800082e:	e7f8      	b.n	8000822 <HAL_RCC_GetSysClockFreq+0x5a>
 8000830:	08002a0c 	.word	0x08002a0c
 8000834:	40021000 	.word	0x40021000
 8000838:	007a1200 	.word	0x007a1200
 800083c:	003d0900 	.word	0x003d0900

08000840 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000840:	4a54      	ldr	r2, [pc, #336]	; (8000994 <HAL_RCC_ClockConfig+0x154>)
{
 8000842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000846:	6813      	ldr	r3, [r2, #0]
{
 8000848:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	428b      	cmp	r3, r1
{
 8000850:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000852:	d32a      	bcc.n	80008aa <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000854:	6829      	ldr	r1, [r5, #0]
 8000856:	078c      	lsls	r4, r1, #30
 8000858:	d434      	bmi.n	80008c4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800085a:	07ca      	lsls	r2, r1, #31
 800085c:	d447      	bmi.n	80008ee <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800085e:	4a4d      	ldr	r2, [pc, #308]	; (8000994 <HAL_RCC_ClockConfig+0x154>)
 8000860:	6813      	ldr	r3, [r2, #0]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	429e      	cmp	r6, r3
 8000868:	f0c0 8082 	bcc.w	8000970 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086c:	682a      	ldr	r2, [r5, #0]
 800086e:	4c4a      	ldr	r4, [pc, #296]	; (8000998 <HAL_RCC_ClockConfig+0x158>)
 8000870:	f012 0f04 	tst.w	r2, #4
 8000874:	f040 8087 	bne.w	8000986 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000878:	0713      	lsls	r3, r2, #28
 800087a:	d506      	bpl.n	800088a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800087c:	6863      	ldr	r3, [r4, #4]
 800087e:	692a      	ldr	r2, [r5, #16]
 8000880:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000884:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000888:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800088a:	f7ff ff9d 	bl	80007c8 <HAL_RCC_GetSysClockFreq>
 800088e:	6863      	ldr	r3, [r4, #4]
 8000890:	4a42      	ldr	r2, [pc, #264]	; (800099c <HAL_RCC_ClockConfig+0x15c>)
 8000892:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000896:	5cd3      	ldrb	r3, [r2, r3]
 8000898:	40d8      	lsrs	r0, r3
 800089a:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <HAL_RCC_ClockConfig+0x160>)
 800089c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fc54 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008a4:	2000      	movs	r0, #0
}
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008aa:	6813      	ldr	r3, [r2, #0]
 80008ac:	f023 0307 	bic.w	r3, r3, #7
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008b4:	6813      	ldr	r3, [r2, #0]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	4299      	cmp	r1, r3
 80008bc:	d0ca      	beq.n	8000854 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008be:	2001      	movs	r0, #1
 80008c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008c6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008ca:	bf1e      	ittt	ne
 80008cc:	685a      	ldrne	r2, [r3, #4]
 80008ce:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008d2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008d4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008d6:	bf42      	ittt	mi
 80008d8:	685a      	ldrmi	r2, [r3, #4]
 80008da:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008de:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	68a8      	ldr	r0, [r5, #8]
 80008e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008e8:	4302      	orrs	r2, r0
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	e7b5      	b.n	800085a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ee:	686a      	ldr	r2, [r5, #4]
 80008f0:	4c29      	ldr	r4, [pc, #164]	; (8000998 <HAL_RCC_ClockConfig+0x158>)
 80008f2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f6:	d11c      	bne.n	8000932 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fc:	d0df      	beq.n	80008be <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008fe:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000900:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000904:	f023 0303 	bic.w	r3, r3, #3
 8000908:	4313      	orrs	r3, r2
 800090a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800090c:	f7ff fc60 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000910:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000912:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000914:	2b01      	cmp	r3, #1
 8000916:	d114      	bne.n	8000942 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000918:	6863      	ldr	r3, [r4, #4]
 800091a:	f003 030c 	and.w	r3, r3, #12
 800091e:	2b04      	cmp	r3, #4
 8000920:	d09d      	beq.n	800085e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000922:	f7ff fc55 	bl	80001d0 <HAL_GetTick>
 8000926:	1bc0      	subs	r0, r0, r7
 8000928:	4540      	cmp	r0, r8
 800092a:	d9f5      	bls.n	8000918 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 800092c:	2003      	movs	r0, #3
 800092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000932:	2a02      	cmp	r2, #2
 8000934:	d102      	bne.n	800093c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000936:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800093a:	e7df      	b.n	80008fc <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093c:	f013 0f02 	tst.w	r3, #2
 8000940:	e7dc      	b.n	80008fc <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000942:	2b02      	cmp	r3, #2
 8000944:	d10f      	bne.n	8000966 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000946:	6863      	ldr	r3, [r4, #4]
 8000948:	f003 030c 	and.w	r3, r3, #12
 800094c:	2b08      	cmp	r3, #8
 800094e:	d086      	beq.n	800085e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000950:	f7ff fc3e 	bl	80001d0 <HAL_GetTick>
 8000954:	1bc0      	subs	r0, r0, r7
 8000956:	4540      	cmp	r0, r8
 8000958:	d9f5      	bls.n	8000946 <HAL_RCC_ClockConfig+0x106>
 800095a:	e7e7      	b.n	800092c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800095c:	f7ff fc38 	bl	80001d0 <HAL_GetTick>
 8000960:	1bc0      	subs	r0, r0, r7
 8000962:	4540      	cmp	r0, r8
 8000964:	d8e2      	bhi.n	800092c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000966:	6863      	ldr	r3, [r4, #4]
 8000968:	f013 0f0c 	tst.w	r3, #12
 800096c:	d1f6      	bne.n	800095c <HAL_RCC_ClockConfig+0x11c>
 800096e:	e776      	b.n	800085e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000970:	6813      	ldr	r3, [r2, #0]
 8000972:	f023 0307 	bic.w	r3, r3, #7
 8000976:	4333      	orrs	r3, r6
 8000978:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800097a:	6813      	ldr	r3, [r2, #0]
 800097c:	f003 0307 	and.w	r3, r3, #7
 8000980:	429e      	cmp	r6, r3
 8000982:	d19c      	bne.n	80008be <HAL_RCC_ClockConfig+0x7e>
 8000984:	e772      	b.n	800086c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000986:	6863      	ldr	r3, [r4, #4]
 8000988:	68e9      	ldr	r1, [r5, #12]
 800098a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800098e:	430b      	orrs	r3, r1
 8000990:	6063      	str	r3, [r4, #4]
 8000992:	e771      	b.n	8000878 <HAL_RCC_ClockConfig+0x38>
 8000994:	40022000 	.word	0x40022000
 8000998:	40021000 	.word	0x40021000
 800099c:	08002a8d 	.word	0x08002a8d
 80009a0:	20000008 	.word	0x20000008

080009a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	4a03      	ldr	r2, [pc, #12]	; (80009c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009b2:	6810      	ldr	r0, [r2, #0]
}    
 80009b4:	40d8      	lsrs	r0, r3
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000
 80009bc:	08002a9d 	.word	0x08002a9d
 80009c0:	20000008 	.word	0x20000008

080009c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009ce:	5cd3      	ldrb	r3, [r2, r3]
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009d2:	6810      	ldr	r0, [r2, #0]
} 
 80009d4:	40d8      	lsrs	r0, r3
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000
 80009dc:	08002a9d 	.word	0x08002a9d
 80009e0:	20000008 	.word	0x20000008

080009e4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009e4:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80009e6:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009e8:	68da      	ldr	r2, [r3, #12]
 80009ea:	f042 0201 	orr.w	r2, r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	4770      	bx	lr

080009fa <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80009fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80009fe:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	f04f 0302 	mov.w	r3, #2
 8000a06:	d01c      	beq.n	8000a42 <HAL_TIM_ConfigClockSource+0x48>
 8000a08:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000a0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000a0e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000a10:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000a14:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a16:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000a1a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000a20:	680a      	ldr	r2, [r1, #0]
 8000a22:	2a40      	cmp	r2, #64	; 0x40
 8000a24:	d079      	beq.n	8000b1a <HAL_TIM_ConfigClockSource+0x120>
 8000a26:	d819      	bhi.n	8000a5c <HAL_TIM_ConfigClockSource+0x62>
 8000a28:	2a10      	cmp	r2, #16
 8000a2a:	f000 8093 	beq.w	8000b54 <HAL_TIM_ConfigClockSource+0x15a>
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_TIM_ConfigClockSource+0x4c>
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	f000 8089 	beq.w	8000b48 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000a42:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000a44:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000a46:	2a20      	cmp	r2, #32
 8000a48:	f000 808a 	beq.w	8000b60 <HAL_TIM_ConfigClockSource+0x166>
 8000a4c:	2a30      	cmp	r2, #48	; 0x30
 8000a4e:	d1f2      	bne.n	8000a36 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000a50:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a56:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000a5a:	e036      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a5c:	2a70      	cmp	r2, #112	; 0x70
 8000a5e:	d036      	beq.n	8000ace <HAL_TIM_ConfigClockSource+0xd4>
 8000a60:	d81b      	bhi.n	8000a9a <HAL_TIM_ConfigClockSource+0xa0>
 8000a62:	2a50      	cmp	r2, #80	; 0x50
 8000a64:	d042      	beq.n	8000aec <HAL_TIM_ConfigClockSource+0xf2>
 8000a66:	2a60      	cmp	r2, #96	; 0x60
 8000a68:	d1e5      	bne.n	8000a36 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a6a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a6c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a6e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a72:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a74:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a76:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000a78:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000a7a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000a7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000a82:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000a86:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000a8a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a8c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000a8e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a94:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000a98:	e017      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a9a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000a9e:	d011      	beq.n	8000ac4 <HAL_TIM_ConfigClockSource+0xca>
 8000aa0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000aa4:	d1c7      	bne.n	8000a36 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000aa6:	688a      	ldr	r2, [r1, #8]
 8000aa8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000aaa:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000aac:	68c9      	ldr	r1, [r1, #12]
 8000aae:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ab0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ab4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ab8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000aba:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ac2:	e002      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	e7b3      	b.n	8000a36 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ace:	688a      	ldr	r2, [r1, #8]
 8000ad0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000ad2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ad4:	68c9      	ldr	r1, [r1, #12]
 8000ad6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ad8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000adc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ae0:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000ae2:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000ae4:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ae6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000aea:	e7ee      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000aec:	684c      	ldr	r4, [r1, #4]
 8000aee:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000af0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000af2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000af4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000af8:	f025 0501 	bic.w	r5, r5, #1
 8000afc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000afe:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b00:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b06:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b0c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b0e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b14:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000b18:	e7d7      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b1a:	684c      	ldr	r4, [r1, #4]
 8000b1c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b1e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b20:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b22:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b26:	f025 0501 	bic.w	r5, r5, #1
 8000b2a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b2c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b2e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b34:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b3a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b3c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b42:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000b46:	e7c0      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b48:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b4e:	f042 0207 	orr.w	r2, r2, #7
 8000b52:	e7ba      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b54:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b5a:	f042 0217 	orr.w	r2, r2, #23
 8000b5e:	e7b4      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b60:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b66:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000b6a:	e7ae      	b.n	8000aca <HAL_TIM_ConfigClockSource+0xd0>

08000b6c <HAL_TIM_OC_DelayElapsedCallback>:
 8000b6c:	4770      	bx	lr

08000b6e <HAL_TIM_IC_CaptureCallback>:
 8000b6e:	4770      	bx	lr

08000b70 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b70:	4770      	bx	lr

08000b72 <HAL_TIM_TriggerCallback>:
 8000b72:	4770      	bx	lr

08000b74 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b74:	6803      	ldr	r3, [r0, #0]
{
 8000b76:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b78:	691a      	ldr	r2, [r3, #16]
{
 8000b7a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b7c:	0791      	lsls	r1, r2, #30
 8000b7e:	d50e      	bpl.n	8000b9e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b80:	68da      	ldr	r2, [r3, #12]
 8000b82:	0792      	lsls	r2, r2, #30
 8000b84:	d50b      	bpl.n	8000b9e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b86:	f06f 0202 	mvn.w	r2, #2
 8000b8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b8c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b8e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b90:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b92:	079b      	lsls	r3, r3, #30
 8000b94:	d077      	beq.n	8000c86 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000b96:	f7ff ffea 	bl	8000b6e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	0750      	lsls	r0, r2, #29
 8000ba4:	d510      	bpl.n	8000bc8 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	0751      	lsls	r1, r2, #29
 8000baa:	d50d      	bpl.n	8000bc8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000bac:	f06f 0204 	mvn.w	r2, #4
 8000bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bb2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bb4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bb6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bb8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000bbc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bbe:	d068      	beq.n	8000c92 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bc0:	f7ff ffd5 	bl	8000b6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	0712      	lsls	r2, r2, #28
 8000bce:	d50f      	bpl.n	8000bf0 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	0710      	lsls	r0, r2, #28
 8000bd4:	d50c      	bpl.n	8000bf0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000bd6:	f06f 0208 	mvn.w	r2, #8
 8000bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bdc:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bde:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000be0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000be2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000be4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000be6:	d05a      	beq.n	8000c9e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000be8:	f7ff ffc1 	bl	8000b6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bec:	2300      	movs	r3, #0
 8000bee:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	691a      	ldr	r2, [r3, #16]
 8000bf4:	06d2      	lsls	r2, r2, #27
 8000bf6:	d510      	bpl.n	8000c1a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	06d0      	lsls	r0, r2, #27
 8000bfc:	d50d      	bpl.n	8000c1a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000bfe:	f06f 0210 	mvn.w	r2, #16
 8000c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c04:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c06:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c08:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c0a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000c0e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c10:	d04b      	beq.n	8000caa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c12:	f7ff ffac 	bl	8000b6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c16:	2300      	movs	r3, #0
 8000c18:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	691a      	ldr	r2, [r3, #16]
 8000c1e:	07d1      	lsls	r1, r2, #31
 8000c20:	d508      	bpl.n	8000c34 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	07d2      	lsls	r2, r2, #31
 8000c26:	d505      	bpl.n	8000c34 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c28:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c2c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c30:	f000 fcb2 	bl	8001598 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	0610      	lsls	r0, r2, #24
 8000c3a:	d508      	bpl.n	8000c4e <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	0611      	lsls	r1, r2, #24
 8000c40:	d505      	bpl.n	8000c4e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c42:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000c46:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c4a:	f000 f8aa 	bl	8000da2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	0652      	lsls	r2, r2, #25
 8000c54:	d508      	bpl.n	8000c68 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	0650      	lsls	r0, r2, #25
 8000c5a:	d505      	bpl.n	8000c68 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000c60:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c62:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c64:	f7ff ff85 	bl	8000b72 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	691a      	ldr	r2, [r3, #16]
 8000c6c:	0691      	lsls	r1, r2, #26
 8000c6e:	d522      	bpl.n	8000cb6 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	0692      	lsls	r2, r2, #26
 8000c74:	d51f      	bpl.n	8000cb6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c76:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c7a:	4620      	mov	r0, r4
}
 8000c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c82:	f000 b88d 	b.w	8000da0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c86:	f7ff ff71 	bl	8000b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f7ff ff70 	bl	8000b70 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c90:	e783      	b.n	8000b9a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c92:	f7ff ff6b 	bl	8000b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff ff6a 	bl	8000b70 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c9c:	e792      	b.n	8000bc4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c9e:	f7ff ff65 	bl	8000b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f7ff ff64 	bl	8000b70 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ca8:	e7a0      	b.n	8000bec <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000caa:	f7ff ff5f 	bl	8000b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff ff5e 	bl	8000b70 <HAL_TIM_PWM_PulseFinishedCallback>
 8000cb4:	e7af      	b.n	8000c16 <HAL_TIM_IRQHandler+0xa2>
 8000cb6:	bd10      	pop	{r4, pc}

08000cb8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000cba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	d00a      	beq.n	8000cd6 <TIM_Base_SetConfig+0x1e>
 8000cc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cc4:	d007      	beq.n	8000cd6 <TIM_Base_SetConfig+0x1e>
 8000cc6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d003      	beq.n	8000cd6 <TIM_Base_SetConfig+0x1e>
 8000cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd2:	4290      	cmp	r0, r2
 8000cd4:	d115      	bne.n	8000d02 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000cd6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000cdc:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <TIM_Base_SetConfig+0x6c>)
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d00a      	beq.n	8000cfa <TIM_Base_SetConfig+0x42>
 8000ce4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ce8:	d007      	beq.n	8000cfa <TIM_Base_SetConfig+0x42>
 8000cea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	d003      	beq.n	8000cfa <TIM_Base_SetConfig+0x42>
 8000cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d103      	bne.n	8000d02 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cfa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d00:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d02:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d08:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000d0a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d0c:	688b      	ldr	r3, [r1, #8]
 8000d0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d10:	680b      	ldr	r3, [r1, #0]
 8000d12:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <TIM_Base_SetConfig+0x6c>)
 8000d16:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000d18:	bf04      	itt	eq
 8000d1a:	690b      	ldreq	r3, [r1, #16]
 8000d1c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	6143      	str	r3, [r0, #20]
 8000d22:	4770      	bx	lr
 8000d24:	40012c00 	.word	0x40012c00

08000d28 <HAL_TIM_Base_Init>:
{
 8000d28:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	b1a0      	cbz	r0, 8000d58 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d36:	b91b      	cbnz	r3, 8000d40 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d3c:	f000 fdf8 	bl	8001930 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d42:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000d44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d48:	1d21      	adds	r1, r4, #4
 8000d4a:	f7ff ffb5 	bl	8000cb8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d4e:	2301      	movs	r3, #1
  return HAL_OK;
 8000d50:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000d52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d58:	2001      	movs	r0, #1
}
 8000d5a:	bd10      	pop	{r4, pc}

08000d5c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000d5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d60:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	f04f 0302 	mov.w	r3, #2
 8000d68:	d018      	beq.n	8000d9c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000d6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d6e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d70:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d72:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d74:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d7a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4322      	orrs	r2, r4
 8000d80:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d88:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000d90:	2301      	movs	r3, #1
 8000d92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000d96:	2300      	movs	r3, #0
 8000d98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000d9c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d9e:	bd10      	pop	{r4, pc}

08000da0 <HAL_TIMEx_CommutationCallback>:
 8000da0:	4770      	bx	lr

08000da2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000da2:	4770      	bx	lr

08000da4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000da8:	6805      	ldr	r5, [r0, #0]
 8000daa:	68c2      	ldr	r2, [r0, #12]
 8000dac:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dae:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000db0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db4:	4313      	orrs	r3, r2
 8000db6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000db8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000dba:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000dc0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000dc4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dc8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000dce:	696b      	ldr	r3, [r5, #20]
 8000dd0:	6982      	ldr	r2, [r0, #24]
 8000dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000dda:	4b40      	ldr	r3, [pc, #256]	; (8000edc <UART_SetConfig+0x138>)
{
 8000ddc:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000dde:	429d      	cmp	r5, r3
 8000de0:	f04f 0419 	mov.w	r4, #25
 8000de4:	d146      	bne.n	8000e74 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000de6:	f7ff fded 	bl	80009c4 <HAL_RCC_GetPCLK2Freq>
 8000dea:	fb04 f300 	mul.w	r3, r4, r0
 8000dee:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000df2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000df6:	00b6      	lsls	r6, r6, #2
 8000df8:	fbb3 f3f6 	udiv	r3, r3, r6
 8000dfc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e00:	011e      	lsls	r6, r3, #4
 8000e02:	f7ff fddf 	bl	80009c4 <HAL_RCC_GetPCLK2Freq>
 8000e06:	4360      	muls	r0, r4
 8000e08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e12:	f7ff fdd7 	bl	80009c4 <HAL_RCC_GetPCLK2Freq>
 8000e16:	4360      	muls	r0, r4
 8000e18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e22:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e26:	fb08 7313 	mls	r3, r8, r3, r7
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	3332      	adds	r3, #50	; 0x32
 8000e2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e32:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000e36:	f7ff fdc5 	bl	80009c4 <HAL_RCC_GetPCLK2Freq>
 8000e3a:	4360      	muls	r0, r4
 8000e3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	fbb0 faf2 	udiv	sl, r0, r2
 8000e46:	f7ff fdbd 	bl	80009c4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e4a:	4360      	muls	r0, r4
 8000e4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e56:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e5a:	fb08 a313 	mls	r3, r8, r3, sl
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	3332      	adds	r3, #50	; 0x32
 8000e62:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	433b      	orrs	r3, r7
 8000e6c:	4433      	add	r3, r6
 8000e6e:	60ab      	str	r3, [r5, #8]
 8000e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e74:	f7ff fd96 	bl	80009a4 <HAL_RCC_GetPCLK1Freq>
 8000e78:	fb04 f300 	mul.w	r3, r4, r0
 8000e7c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e80:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e84:	00b6      	lsls	r6, r6, #2
 8000e86:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e8a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e8e:	011e      	lsls	r6, r3, #4
 8000e90:	f7ff fd88 	bl	80009a4 <HAL_RCC_GetPCLK1Freq>
 8000e94:	4360      	muls	r0, r4
 8000e96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ea0:	f7ff fd80 	bl	80009a4 <HAL_RCC_GetPCLK1Freq>
 8000ea4:	4360      	muls	r0, r4
 8000ea6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eb4:	fb08 7313 	mls	r3, r8, r3, r7
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	3332      	adds	r3, #50	; 0x32
 8000ebc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ec0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ec4:	f7ff fd6e 	bl	80009a4 <HAL_RCC_GetPCLK1Freq>
 8000ec8:	4360      	muls	r0, r4
 8000eca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	fbb0 faf2 	udiv	sl, r0, r2
 8000ed4:	f7ff fd66 	bl	80009a4 <HAL_RCC_GetPCLK1Freq>
 8000ed8:	e7b7      	b.n	8000e4a <UART_SetConfig+0xa6>
 8000eda:	bf00      	nop
 8000edc:	40013800 	.word	0x40013800

08000ee0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	460e      	mov	r6, r1
 8000ee6:	4617      	mov	r7, r2
 8000ee8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000eea:	6821      	ldr	r1, [r4, #0]
 8000eec:	680b      	ldr	r3, [r1, #0]
 8000eee:	ea36 0303 	bics.w	r3, r6, r3
 8000ef2:	d101      	bne.n	8000ef8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000ef4:	2000      	movs	r0, #0
}
 8000ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ef8:	1c6b      	adds	r3, r5, #1
 8000efa:	d0f7      	beq.n	8000eec <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000efc:	b995      	cbnz	r5, 8000f24 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000efe:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000f00:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	f022 0201 	bic.w	r2, r2, #1
 8000f10:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f12:	2320      	movs	r3, #32
 8000f14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f18:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f24:	f7ff f954 	bl	80001d0 <HAL_GetTick>
 8000f28:	1bc0      	subs	r0, r0, r7
 8000f2a:	4285      	cmp	r5, r0
 8000f2c:	d2dd      	bcs.n	8000eea <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f2e:	e7e6      	b.n	8000efe <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f30 <HAL_UART_Init>:
{
 8000f30:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f32:	4604      	mov	r4, r0
 8000f34:	b340      	cbz	r0, 8000f88 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f36:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f3e:	b91b      	cbnz	r3, 8000f48 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f40:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f44:	f000 fd12 	bl	800196c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f48:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f4a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f50:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f52:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f58:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f5a:	f7ff ff23 	bl	8000da4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f5e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f60:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f70:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f78:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000f7a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f7c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f82:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
}
 8000f8a:	bd10      	pop	{r4, pc}

08000f8c <HAL_UART_Transmit>:
{
 8000f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f90:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000f92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000f96:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000f98:	2b20      	cmp	r3, #32
{
 8000f9a:	460d      	mov	r5, r1
 8000f9c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000f9e:	d14e      	bne.n	800103e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000fa0:	2900      	cmp	r1, #0
 8000fa2:	d049      	beq.n	8001038 <HAL_UART_Transmit+0xac>
 8000fa4:	2a00      	cmp	r2, #0
 8000fa6:	d047      	beq.n	8001038 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000fa8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d046      	beq.n	800103e <HAL_UART_Transmit+0xb2>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000fba:	2321      	movs	r3, #33	; 0x21
 8000fbc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000fc0:	f7ff f906 	bl	80001d0 <HAL_GetTick>
 8000fc4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000fc6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000fca:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000fce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b96b      	cbnz	r3, 8000ff0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4632      	mov	r2, r6
 8000fd8:	2140      	movs	r1, #64	; 0x40
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f7ff ff80 	bl	8000ee0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000fe0:	b9a8      	cbnz	r0, 800100e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000fe2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000fe4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000fe8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000ff0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ff2:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ffa:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ffc:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001002:	4620      	mov	r0, r4
 8001004:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001006:	d10e      	bne.n	8001026 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001008:	f7ff ff6a 	bl	8000ee0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800100c:	b110      	cbz	r0, 8001014 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800100e:	2003      	movs	r0, #3
 8001010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001014:	882b      	ldrh	r3, [r5, #0]
 8001016:	6822      	ldr	r2, [r4, #0]
 8001018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800101c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800101e:	6923      	ldr	r3, [r4, #16]
 8001020:	b943      	cbnz	r3, 8001034 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001022:	3502      	adds	r5, #2
 8001024:	e7d3      	b.n	8000fce <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001026:	f7ff ff5b 	bl	8000ee0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800102a:	2800      	cmp	r0, #0
 800102c:	d1ef      	bne.n	800100e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	782a      	ldrb	r2, [r5, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	3501      	adds	r5, #1
 8001036:	e7ca      	b.n	8000fce <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001038:	2001      	movs	r0, #1
 800103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800103e:	2002      	movs	r0, #2
}
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001044 <DispOutSeg>:
            break;
    }
}

static void DispOutSeg(uint8_t seg)
{
 8001044:	b510      	push	{r4, lr}
 8001046:	4604      	mov	r4, r0
    //0x80 0x40 0x20 0x10 0x08 0x04  0x02  0x01
    //PA0, PA1, PA2, PA3, PB5, PC13, PC11, PA8
    if( seg & 0x80 )    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001048:	0603      	lsls	r3, r0, #24
 800104a:	bf4c      	ite	mi
 800104c:	2201      	movmi	r2, #1
    else                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800104e:	2200      	movpl	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	4820      	ldr	r0, [pc, #128]	; (80010d4 <DispOutSeg+0x90>)
 8001054:	f7ff fa22 	bl	800049c <HAL_GPIO_WritePin>

    if( seg & 0x40 )    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001058:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 800105c:	bf18      	it	ne
 800105e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001060:	2102      	movs	r1, #2
 8001062:	481c      	ldr	r0, [pc, #112]	; (80010d4 <DispOutSeg+0x90>)
 8001064:	f7ff fa1a 	bl	800049c <HAL_GPIO_WritePin>

    if( seg & 0x20 )    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001068:	f014 0220 	ands.w	r2, r4, #32
 800106c:	bf18      	it	ne
 800106e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001070:	2104      	movs	r1, #4
 8001072:	4818      	ldr	r0, [pc, #96]	; (80010d4 <DispOutSeg+0x90>)
 8001074:	f7ff fa12 	bl	800049c <HAL_GPIO_WritePin>

    if( seg & 0x10 )    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001078:	f014 0210 	ands.w	r2, r4, #16
 800107c:	bf18      	it	ne
 800107e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001080:	2108      	movs	r1, #8
 8001082:	4814      	ldr	r0, [pc, #80]	; (80010d4 <DispOutSeg+0x90>)
 8001084:	f7ff fa0a 	bl	800049c <HAL_GPIO_WritePin>

    if( seg & 0x08 )    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001088:	f014 0208 	ands.w	r2, r4, #8
 800108c:	bf18      	it	ne
 800108e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001090:	2120      	movs	r1, #32
 8001092:	4811      	ldr	r0, [pc, #68]	; (80010d8 <DispOutSeg+0x94>)
 8001094:	f7ff fa02 	bl	800049c <HAL_GPIO_WritePin>

    if( seg & 0x04 )    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001098:	f014 0204 	ands.w	r2, r4, #4
 800109c:	bf18      	it	ne
 800109e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <DispOutSeg+0x98>)
 80010a6:	f7ff f9f9 	bl	800049c <HAL_GPIO_WritePin>

    if( seg & 0x02 )    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80010aa:	f014 0202 	ands.w	r2, r4, #2
 80010ae:	bf18      	it	ne
 80010b0:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80010b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <DispOutSeg+0x98>)
 80010b8:	f7ff f9f0 	bl	800049c <HAL_GPIO_WritePin>

    if( seg & 0x01 )    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010bc:	f014 0201 	ands.w	r2, r4, #1
 80010c0:	bf18      	it	ne
 80010c2:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
}
 80010c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4801      	ldr	r0, [pc, #4]	; (80010d4 <DispOutSeg+0x90>)
 80010ce:	f7ff b9e5 	b.w	800049c <HAL_GPIO_WritePin>
 80010d2:	bf00      	nop
 80010d4:	40010800 	.word	0x40010800
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	40011000 	.word	0x40011000

080010e0 <DispInit>:

//void DispInit(void)
void DispInit(DISP* Disp)
{
    Disp->DigMsk = 0x80;
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	7003      	strb	r3, [r0, #0]
    Disp->SegTblIx = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	7143      	strb	r3, [r0, #5]
 80010e8:	4770      	bx	lr
	...

080010ec <DispMuxHandler>:
}

//void DispMuxHandler(void)
void DispMuxHandler(DISP* Disp)
{
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4604      	mov	r4, r0
    DispOutSeg(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ffa7 	bl	8001044 <DispOutSeg>
    switch( msk )
 80010f6:	7825      	ldrb	r5, [r4, #0]
 80010f8:	2d20      	cmp	r5, #32
 80010fa:	d037      	beq.n	800116c <DispMuxHandler+0x80>
 80010fc:	d813      	bhi.n	8001126 <DispMuxHandler+0x3a>
 80010fe:	2d10      	cmp	r5, #16
 8001100:	d042      	beq.n	8001188 <DispMuxHandler+0x9c>
    DispOutDig(Disp->DigMsk);
    DispOutSeg(Disp->SegTbl[Disp->SegTblIx]);
 8001102:	7963      	ldrb	r3, [r4, #5]
 8001104:	4423      	add	r3, r4
 8001106:	7858      	ldrb	r0, [r3, #1]
 8001108:	f7ff ff9c 	bl	8001044 <DispOutSeg>
    if( Disp->SegTblIx == (DISP_N_DIG - 1))
 800110c:	7963      	ldrb	r3, [r4, #5]
 800110e:	2b03      	cmp	r3, #3
    {
        Disp->SegTblIx = 0;
 8001110:	bf03      	ittte	eq
 8001112:	2300      	moveq	r3, #0
 8001114:	7163      	strbeq	r3, [r4, #5]
        Disp->DigMsk = 0x80;
 8001116:	2380      	moveq	r3, #128	; 0x80
    }
    else
    {
        Disp->SegTblIx++;
 8001118:	3301      	addne	r3, #1
 800111a:	bf1e      	ittt	ne
 800111c:	7163      	strbne	r3, [r4, #5]
        Disp->DigMsk >>= 1;
 800111e:	7823      	ldrbne	r3, [r4, #0]
 8001120:	085b      	lsrne	r3, r3, #1
 8001122:	7023      	strb	r3, [r4, #0]
 8001124:	bd38      	pop	{r3, r4, r5, pc}
    switch( msk )
 8001126:	2d40      	cmp	r5, #64	; 0x40
 8001128:	d018      	beq.n	800115c <DispMuxHandler+0x70>
 800112a:	2d80      	cmp	r5, #128	; 0x80
 800112c:	d1e9      	bne.n	8001102 <DispMuxHandler+0x16>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);      // COM1
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001134:	481e      	ldr	r0, [pc, #120]	; (80011b0 <DispMuxHandler+0xc4>)
 8001136:	f7ff f9b1 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);    // COM2
 800113a:	2200      	movs	r2, #0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);      // COM2
 800113c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001140:	481b      	ldr	r0, [pc, #108]	; (80011b0 <DispMuxHandler+0xc4>)
 8001142:	f7ff f9ab 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);     // COM3
 8001146:	2200      	movs	r2, #0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);       // COM3
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	4819      	ldr	r0, [pc, #100]	; (80011b0 <DispMuxHandler+0xc4>)
 800114c:	f7ff f9a6 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);     // COM4
 8001150:	2200      	movs	r2, #0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);       // COM4
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	4816      	ldr	r0, [pc, #88]	; (80011b0 <DispMuxHandler+0xc4>)
 8001156:	f7ff f9a1 	bl	800049c <HAL_GPIO_WritePin>
 800115a:	e7d2      	b.n	8001102 <DispMuxHandler+0x16>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);    // COM1
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001162:	4813      	ldr	r0, [pc, #76]	; (80011b0 <DispMuxHandler+0xc4>)
 8001164:	f7ff f99a 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);      // COM2
 8001168:	2201      	movs	r2, #1
 800116a:	e7e7      	b.n	800113c <DispMuxHandler+0x50>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);    // COM1
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <DispMuxHandler+0xc4>)
 8001174:	f7ff f992 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);    // COM2
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <DispMuxHandler+0xc4>)
 8001180:	f7ff f98c 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);       // COM3
 8001184:	2201      	movs	r2, #1
 8001186:	e7df      	b.n	8001148 <DispMuxHandler+0x5c>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);    // COM1
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <DispMuxHandler+0xc4>)
 8001190:	f7ff f984 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);    // COM2
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <DispMuxHandler+0xc4>)
 800119c:	f7ff f97e 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);     // COM3
 80011a0:	2200      	movs	r2, #0
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <DispMuxHandler+0xc4>)
 80011a6:	f7ff f979 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);       // COM4
 80011aa:	2201      	movs	r2, #1
 80011ac:	e7d1      	b.n	8001152 <DispMuxHandler+0x66>
 80011ae:	bf00      	nop
 80011b0:	40010800 	.word	0x40010800

080011b4 <DispStr>:
    }
}

void DispStr(DISP* Disp, uint8_t dig, char *s)
{
 80011b4:	b530      	push	{r4, r5, lr}

    while( *s && dig < DISP_N_DIG )
    {
        stat = Disp->SegTbl[dig] & 0x01;

        Disp->SegTbl[dig++] = DispASCIItoSegTbl[*s++ - 0x20] | stat;    // 0x20: from Space
 80011b6:	4d0a      	ldr	r5, [pc, #40]	; (80011e0 <DispStr+0x2c>)
 80011b8:	3a01      	subs	r2, #1
 80011ba:	4408      	add	r0, r1
    while( *s && dig < DISP_N_DIG )
 80011bc:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80011c0:	b10c      	cbz	r4, 80011c6 <DispStr+0x12>
 80011c2:	2903      	cmp	r1, #3
 80011c4:	d900      	bls.n	80011c8 <DispStr+0x14>
 80011c6:	bd30      	pop	{r4, r5, pc}
        stat = Disp->SegTbl[dig] & 0x01;
 80011c8:	7843      	ldrb	r3, [r0, #1]
        Disp->SegTbl[dig++] = DispASCIItoSegTbl[*s++ - 0x20] | stat;    // 0x20: from Space
 80011ca:	442c      	add	r4, r5
 80011cc:	f814 4c20 	ldrb.w	r4, [r4, #-32]
        stat = Disp->SegTbl[dig] & 0x01;
 80011d0:	f003 0301 	and.w	r3, r3, #1
        Disp->SegTbl[dig++] = DispASCIItoSegTbl[*s++ - 0x20] | stat;    // 0x20: from Space
 80011d4:	3101      	adds	r1, #1
 80011d6:	4323      	orrs	r3, r4
 80011d8:	b2c9      	uxtb	r1, r1
 80011da:	f800 3f01 	strb.w	r3, [r0, #1]!
 80011de:	e7ed      	b.n	80011bc <DispStr+0x8>
 80011e0:	08002a1c 	.word	0x08002a1c

080011e4 <KeyBufIn>:


//static void KeyBufIn(uint8_t code)
static void KeyBufIn(KEY* Key, uint8_t code)
{
    if( Key->NRead < KEY_BUF_SIZE )
 80011e4:	7b03      	ldrb	r3, [r0, #12]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	d80b      	bhi.n	8001202 <KeyBufIn+0x1e>
    {
        Key->NRead++;
        Key->Buf[Key->BufInIx++] = code;
 80011ea:	7a82      	ldrb	r2, [r0, #10]
        Key->NRead++;
 80011ec:	3301      	adds	r3, #1
 80011ee:	7303      	strb	r3, [r0, #12]
        Key->Buf[Key->BufInIx++] = code;
 80011f0:	1c53      	adds	r3, r2, #1
 80011f2:	b2db      	uxtb	r3, r3
        if( Key->BufInIx >= KEY_BUF_SIZE )
 80011f4:	2b09      	cmp	r3, #9
        Key->Buf[Key->BufInIx++] = code;
 80011f6:	7283      	strb	r3, [r0, #10]
        {
            Key->BufInIx = 0;
 80011f8:	bf88      	it	hi
 80011fa:	2300      	movhi	r3, #0
        Key->Buf[Key->BufInIx++] = code;
 80011fc:	5481      	strb	r1, [r0, r2]
            Key->BufInIx = 0;
 80011fe:	bf88      	it	hi
 8001200:	7283      	strbhi	r3, [r0, #10]
 8001202:	4770      	bx	lr

08001204 <KeyGetCol>:
{
 8001204:	b510      	push	{r4, lr}
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_RESET)  // KEY1, Shift
 8001206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <KeyGetCol+0x44>)
 800120c:	f7ff f940 	bl	8000490 <HAL_GPIO_ReadPin>
    if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET)   // KEY2, Shift
 8001210:	2104      	movs	r1, #4
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_RESET)  // KEY1, Shift
 8001212:	2800      	cmp	r0, #0
    if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET)   // KEY2, Shift
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <KeyGetCol+0x48>)
        col |= 0x80;
 8001216:	bf14      	ite	ne
 8001218:	2400      	movne	r4, #0
 800121a:	2480      	moveq	r4, #128	; 0x80
    if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET)   // KEY2, Shift
 800121c:	f7ff f938 	bl	8000490 <HAL_GPIO_ReadPin>
 8001220:	b908      	cbnz	r0, 8001226 <KeyGetCol+0x22>
        col |= 0x40;
 8001222:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET)
 8001226:	2110      	movs	r1, #16
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <KeyGetCol+0x4c>)
 800122a:	f7ff f931 	bl	8000490 <HAL_GPIO_ReadPin>
 800122e:	b908      	cbnz	r0, 8001234 <KeyGetCol+0x30>
        col |= 0x02;
 8001230:	f044 0402 	orr.w	r4, r4, #2
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 8001234:	2120      	movs	r1, #32
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <KeyGetCol+0x4c>)
 8001238:	f7ff f92a 	bl	8000490 <HAL_GPIO_ReadPin>
 800123c:	b908      	cbnz	r0, 8001242 <KeyGetCol+0x3e>
        col |= 0x01;
 800123e:	f044 0401 	orr.w	r4, r4, #1
}
 8001242:	4620      	mov	r0, r4
 8001244:	bd10      	pop	{r4, pc}
 8001246:	bf00      	nop
 8001248:	40011000 	.word	0x40011000
 800124c:	40011400 	.word	0x40011400
 8001250:	40010800 	.word	0x40010800

08001254 <KeyIsKeyDown>:
{
 8001254:	b508      	push	{r3, lr}
    if( KeyGetCol() & ((1<<KEY_MAX_COLS) -1) )  //0x03 Output
 8001256:	f7ff ffd5 	bl	8001204 <KeyGetCol>
}
 800125a:	f010 0003 	ands.w	r0, r0, #3
 800125e:	bf18      	it	ne
 8001260:	2001      	movne	r0, #1
 8001262:	bd08      	pop	{r3, pc}

08001264 <KeySelRow>:
    switch(row)
 8001264:	2801      	cmp	r0, #1
{
 8001266:	b510      	push	{r4, lr}
 8001268:	4604      	mov	r4, r0
    switch(row)
 800126a:	d00b      	beq.n	8001284 <KeySelRow+0x20>
 800126c:	d302      	bcc.n	8001274 <KeySelRow+0x10>
 800126e:	2802      	cmp	r0, #2
 8001270:	d016      	beq.n	80012a0 <KeySelRow+0x3c>
 8001272:	bd10      	pop	{r4, pc}
            HAL_GPIO_WritePin(KEY_ROW1_GPIO_Port, KEY_ROW1_Pin, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
            HAL_GPIO_WritePin(KEY_ROW1_GPIO_Port, KEY_ROW1_Pin, GPIO_PIN_RESET);
 8001276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127a:	480a      	ldr	r0, [pc, #40]	; (80012a4 <KeySelRow+0x40>)
 800127c:	f7ff f90e 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(KEY_ROW2_GPIO_Port, KEY_ROW2_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	e006      	b.n	8001292 <KeySelRow+0x2e>
            HAL_GPIO_WritePin(KEY_ROW1_GPIO_Port, KEY_ROW1_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <KeySelRow+0x40>)
 800128c:	f7ff f906 	bl	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(KEY_ROW2_GPIO_Port, KEY_ROW2_Pin, GPIO_PIN_SET);
 8001290:	4622      	mov	r2, r4
}
 8001292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            HAL_GPIO_WritePin(KEY_ROW2_GPIO_Port, KEY_ROW2_Pin, GPIO_PIN_RESET);
 8001296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129a:	4802      	ldr	r0, [pc, #8]	; (80012a4 <KeySelRow+0x40>)
 800129c:	f7ff b8fe 	b.w	800049c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(KEY_ROW1_GPIO_Port, KEY_ROW1_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	e7e8      	b.n	8001276 <KeySelRow+0x12>
 80012a4:	40011000 	.word	0x40011000

080012a8 <KeyDecode>:
{
 80012a8:	b510      	push	{r4, lr}
    row = 0;
 80012aa:	2400      	movs	r4, #0
        KeySelRow(row);
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff ffd9 	bl	8001264 <KeySelRow>
        if( KeyIsKeyDown() )
 80012b2:	f7ff ffcf 	bl	8001254 <KeyIsKeyDown>
 80012b6:	b920      	cbnz	r0, 80012c2 <KeyDecode+0x1a>
            row++;
 80012b8:	3401      	adds	r4, #1
 80012ba:	b2e4      	uxtb	r4, r4
    while( row < KEY_MAX_ROWS && !done)
 80012bc:	2c01      	cmp	r4, #1
 80012be:	d0f5      	beq.n	80012ac <KeyDecode+0x4>
 80012c0:	2402      	movs	r4, #2
    col = KeyGetCol();
 80012c2:	f7ff ff9f 	bl	8001204 <KeyGetCol>
        offset += KEY_SHIFT1_OFFSET;
 80012c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80012ca:	bf0c      	ite	eq
 80012cc:	2300      	moveq	r3, #0
 80012ce:	2304      	movne	r3, #4
    if( col & KEY_SHIFT2_MSK)
 80012d0:	0641      	lsls	r1, r0, #25
        offset += KEY_SHIFT2_OFFSET;
 80012d2:	bf48      	it	mi
 80012d4:	3308      	addmi	r3, #8
        if(col & msk)
 80012d6:	07c2      	lsls	r2, r0, #31
 80012d8:	d409      	bmi.n	80012ee <KeyDecode+0x46>
 80012da:	f010 0f02 	tst.w	r0, #2
 80012de:	bf0c      	ite	eq
 80012e0:	2002      	moveq	r0, #2
 80012e2:	2001      	movne	r0, #1
    return (col_id + row * KEY_MAX_COLS + offset );
 80012e4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80012e8:	4420      	add	r0, r4
}
 80012ea:	b2c0      	uxtb	r0, r0
 80012ec:	bd10      	pop	{r4, pc}
        if(col & msk)
 80012ee:	2000      	movs	r0, #0
 80012f0:	e7f8      	b.n	80012e4 <KeyDecode+0x3c>

080012f2 <KeyHit>:
//bool KeyHit(void)
bool KeyHit(KEY* Key)
{
    bool hit;

    hit = (bool)(Key->NRead > 0) ? TRUE : FALSE;
 80012f2:	7b00      	ldrb	r0, [r0, #12]

    return hit;
}
 80012f4:	3000      	adds	r0, #0
 80012f6:	bf18      	it	ne
 80012f8:	2001      	movne	r0, #1
 80012fa:	4770      	bx	lr

080012fc <KeyGetKey>:
//uint8_t KeyGetKey(void)
uint8_t KeyGetKey(KEY* Key)
{
    uint8_t code;

    if( Key->NRead > 0 )
 80012fc:	7b03      	ldrb	r3, [r0, #12]
{
 80012fe:	4602      	mov	r2, r0
    if( Key->NRead > 0 )
 8001300:	b153      	cbz	r3, 8001318 <KeyGetKey+0x1c>
    {
        Key->NRead--;
 8001302:	3b01      	subs	r3, #1
 8001304:	7303      	strb	r3, [r0, #12]
        code = Key->Buf[Key->BufOutIx];
 8001306:	7ac3      	ldrb	r3, [r0, #11]
 8001308:	5cc0      	ldrb	r0, [r0, r3]
        Key->BufOutIx++;
 800130a:	3301      	adds	r3, #1
 800130c:	b2db      	uxtb	r3, r3
        if( Key->BufOutIx >= KEY_BUF_SIZE )
 800130e:	2b09      	cmp	r3, #9
        {
            Key->BufOutIx = 0;
 8001310:	bf88      	it	hi
 8001312:	2300      	movhi	r3, #0
 8001314:	72d3      	strb	r3, [r2, #11]
 8001316:	4770      	bx	lr

        return code;
    }
    else
    {
        return 0xFF;
 8001318:	20ff      	movs	r0, #255	; 0xff
    }
}
 800131a:	4770      	bx	lr

0800131c <KeyInit>:

//void KeyInit(void)
void KeyInit(KEY* Key)
{
 800131c:	b510      	push	{r4, lr}
 800131e:	4604      	mov	r4, r0
    KeySelRow(KEY_ALL_ROWS);
 8001320:	2002      	movs	r0, #2
 8001322:	f7ff ff9f 	bl	8001264 <KeySelRow>
    Key->ScanState = KEY_STATE_UP;
 8001326:	2301      	movs	r3, #1
 8001328:	73e3      	strb	r3, [r4, #15]
    Key->NRead = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	7323      	strb	r3, [r4, #12]
    Key->BufInIx = 0;
 800132e:	72a3      	strb	r3, [r4, #10]
    Key->BufOutIx = 0;
 8001330:	72e3      	strb	r3, [r4, #11]
 8001332:	bd10      	pop	{r4, pc}

08001334 <KeyScanTask>:
}

//void KeyScanTask(void)
void KeyScanTask(KEY* Key)
{
 8001334:	b510      	push	{r4, lr}
    uint8_t code;

    switch( Key->ScanState )
 8001336:	7bc3      	ldrb	r3, [r0, #15]
{
 8001338:	4604      	mov	r4, r0
    switch( Key->ScanState )
 800133a:	3b01      	subs	r3, #1
 800133c:	2b03      	cmp	r3, #3
 800133e:	d842      	bhi.n	80013c6 <KeyScanTask+0x92>
 8001340:	e8df f003 	tbb	[pc, r3]
 8001344:	2f1b0902 	.word	0x2f1b0902
    {
        case KEY_STATE_UP:
            if( KeyIsKeyDown() )
 8001348:	f7ff ff84 	bl	8001254 <KeyIsKeyDown>
 800134c:	2800      	cmp	r0, #0
 800134e:	d03a      	beq.n	80013c6 <KeyScanTask+0x92>
            {
                Key->ScanState = KEY_STATE_DEBOUNCE;
 8001350:	2302      	movs	r3, #2
                //KeyBufIn(1);    // 1: stored key code
                code = KeyDecode();
                KeyBufIn(Key,code);

                Key->RptStartDlyCtr = KEY_RPT_START_DLY;
                Key->ScanState = KEY_STATE_RPT_START_DLY;
 8001352:	73e3      	strb	r3, [r4, #15]
 8001354:	bd10      	pop	{r4, pc}
            if( KeyIsKeyDown() )
 8001356:	f7ff ff7d 	bl	8001254 <KeyIsKeyDown>
 800135a:	b148      	cbz	r0, 8001370 <KeyScanTask+0x3c>
                code = KeyDecode();
 800135c:	f7ff ffa4 	bl	80012a8 <KeyDecode>
                KeyBufIn(Key,code);
 8001360:	4601      	mov	r1, r0
 8001362:	4620      	mov	r0, r4
 8001364:	f7ff ff3e 	bl	80011e4 <KeyBufIn>
                Key->RptStartDlyCtr = KEY_RPT_START_DLY;
 8001368:	230a      	movs	r3, #10
 800136a:	7363      	strb	r3, [r4, #13]
                Key->ScanState = KEY_STATE_RPT_START_DLY;
 800136c:	2303      	movs	r3, #3
 800136e:	e7f0      	b.n	8001352 <KeyScanTask+0x1e>
            }
            else
            {
                KeySelRow(KEY_ALL_ROWS);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff ff77 	bl	8001264 <KeySelRow>
                Key->ScanState = KEY_STATE_UP;
 8001376:	2301      	movs	r3, #1
 8001378:	e7eb      	b.n	8001352 <KeyScanTask+0x1e>
            }
            break;

        case KEY_STATE_RPT_START_DLY:
            if( KeyIsKeyDown() )
 800137a:	f7ff ff6b 	bl	8001254 <KeyIsKeyDown>
 800137e:	2800      	cmp	r0, #0
 8001380:	d0e6      	beq.n	8001350 <KeyScanTask+0x1c>
            {
                if( Key->RptStartDlyCtr > 0)
 8001382:	7b63      	ldrb	r3, [r4, #13]
 8001384:	b1fb      	cbz	r3, 80013c6 <KeyScanTask+0x92>
                {
                    Key->RptStartDlyCtr--;
 8001386:	3b01      	subs	r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	7363      	strb	r3, [r4, #13]
                    if( Key->RptStartDlyCtr == 0)
 800138c:	b9db      	cbnz	r3, 80013c6 <KeyScanTask+0x92>
                    {
                        //KeyBufIn(1);
                        code = KeyDecode();
 800138e:	f7ff ff8b 	bl	80012a8 <KeyDecode>
                        KeyBufIn(Key, code);
 8001392:	4601      	mov	r1, r0
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff ff25 	bl	80011e4 <KeyBufIn>

                        Key->RptDlyCtr = KEY_RPT_DLY;
 800139a:	2302      	movs	r3, #2
 800139c:	73a3      	strb	r3, [r4, #14]
                        Key->ScanState = KEY_STATE_RPT_DLY;
 800139e:	2304      	movs	r3, #4
 80013a0:	e7d7      	b.n	8001352 <KeyScanTask+0x1e>
            }
            break;

        case KEY_STATE_RPT_DLY:
            //if( HAL_GPIO_ReadPin(KEY_PORT, KEY_PORT_PIN) == GPIO_PIN_RESET )
            if( KeyIsKeyDown() )
 80013a2:	f7ff ff57 	bl	8001254 <KeyIsKeyDown>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d0d2      	beq.n	8001350 <KeyScanTask+0x1c>
            {
                if( Key->RptDlyCtr > 0)
 80013aa:	7ba3      	ldrb	r3, [r4, #14]
 80013ac:	b15b      	cbz	r3, 80013c6 <KeyScanTask+0x92>
                {
                    Key->RptDlyCtr--;
 80013ae:	3b01      	subs	r3, #1
 80013b0:	73a3      	strb	r3, [r4, #14]
                    if( Key->RptStartDlyCtr == 0)
 80013b2:	7b63      	ldrb	r3, [r4, #13]
 80013b4:	b93b      	cbnz	r3, 80013c6 <KeyScanTask+0x92>
                    {
                        //KeyBufIn(1);
                        code = KeyDecode();
 80013b6:	f7ff ff77 	bl	80012a8 <KeyDecode>
                        KeyBufIn(Key, code);
 80013ba:	4601      	mov	r1, r0
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff ff11 	bl	80011e4 <KeyBufIn>

                        Key->RptDlyCtr = KEY_RPT_DLY;
 80013c2:	2302      	movs	r3, #2
 80013c4:	73a3      	strb	r3, [r4, #14]
 80013c6:	bd10      	pop	{r4, pc}

080013c8 <LCD_DispDataWr>:

}

//static void LCD_DispDataWr(uint8_t data)
static void LCD_DispDataWr(void* pdata)
{
 80013c8:	b510      	push	{r4, lr}

    uint8_t data;

    data = *(uint8_t *)pdata;
 80013ca:	7804      	ldrb	r4, [r0, #0]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	4825      	ldr	r0, [pc, #148]	; (8001468 <LCD_DispDataWr+0xa0>)
 80013d4:	f7ff f862 	bl	800049c <HAL_GPIO_WritePin>

    if( data & 0x80)    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80013d8:	0623      	lsls	r3, r4, #24
 80013da:	bf4c      	ite	mi
 80013dc:	2201      	movmi	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80013de:	2200      	movpl	r2, #0
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	4821      	ldr	r0, [pc, #132]	; (8001468 <LCD_DispDataWr+0xa0>)
 80013e4:	f7ff f85a 	bl	800049c <HAL_GPIO_WritePin>

    if( data & 0x40)    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80013e8:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 80013ec:	bf18      	it	ne
 80013ee:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80013f0:	2140      	movs	r1, #64	; 0x40
 80013f2:	481d      	ldr	r0, [pc, #116]	; (8001468 <LCD_DispDataWr+0xa0>)
 80013f4:	f7ff f852 	bl	800049c <HAL_GPIO_WritePin>

    if( data & 0x20)    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80013f8:	f014 0220 	ands.w	r2, r4, #32
 80013fc:	bf18      	it	ne
 80013fe:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001400:	2120      	movs	r1, #32
 8001402:	4819      	ldr	r0, [pc, #100]	; (8001468 <LCD_DispDataWr+0xa0>)
 8001404:	f7ff f84a 	bl	800049c <HAL_GPIO_WritePin>

    if( data & 0x10)    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001408:	f014 0210 	ands.w	r2, r4, #16
 800140c:	bf18      	it	ne
 800140e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001410:	2110      	movs	r1, #16
 8001412:	4815      	ldr	r0, [pc, #84]	; (8001468 <LCD_DispDataWr+0xa0>)
 8001414:	f7ff f842 	bl	800049c <HAL_GPIO_WritePin>

    if( data & 0x08)    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001418:	f014 0208 	ands.w	r2, r4, #8
 800141c:	bf18      	it	ne
 800141e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001420:	2108      	movs	r1, #8
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <LCD_DispDataWr+0xa0>)
 8001424:	f7ff f83a 	bl	800049c <HAL_GPIO_WritePin>

    if( data & 0x04)    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001428:	f014 0204 	ands.w	r2, r4, #4
 800142c:	bf18      	it	ne
 800142e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001430:	2104      	movs	r1, #4
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <LCD_DispDataWr+0xa0>)
 8001434:	f7ff f832 	bl	800049c <HAL_GPIO_WritePin>

    if( data & 0x02)    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001438:	f014 0202 	ands.w	r2, r4, #2
 800143c:	bf18      	it	ne
 800143e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001440:	2102      	movs	r1, #2
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <LCD_DispDataWr+0xa0>)
 8001444:	f7ff f82a 	bl	800049c <HAL_GPIO_WritePin>

    if( data & 0x01)    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001448:	f014 0201 	ands.w	r2, r4, #1
 800144c:	bf18      	it	ne
 800144e:	2201      	movne	r2, #1
    else                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001450:	2101      	movs	r1, #1
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <LCD_DispDataWr+0xa0>)
 8001454:	f7ff f822 	bl	800049c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

}
 8001458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001462:	4801      	ldr	r0, [pc, #4]	; (8001468 <LCD_DispDataWr+0xa0>)
 8001464:	f7ff b81a 	b.w	800049c <HAL_GPIO_WritePin>
 8001468:	40011000 	.word	0x40011000

0800146c <LCD_DispInit>:
            break;
    }
}

void LCD_DispInit(void)
{
 800146c:	b537      	push	{r0, r1, r2, r4, r5, lr}

    LCD_DispSel(DISP_SEL_CMD_REG);
    HAL_Delay(50);

    //LCD_DispDataWr(DISP_CMD_FNCT);
    data = DISP_CMD_FNCT;
 800146e:	253b      	movs	r5, #59	; 0x3b
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001476:	4822      	ldr	r0, [pc, #136]	; (8001500 <LCD_DispInit+0x94>)
 8001478:	f7ff f810 	bl	800049c <HAL_GPIO_WritePin>
    data = DISP_CMD_FNCT;
 800147c:	ac02      	add	r4, sp, #8
    HAL_Delay(50);
 800147e:	2032      	movs	r0, #50	; 0x32
 8001480:	f7fe feac 	bl	80001dc <HAL_Delay>
    data = DISP_CMD_FNCT;
 8001484:	f804 5d01 	strb.w	r5, [r4, #-1]!
    LCD_DispDataWr(&data);
 8001488:	4620      	mov	r0, r4
 800148a:	f7ff ff9d 	bl	80013c8 <LCD_DispDataWr>
    HAL_Delay(2);
 800148e:	2002      	movs	r0, #2
 8001490:	f7fe fea4 	bl	80001dc <HAL_Delay>

    //LCD_DispDataWr(DISP_CMD_FNCT);
    data = DISP_CMD_FNCT;
    LCD_DispDataWr(&data);
 8001494:	4620      	mov	r0, r4
    data = DISP_CMD_FNCT;
 8001496:	f88d 5007 	strb.w	r5, [sp, #7]
    LCD_DispDataWr(&data);
 800149a:	f7ff ff95 	bl	80013c8 <LCD_DispDataWr>
    HAL_Delay(2);
 800149e:	2002      	movs	r0, #2
 80014a0:	f7fe fe9c 	bl	80001dc <HAL_Delay>

    //LCD_DispDataWr(DISP_CMD_FNCT);
    data = DISP_CMD_FNCT;
    LCD_DispDataWr(&data);
 80014a4:	4620      	mov	r0, r4
    data = DISP_CMD_FNCT;
 80014a6:	f88d 5007 	strb.w	r5, [sp, #7]
    LCD_DispDataWr(&data);
 80014aa:	f7ff ff8d 	bl	80013c8 <LCD_DispDataWr>
    HAL_Delay(2);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f7fe fe94 	bl	80001dc <HAL_Delay>

    //LCD_DispDataWr(DISP_CMD_FNCT);
    data = DISP_CMD_FNCT;
    LCD_DispDataWr(&data);
 80014b4:	4620      	mov	r0, r4
    data = DISP_CMD_FNCT;
 80014b6:	f88d 5007 	strb.w	r5, [sp, #7]
    LCD_DispDataWr(&data);
 80014ba:	f7ff ff85 	bl	80013c8 <LCD_DispDataWr>
    HAL_Delay(2);
 80014be:	2002      	movs	r0, #2
 80014c0:	f7fe fe8c 	bl	80001dc <HAL_Delay>

    //LCD_DispDataWr(DISP_CMD_ON_OFF);
    data = DISP_CMD_ON_OFF;
 80014c4:	230c      	movs	r3, #12
    LCD_DispDataWr(&data);
 80014c6:	4620      	mov	r0, r4
    data = DISP_CMD_ON_OFF;
 80014c8:	f88d 3007 	strb.w	r3, [sp, #7]
    LCD_DispDataWr(&data);
 80014cc:	f7ff ff7c 	bl	80013c8 <LCD_DispDataWr>
    HAL_Delay(2);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7fe fe83 	bl	80001dc <HAL_Delay>

    //LCD_DispDataWr(DISP_CMD_MODE);
    data = DISP_CMD_MODE;
 80014d6:	2306      	movs	r3, #6
    LCD_DispDataWr(&data);
 80014d8:	4620      	mov	r0, r4
    data = DISP_CMD_MODE;
 80014da:	f88d 3007 	strb.w	r3, [sp, #7]
    LCD_DispDataWr(&data);
 80014de:	f7ff ff73 	bl	80013c8 <LCD_DispDataWr>
    HAL_Delay(2);
 80014e2:	2002      	movs	r0, #2
 80014e4:	f7fe fe7a 	bl	80001dc <HAL_Delay>

    //LCD_DispDataWr(DISP_CMD_CLS);
    data = DISP_CMD_CLS;
 80014e8:	2301      	movs	r3, #1
    LCD_DispDataWr(&data);
 80014ea:	4620      	mov	r0, r4
    data = DISP_CMD_CLS;
 80014ec:	f88d 3007 	strb.w	r3, [sp, #7]
    LCD_DispDataWr(&data);
 80014f0:	f7ff ff6a 	bl	80013c8 <LCD_DispDataWr>
    HAL_Delay(2);
 80014f4:	2002      	movs	r0, #2
 80014f6:	f7fe fe71 	bl	80001dc <HAL_Delay>

}
 80014fa:	b003      	add	sp, #12
 80014fc:	bd30      	pop	{r4, r5, pc}
 80014fe:	bf00      	nop
 8001500:	40011000 	.word	0x40011000

08001504 <LCD_DispString>:
/* Using Timer */
void LCD_DispString(uint8_t row, uint8_t col, char* s)
{

    uint8_t i;
    if( row < DISP_MAX_ROWS && col < DISP_MAX_COLS )
 8001504:	2801      	cmp	r0, #1
{
 8001506:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800150a:	4605      	mov	r5, r0
 800150c:	460c      	mov	r4, r1
 800150e:	4616      	mov	r6, r2
    if( row < DISP_MAX_ROWS && col < DISP_MAX_COLS )
 8001510:	d839      	bhi.n	8001586 <LCD_DispString+0x82>
 8001512:	290f      	cmp	r1, #15
 8001514:	d837      	bhi.n	8001586 <LCD_DispString+0x82>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f88d 1007 	strb.w	r1, [sp, #7]
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <LCD_DispString+0x88>)
 800151e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001522:	f7fe ffbb 	bl	800049c <HAL_GPIO_WritePin>
 8001526:	a802      	add	r0, sp, #8
 8001528:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    switch( row )
 800152c:	2d01      	cmp	r5, #1
            col += 0x80;
 800152e:	bf14      	ite	ne
 8001530:	3b80      	subne	r3, #128	; 0x80
            col += 0xC0;
 8001532:	3b40      	subeq	r3, #64	; 0x40
 8001534:	f88d 3007 	strb.w	r3, [sp, #7]
            LCD_DispDataWr(&col);
 8001538:	f7ff ff46 	bl	80013c8 <LCD_DispDataWr>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <LCD_DispString+0x88>)
 8001544:	f7fe ffaa 	bl	800049c <HAL_GPIO_WritePin>
 8001548:	0065      	lsls	r5, r4, #1
        i = col;
        while( i < DISP_MAX_COLS && *s )    // *s is not null
        {
            //LCD_DispDataWr(*s++);
            //HAL_Delay(2);    ////////// Next using timer ///////////
            TmrSetT(TmrTbl, i, 2+2*i);
 800154a:	4f11      	ldr	r7, [pc, #68]	; (8001590 <LCD_DispString+0x8c>)
            TmrCfgFnct(TmrTbl, i, LCD_DispDataWr, s++);
 800154c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001594 <LCD_DispString+0x90>
 8001550:	3502      	adds	r5, #2
 8001552:	46b0      	mov	r8, r6
        while( i < DISP_MAX_COLS && *s )    // *s is not null
 8001554:	f898 3000 	ldrb.w	r3, [r8]
 8001558:	3601      	adds	r6, #1
 800155a:	b1a3      	cbz	r3, 8001586 <LCD_DispString+0x82>
            TmrSetT(TmrTbl, i, 2+2*i);
 800155c:	462a      	mov	r2, r5
 800155e:	4621      	mov	r1, r4
 8001560:	4638      	mov	r0, r7
 8001562:	f000 faba 	bl	8001ada <TmrSetT>
            TmrCfgFnct(TmrTbl, i, LCD_DispDataWr, s++);
 8001566:	4621      	mov	r1, r4
 8001568:	4643      	mov	r3, r8
 800156a:	464a      	mov	r2, r9
 800156c:	4638      	mov	r0, r7
 800156e:	f000 fabb 	bl	8001ae8 <TmrCfgFnct>
            TmrStart(TmrTbl, i);
 8001572:	4621      	mov	r1, r4
            i++;
 8001574:	3401      	adds	r4, #1
            TmrStart(TmrTbl, i);
 8001576:	4638      	mov	r0, r7
            i++;
 8001578:	b2e4      	uxtb	r4, r4
            TmrStart(TmrTbl, i);
 800157a:	f000 fabc 	bl	8001af6 <TmrStart>
 800157e:	3502      	adds	r5, #2
        while( i < DISP_MAX_COLS && *s )    // *s is not null
 8001580:	2c10      	cmp	r4, #16
 8001582:	b2ad      	uxth	r5, r5
 8001584:	d1e5      	bne.n	8001552 <LCD_DispString+0x4e>
        }
    }

}
 8001586:	b003      	add	sp, #12
 8001588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800158c:	40011000 	.word	0x40011000
 8001590:	2000012c 	.word	0x2000012c
 8001594:	080013c9 	.word	0x080013c9

08001598 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    Tick1m++;

    if( (Tick1m % 100) == 0)
 8001598:	2164      	movs	r1, #100	; 0x64
{
 800159a:	b508      	push	{r3, lr}
    Tick1m++;
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	3201      	adds	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
    if( (Tick1m % 100) == 0)
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	fbb0 f2f1 	udiv	r2, r0, r1
 80015aa:	fb01 0212 	mls	r2, r1, r2, r0
 80015ae:	b912      	cbnz	r2, 80015b6 <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
        //KeyScanTask();
        KeyScanFlag = SET;
 80015b0:	2101      	movs	r1, #1
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80015b4:	6011      	str	r1, [r2, #0]
    }

    if(  (Tick1m % 5) == 0 )
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2305      	movs	r3, #5
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d102      	bne.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x34>
    {
        //DispMuxHandler();
        //DispScanFlag = SET;
        DispMuxHandler(&Disp);
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015c8:	f7ff fd90 	bl	80010ec <DispMuxHandler>
    }

    TmrTask(TmrTbl);
}
 80015cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TmrTask(TmrTbl);
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015d2:	f000 ba96 	b.w	8001b02 <TmrTask>
 80015d6:	bf00      	nop
 80015d8:	200000a0 	.word	0x200000a0
 80015dc:	2000008c 	.word	0x2000008c
 80015e0:	200000a4 	.word	0x200000a4
 80015e4:	2000012c 	.word	0x2000012c

080015e8 <_write>:

int _write(int file, char *ptr, int len)
{
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 0xFFFFFFFF);
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	b292      	uxth	r2, r2
 80015f2:	4802      	ldr	r0, [pc, #8]	; (80015fc <_write+0x14>)
 80015f4:	f7ff fcca 	bl	8000f8c <HAL_UART_Transmit>

    return len;
}
 80015f8:	4620      	mov	r0, r4
 80015fa:	bd10      	pop	{r4, pc}
 80015fc:	200000ac 	.word	0x200000ac

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b500      	push	{lr}
 8001602:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001604:	2228      	movs	r2, #40	; 0x28
 8001606:	2100      	movs	r1, #0
 8001608:	a806      	add	r0, sp, #24
 800160a:	f000 fae7 	bl	8001bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160e:	2214      	movs	r2, #20
 8001610:	2100      	movs	r1, #0
 8001612:	a801      	add	r0, sp, #4
 8001614:	f000 fae2 	bl	8001bdc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001622:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f7fe ff43 	bl	80004b0 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800162a:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800162e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001630:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001632:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001636:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001638:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163a:	f7ff f901 	bl	8000840 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800163e:	b011      	add	sp, #68	; 0x44
 8001640:	f85d fb04 	ldr.w	pc, [sp], #4

08001644 <main>:
  char dispString[4] = "    ";
 8001644:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 8001648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800164c:	b08c      	sub	sp, #48	; 0x30
  char dispString[4] = "    ";
 800164e:	9301      	str	r3, [sp, #4]
  HAL_Init();
 8001650:	f7fe fda0 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001654:	f7ff ffd4 	bl	8001600 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	2210      	movs	r2, #16
 800165a:	2100      	movs	r1, #0
 800165c:	a808      	add	r0, sp, #32
 800165e:	f000 fabd 	bl	8001bdc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <main+0x270>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_F_Pin|KEY_ROW1_Pin|KEY_ROW2_Pin|CLCD_D0_Pin 
 8001664:	f64e 71ff 	movw	r1, #61439	; 0xefff
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001668:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, FND_F_Pin|KEY_ROW1_Pin|KEY_ROW2_Pin|CLCD_D0_Pin 
 800166a:	4893      	ldr	r0, [pc, #588]	; (80018b8 <main+0x274>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166c:	f042 0210 	orr.w	r2, r2, #16
 8001670:	619a      	str	r2, [r3, #24]
 8001672:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = FND_F_Pin|KEY_ROW1_Pin|KEY_ROW2_Pin|CLCD_D0_Pin 
                          |CLCD_D1_Pin|CLCD_D2_Pin|CLCD_D3_Pin|CLCD_D4_Pin 
                          |CLCD_D5_Pin|CLCD_D6_Pin|CLCD_D7_Pin|CLCD_EN_Pin 
                          |CLCD_RW_Pin|CLCD_RS_Pin|FND_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	f002 0210 	and.w	r2, r2, #16
 800167a:	9202      	str	r2, [sp, #8]
 800167c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	f042 0204 	orr.w	r2, r2, #4
 8001686:	619a      	str	r2, [r3, #24]
 8001688:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	f002 0204 	and.w	r2, r2, #4
 8001690:	9203      	str	r2, [sp, #12]
 8001692:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001694:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8001696:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	f042 0220 	orr.w	r2, r2, #32
 800169e:	619a      	str	r2, [r3, #24]
 80016a0:	699a      	ldr	r2, [r3, #24]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a2:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a4:	f002 0220 	and.w	r2, r2, #32
 80016a8:	9204      	str	r2, [sp, #16]
 80016aa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	f042 0208 	orr.w	r2, r2, #8
 80016b2:	619a      	str	r2, [r3, #24]
 80016b4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, FND_F_Pin|KEY_ROW1_Pin|KEY_ROW2_Pin|CLCD_D0_Pin 
 80016b6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	9305      	str	r3, [sp, #20]
 80016be:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, FND_F_Pin|KEY_ROW1_Pin|KEY_ROW2_Pin|CLCD_D0_Pin 
 80016c0:	f7fe feec 	bl	800049c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FND_A_Pin|FND_B_Pin|FND_C_Pin|FND_D_Pin 
 80016c4:	2200      	movs	r2, #0
 80016c6:	f641 11cf 	movw	r1, #6607	; 0x19cf
 80016ca:	487c      	ldr	r0, [pc, #496]	; (80018bc <main+0x278>)
 80016cc:	f7fe fee6 	bl	800049c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, FND_E_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80016d6:	487a      	ldr	r0, [pc, #488]	; (80018c0 <main+0x27c>)
 80016d8:	f7fe fee0 	bl	800049c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FND_F_Pin|KEY_ROW1_Pin|KEY_ROW2_Pin|CLCD_D0_Pin 
 80016dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e0:	a908      	add	r1, sp, #32
 80016e2:	4875      	ldr	r0, [pc, #468]	; (80018b8 <main+0x274>)
  GPIO_InitStruct.Pin = FND_F_Pin|KEY_ROW1_Pin|KEY_ROW2_Pin|CLCD_D0_Pin 
 80016e4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f7fe fdf0 	bl	80002d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FND_A_Pin|FND_B_Pin|FND_C_Pin|FND_D_Pin 
 80016f0:	f641 13cf 	movw	r3, #6607	; 0x19cf
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	a908      	add	r1, sp, #32
 80016f6:	4871      	ldr	r0, [pc, #452]	; (80018bc <main+0x278>)
  GPIO_InitStruct.Pin = FND_A_Pin|FND_B_Pin|FND_C_Pin|FND_D_Pin 
 80016f8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f7fe fde6 	bl	80002d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_COL1_Pin|KEY_COL2_Pin;
 8001704:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	a908      	add	r1, sp, #32
 8001708:	486c      	ldr	r0, [pc, #432]	; (80018bc <main+0x278>)
  GPIO_InitStruct.Pin = KEY_COL1_Pin|KEY_COL2_Pin;
 800170a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f7fe fdde 	bl	80002d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8001714:	a908      	add	r1, sp, #32
 8001716:	4868      	ldr	r0, [pc, #416]	; (80018b8 <main+0x274>)
  GPIO_InitStruct.Pin = KEY1_Pin;
 8001718:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8001720:	f7fe fdd6 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8001724:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8001726:	a908      	add	r1, sp, #32
 8001728:	4866      	ldr	r0, [pc, #408]	; (80018c4 <main+0x280>)
  GPIO_InitStruct.Pin = KEY2_Pin;
 800172a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8001730:	f7fe fdce 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_E_Pin LED1_Pin LED2_Pin LED3_Pin 
                           LED4_Pin */
  GPIO_InitStruct.Pin = FND_E_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 8001734:	f44f 7378 	mov.w	r3, #992	; 0x3e0
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	a908      	add	r1, sp, #32
 800173a:	4861      	ldr	r0, [pc, #388]	; (80018c0 <main+0x27c>)
  GPIO_InitStruct.Pin = FND_E_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 800173c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f7fe fdc4 	bl	80002d0 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001748:	4621      	mov	r1, r4
 800174a:	2210      	movs	r2, #16
 800174c:	a808      	add	r0, sp, #32
 800174e:	f000 fa45 	bl	8001bdc <memset>
  htim1.Init.Prescaler = 8-1;
 8001752:	2307      	movs	r3, #7
  htim1.Instance = TIM1;
 8001754:	4d5c      	ldr	r5, [pc, #368]	; (80018c8 <main+0x284>)
  htim1.Init.Prescaler = 8-1;
 8001756:	4a5d      	ldr	r2, [pc, #372]	; (80018cc <main+0x288>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001758:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 8-1;
 800175a:	e885 000c 	stmia.w	r5, {r2, r3}
  htim1.Init.Period = 1000-1;
 800175e:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001762:	61af      	str	r7, [r5, #24]
  htim1.Init.Period = 1000-1;
 8001764:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	9406      	str	r4, [sp, #24]
 8001768:	9407      	str	r4, [sp, #28]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800176e:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001770:	f7ff fada 	bl	8000d28 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001774:	a908      	add	r1, sp, #32
 8001776:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001778:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800177c:	f7ff f93d 	bl	80009fa <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001780:	a906      	add	r1, sp, #24
 8001782:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001788:	f7ff fae8 	bl	8000d5c <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 800178c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001790:	484f      	ldr	r0, [pc, #316]	; (80018d0 <main+0x28c>)
  huart1.Init.BaudRate = 115200;
 8001792:	4950      	ldr	r1, [pc, #320]	; (80018d4 <main+0x290>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001794:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001796:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800179c:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179e:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a0:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a6:	f7ff fbc3 	bl	8000f30 <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80017aa:	4628      	mov	r0, r5
 80017ac:	f7ff f91a 	bl	80009e4 <HAL_TIM_Base_Start_IT>
  KeyInit(Key);
 80017b0:	a808      	add	r0, sp, #32
 80017b2:	f7ff fdb3 	bl	800131c <KeyInit>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);    // LED1 OFF
 80017b6:	4632      	mov	r2, r6
 80017b8:	2140      	movs	r1, #64	; 0x40
 80017ba:	4841      	ldr	r0, [pc, #260]	; (80018c0 <main+0x27c>)
 80017bc:	f7fe fe6e 	bl	800049c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);    // LED2 OFF
 80017c0:	4639      	mov	r1, r7
 80017c2:	4632      	mov	r2, r6
 80017c4:	483e      	ldr	r0, [pc, #248]	; (80018c0 <main+0x27c>)
 80017c6:	f7fe fe69 	bl	800049c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);    // LED3 OFF
 80017ca:	4632      	mov	r2, r6
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	483b      	ldr	r0, [pc, #236]	; (80018c0 <main+0x27c>)
 80017d2:	f7fe fe63 	bl	800049c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);    // LED4 OFF
 80017d6:	4632      	mov	r2, r6
 80017d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017dc:	4838      	ldr	r0, [pc, #224]	; (80018c0 <main+0x27c>)
 80017de:	f7fe fe5d 	bl	800049c <HAL_GPIO_WritePin>
  DispInit(&Disp);
 80017e2:	483d      	ldr	r0, [pc, #244]	; (80018d8 <main+0x294>)
 80017e4:	f7ff fc7c 	bl	80010e0 <DispInit>
  TmrInit(TmrTbl);
 80017e8:	483c      	ldr	r0, [pc, #240]	; (80018dc <main+0x298>)
 80017ea:	f000 f965 	bl	8001ab8 <TmrInit>
  LCD_DispInit();
 80017ee:	f7ff fe3d 	bl	800146c <LCD_DispInit>
  LCD_DispString(0, 0, "STM32F103");
 80017f2:	4a3b      	ldr	r2, [pc, #236]	; (80018e0 <main+0x29c>)
 80017f4:	4621      	mov	r1, r4
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff fe84 	bl	8001504 <LCD_DispString>
      if ( KeyScanFlag == SET)
 80017fc:	4f39      	ldr	r7, [pc, #228]	; (80018e4 <main+0x2a0>)
      __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);        /*** start critical section ***/
 80017fe:	682b      	ldr	r3, [r5, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	60da      	str	r2, [r3, #12]
      if ( KeyScanFlag == SET)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	2a01      	cmp	r2, #1
 800180c:	d107      	bne.n	800181e <main+0x1da>
          __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);     /*** end critical section ***/
 800180e:	68da      	ldr	r2, [r3, #12]
          KeyScanTask(Key);
 8001810:	a808      	add	r0, sp, #32
          __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);     /*** end critical section ***/
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	60da      	str	r2, [r3, #12]
          KeyScanFlag = RESET;
 8001818:	603c      	str	r4, [r7, #0]
          KeyScanTask(Key);
 800181a:	f7ff fd8b 	bl	8001334 <KeyScanTask>
      __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);         /*** end critical section ***/
 800181e:	682a      	ldr	r2, [r5, #0]
      if( KeyHit(Key) )
 8001820:	a808      	add	r0, sp, #32
      __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);         /*** end critical section ***/
 8001822:	68d3      	ldr	r3, [r2, #12]
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	60d3      	str	r3, [r2, #12]
      if( KeyHit(Key) )
 800182a:	f7ff fd62 	bl	80012f2 <KeyHit>
 800182e:	2800      	cmp	r0, #0
 8001830:	d0e5      	beq.n	80017fe <main+0x1ba>
          key = KeyGetKey(Key);
 8001832:	a808      	add	r0, sp, #32
 8001834:	f7ff fd62 	bl	80012fc <KeyGetKey>
 8001838:	4606      	mov	r6, r0
 800183a:	fa4f f880 	sxtb.w	r8, r0
          switch(key)
 800183e:	280b      	cmp	r0, #11
 8001840:	d80b      	bhi.n	800185a <main+0x216>
 8001842:	e8df f000 	tbb	[pc, r0]
 8001846:	2806      	.short	0x2806
 8001848:	28062d2a 	.word	0x28062d2a
 800184c:	28062d2a 	.word	0x28062d2a
 8001850:	2d2a      	.short	0x2d2a
                  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001852:	2140      	movs	r1, #64	; 0x40
                  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001854:	481a      	ldr	r0, [pc, #104]	; (80018c0 <main+0x27c>)
 8001856:	f7fe fe26 	bl	80004a6 <HAL_GPIO_TogglePin>
          printf("KEY : %d \r\n", key);
 800185a:	4641      	mov	r1, r8
 800185c:	4822      	ldr	r0, [pc, #136]	; (80018e8 <main+0x2a4>)
 800185e:	f000 f9c5 	bl	8001bec <iprintf>
          if(key >= 10){
 8001862:	f1b8 0f09 	cmp.w	r8, #9
 8001866:	dd1e      	ble.n	80018a6 <main+0x262>
              dispString[2] = key / 10 + 0x30;
 8001868:	220a      	movs	r2, #10
 800186a:	fb98 f3f2 	sdiv	r3, r8, r2
 800186e:	f103 0130 	add.w	r1, r3, #48	; 0x30
              dispString[3] = key % 10 + 0x30;
 8001872:	fb02 8313 	mls	r3, r2, r3, r8
 8001876:	3330      	adds	r3, #48	; 0x30
              dispString[2] = key / 10 + 0x30;
 8001878:	f88d 1006 	strb.w	r1, [sp, #6]
              dispString[3] = key % 10 + 0x30;
 800187c:	f88d 3007 	strb.w	r3, [sp, #7]
          DispStr(&Disp, 0, dispString);
 8001880:	aa01      	add	r2, sp, #4
 8001882:	2100      	movs	r1, #0
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <main+0x294>)
 8001886:	f7ff fc95 	bl	80011b4 <DispStr>
          LCD_DispString(1, 0, dispString);
 800188a:	aa01      	add	r2, sp, #4
 800188c:	2100      	movs	r1, #0
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff fe38 	bl	8001504 <LCD_DispString>
 8001894:	e7b3      	b.n	80017fe <main+0x1ba>
                  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	e7dc      	b.n	8001854 <main+0x210>
                  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	e7d9      	b.n	8001854 <main+0x210>
                  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80018a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a4:	e7d6      	b.n	8001854 <main+0x210>
              dispString[2] = 0x20;          // 0x20: Space
 80018a6:	2320      	movs	r3, #32
              dispString[3] = key + 0x30;    // ASCII Code of '0' : 0x30
 80018a8:	3630      	adds	r6, #48	; 0x30
              dispString[2] = 0x20;          // 0x20: Space
 80018aa:	f88d 3006 	strb.w	r3, [sp, #6]
              dispString[3] = key + 0x30;    // ASCII Code of '0' : 0x30
 80018ae:	f88d 6007 	strb.w	r6, [sp, #7]
 80018b2:	e7e5      	b.n	8001880 <main+0x23c>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40011000 	.word	0x40011000
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	40011400 	.word	0x40011400
 80018c8:	200000ec 	.word	0x200000ec
 80018cc:	40012c00 	.word	0x40012c00
 80018d0:	200000ac 	.word	0x200000ac
 80018d4:	40013800 	.word	0x40013800
 80018d8:	200000a4 	.word	0x200000a4
 80018dc:	2000012c 	.word	0x2000012c
 80018e0:	08002a77 	.word	0x08002a77
 80018e4:	2000008c 	.word	0x2000008c
 80018e8:	08002a81 	.word	0x08002a81

080018ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_MspInit+0x3c>)
{
 80018ee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	619a      	str	r2, [r3, #24]
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	f002 0201 	and.w	r2, r2, #1
 80018fe:	9200      	str	r2, [sp, #0]
 8001900:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	69da      	ldr	r2, [r3, #28]
 8001904:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001908:	61da      	str	r2, [r3, #28]
 800190a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001916:	6853      	ldr	r3, [r2, #4]
 8001918:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800191c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001920:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	b002      	add	sp, #8
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000

08001930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001930:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_TIM_Base_MspInit+0x38>)
 8001934:	6802      	ldr	r2, [r0, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d112      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800193a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800193e:	699a      	ldr	r2, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001940:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001946:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194a:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800194c:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001956:	f7fe fc65 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800195a:	2019      	movs	r0, #25
 800195c:	f7fe fc96 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001960:	b003      	add	sp, #12
 8001962:	f85d fb04 	ldr.w	pc, [sp], #4
 8001966:	bf00      	nop
 8001968:	40012c00 	.word	0x40012c00

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b510      	push	{r4, lr}
 800196e:	4604      	mov	r4, r0
 8001970:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	2210      	movs	r2, #16
 8001974:	2100      	movs	r1, #0
 8001976:	a802      	add	r0, sp, #8
 8001978:	f000 f930 	bl	8001bdc <memset>
  if(huart->Instance==USART1)
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x70>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d128      	bne.n	80019d6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001984:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001988:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800198c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001990:	619a      	str	r2, [r3, #24]
 8001992:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	4812      	ldr	r0, [pc, #72]	; (80019e0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001996:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	f042 0204 	orr.w	r2, r2, #4
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f7fe fc87 	bl	80002d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	a902      	add	r1, sp, #8
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f7fe fc7d 	bl	80002d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019d6:	b006      	add	sp, #24
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	bf00      	nop
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40010800 	.word	0x40010800

080019e4 <NMI_Handler>:
 80019e4:	4770      	bx	lr

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler>

080019ee <SVC_Handler>:
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f7fe bbe0 	b.w	80001b8 <HAL_IncTick>

080019f8 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f8:	4801      	ldr	r0, [pc, #4]	; (8001a00 <TIM1_UP_IRQHandler+0x8>)
 80019fa:	f7ff b8bb 	b.w	8000b74 <HAL_TIM_IRQHandler>
 80019fe:	bf00      	nop
 8001a00:	200000ec 	.word	0x200000ec

08001a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	460e      	mov	r6, r1
 8001a08:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	1ba3      	subs	r3, r4, r6
 8001a0e:	429d      	cmp	r5, r3
 8001a10:	dc01      	bgt.n	8001a16 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001a12:	4628      	mov	r0, r5
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001a16:	f3af 8000 	nop.w
 8001a1a:	f804 0b01 	strb.w	r0, [r4], #1
 8001a1e:	e7f5      	b.n	8001a0c <_read+0x8>

08001a20 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001a20:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <_sbrk+0x2c>)
{
 8001a24:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	b909      	cbnz	r1, 8001a2e <_sbrk+0xe>
		heap_end = &end;
 8001a2a:	4909      	ldr	r1, [pc, #36]	; (8001a50 <_sbrk+0x30>)
 8001a2c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001a2e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001a30:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001a32:	4402      	add	r2, r0
 8001a34:	428a      	cmp	r2, r1
 8001a36:	d906      	bls.n	8001a46 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001a38:	f000 f8a6 	bl	8001b88 <__errno>
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001a46:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001a48:	bd08      	pop	{r3, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000090 	.word	0x20000090
 8001a50:	20000270 	.word	0x20000270

08001a54 <_close>:

int _close(int file)
{
	return -1;
}
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	4770      	bx	lr

08001a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001a5e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001a60:	604b      	str	r3, [r1, #4]
}
 8001a62:	4770      	bx	lr

08001a64 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a64:	2001      	movs	r0, #1
 8001a66:	4770      	bx	lr

08001a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a68:	2000      	movs	r0, #0
 8001a6a:	4770      	bx	lr

08001a6c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <SystemInit+0x40>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <SystemInit+0x44>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a88:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a90:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001a98:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a9a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a9e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001aa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <SystemInit+0x48>)
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	f8ff0000 	.word	0xf8ff0000
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <TmrInit>:

    uint8_t i;

    for(i = 0; i < TMR_MAX_TMR; i++)
    {
        ptmr->TmrEn = FALSE;
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f100 0310 	add.w	r3, r0, #16
 8001abe:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001ac2:	f803 2c10 	strb.w	r2, [r3, #-16]
        ptmr->TmrCtr = 0;
 8001ac6:	f823 2c0e 	strh.w	r2, [r3, #-14]
        ptmr->TmrInit = 0;
 8001aca:	f823 2c0c 	strh.w	r2, [r3, #-12]
        ptmr->TmrFnct = NULL;
 8001ace:	f843 2c08 	str.w	r2, [r3, #-8]
 8001ad2:	3310      	adds	r3, #16
    for(i = 0; i < TMR_MAX_TMR; i++)
 8001ad4:	4283      	cmp	r3, r0
 8001ad6:	d1f4      	bne.n	8001ac2 <TmrInit+0xa>
        ptmr++;
    }
}
 8001ad8:	4770      	bx	lr

08001ada <TmrSetT>:

void TmrSetT(TMR* ptmr, uint8_t n, uint16_t tenths)
{
    if( n < TMR_MAX_TMR )
 8001ada:	2913      	cmp	r1, #19
    {
        //ptmr[n].TmrInit = tenths;
        (&ptmr[n])->TmrInit = tenths;
 8001adc:	bf9e      	ittt	ls
 8001ade:	eb00 1001 	addls.w	r0, r0, r1, lsl #4
 8001ae2:	8082      	strhls	r2, [r0, #4]
        (&ptmr[n])->TmrCtr = tenths;
 8001ae4:	8042      	strhls	r2, [r0, #2]
 8001ae6:	4770      	bx	lr

08001ae8 <TmrCfgFnct>:
    }
}

void TmrCfgFnct(TMR* ptmr, uint8_t n, void(*fnct)(void*), void* arg)
{
    if( n < TMR_MAX_TMR )
 8001ae8:	2913      	cmp	r1, #19
    {
        (&ptmr[n])->TmrFnct = fnct;
 8001aea:	bf9e      	ittt	ls
 8001aec:	eb00 1001 	addls.w	r0, r0, r1, lsl #4
 8001af0:	6082      	strls	r2, [r0, #8]
        (&ptmr[n])->TmrFnctArg = arg;
 8001af2:	60c3      	strls	r3, [r0, #12]
 8001af4:	4770      	bx	lr

08001af6 <TmrStart>:
    }
}

void TmrStart(TMR* ptmr, uint8_t n)
{
    if( n < TMR_MAX_TMR )
 8001af6:	2913      	cmp	r1, #19
    {
        (&ptmr[n])->TmrEn = TRUE;
 8001af8:	bf9e      	ittt	ls
 8001afa:	2301      	movls	r3, #1
 8001afc:	0109      	lslls	r1, r1, #4
 8001afe:	5443      	strbls	r3, [r0, r1]
 8001b00:	4770      	bx	lr

08001b02 <TmrTask>:
    }
}

void TmrTask(TMR* ptmr)
{
 8001b02:	b538      	push	{r3, r4, r5, lr}
 8001b04:	f100 0410 	add.w	r4, r0, #16
 8001b08:	f500 75a8 	add.w	r5, r0, #336	; 0x150
    pfnct = (void(*)(void*))0;
    parg = (void*)0;

    for( i = 0; i < TMR_MAX_TMR; i++)
    {
        if(ptmr->TmrEn == TRUE)
 8001b0c:	f814 3c10 	ldrb.w	r3, [r4, #-16]
 8001b10:	b17b      	cbz	r3, 8001b32 <TmrTask+0x30>
        {
            if(ptmr->TmrCtr > 0)
 8001b12:	f834 3c0e 	ldrh.w	r3, [r4, #-14]
 8001b16:	b163      	cbz	r3, 8001b32 <TmrTask+0x30>
            {
                ptmr->TmrCtr--;
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f824 3c0e 	strh.w	r3, [r4, #-14]
                if(ptmr->TmrCtr == 0)
 8001b20:	b93b      	cbnz	r3, 8001b32 <TmrTask+0x30>
                {
                    ptmr->TmrEn = FALSE;
 8001b22:	f804 3c10 	strb.w	r3, [r4, #-16]
                    pfnct = ptmr->TmrFnct;
 8001b26:	f854 3c08 	ldr.w	r3, [r4, #-8]
                    parg = ptmr->TmrFnctArg;
 8001b2a:	f854 0c04 	ldr.w	r0, [r4, #-4]
                }
            }
        }

        if( pfnct != (void(*)(void*))0 )
 8001b2e:	b103      	cbz	r3, 8001b32 <TmrTask+0x30>
        {
            (*pfnct)(parg);
 8001b30:	4798      	blx	r3
 8001b32:	3410      	adds	r4, #16
    for( i = 0; i < TMR_MAX_TMR; i++)
 8001b34:	42ac      	cmp	r4, r5
 8001b36:	d1e9      	bne.n	8001b0c <TmrTask+0xa>
            pfnct = (void(*)(void*))0;
        }
        ptmr++;
    }

}
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
	...

08001b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b3e:	e003      	b.n	8001b48 <LoopCopyDataInit>

08001b40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b46:	3104      	adds	r1, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b48:	480a      	ldr	r0, [pc, #40]	; (8001b74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b50:	d3f6      	bcc.n	8001b40 <CopyDataInit>
  ldr r2, =_sbss
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b54:	e002      	b.n	8001b5c <LoopFillZerobss>

08001b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b58:	f842 3b04 	str.w	r3, [r2], #4

08001b5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b60:	d3f9      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b62:	f7ff ff83 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f000 f815 	bl	8001b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6a:	f7ff fd6b 	bl	8001644 <main>
  bx lr
 8001b6e:	4770      	bx	lr
  ldr r3, =_sidata
 8001b70:	08002b48 	.word	0x08002b48
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b78:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001b7c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001b80:	20000270 	.word	0x20000270

08001b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC1_2_IRQHandler>
	...

08001b88 <__errno>:
 8001b88:	4b01      	ldr	r3, [pc, #4]	; (8001b90 <__errno+0x8>)
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2000000c 	.word	0x2000000c

08001b94 <__libc_init_array>:
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	2500      	movs	r5, #0
 8001b98:	4e0c      	ldr	r6, [pc, #48]	; (8001bcc <__libc_init_array+0x38>)
 8001b9a:	4c0d      	ldr	r4, [pc, #52]	; (8001bd0 <__libc_init_array+0x3c>)
 8001b9c:	1ba4      	subs	r4, r4, r6
 8001b9e:	10a4      	asrs	r4, r4, #2
 8001ba0:	42a5      	cmp	r5, r4
 8001ba2:	d109      	bne.n	8001bb8 <__libc_init_array+0x24>
 8001ba4:	f000 ff26 	bl	80029f4 <_init>
 8001ba8:	2500      	movs	r5, #0
 8001baa:	4e0a      	ldr	r6, [pc, #40]	; (8001bd4 <__libc_init_array+0x40>)
 8001bac:	4c0a      	ldr	r4, [pc, #40]	; (8001bd8 <__libc_init_array+0x44>)
 8001bae:	1ba4      	subs	r4, r4, r6
 8001bb0:	10a4      	asrs	r4, r4, #2
 8001bb2:	42a5      	cmp	r5, r4
 8001bb4:	d105      	bne.n	8001bc2 <__libc_init_array+0x2e>
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
 8001bb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bbc:	4798      	blx	r3
 8001bbe:	3501      	adds	r5, #1
 8001bc0:	e7ee      	b.n	8001ba0 <__libc_init_array+0xc>
 8001bc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bc6:	4798      	blx	r3
 8001bc8:	3501      	adds	r5, #1
 8001bca:	e7f2      	b.n	8001bb2 <__libc_init_array+0x1e>
 8001bcc:	08002b40 	.word	0x08002b40
 8001bd0:	08002b40 	.word	0x08002b40
 8001bd4:	08002b40 	.word	0x08002b40
 8001bd8:	08002b44 	.word	0x08002b44

08001bdc <memset>:
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4402      	add	r2, r0
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d100      	bne.n	8001be6 <memset+0xa>
 8001be4:	4770      	bx	lr
 8001be6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bea:	e7f9      	b.n	8001be0 <memset+0x4>

08001bec <iprintf>:
 8001bec:	b40f      	push	{r0, r1, r2, r3}
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <iprintf+0x2c>)
 8001bf0:	b513      	push	{r0, r1, r4, lr}
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	b124      	cbz	r4, 8001c00 <iprintf+0x14>
 8001bf6:	69a3      	ldr	r3, [r4, #24]
 8001bf8:	b913      	cbnz	r3, 8001c00 <iprintf+0x14>
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f000 f84e 	bl	8001c9c <__sinit>
 8001c00:	ab05      	add	r3, sp, #20
 8001c02:	9a04      	ldr	r2, [sp, #16]
 8001c04:	68a1      	ldr	r1, [r4, #8]
 8001c06:	4620      	mov	r0, r4
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	f000 f957 	bl	8001ebc <_vfiprintf_r>
 8001c0e:	b002      	add	sp, #8
 8001c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c14:	b004      	add	sp, #16
 8001c16:	4770      	bx	lr
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <_cleanup_r>:
 8001c1c:	4901      	ldr	r1, [pc, #4]	; (8001c24 <_cleanup_r+0x8>)
 8001c1e:	f000 b8a9 	b.w	8001d74 <_fwalk_reent>
 8001c22:	bf00      	nop
 8001c24:	08002795 	.word	0x08002795

08001c28 <std.isra.0>:
 8001c28:	2300      	movs	r3, #0
 8001c2a:	b510      	push	{r4, lr}
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	6003      	str	r3, [r0, #0]
 8001c30:	6043      	str	r3, [r0, #4]
 8001c32:	6083      	str	r3, [r0, #8]
 8001c34:	8181      	strh	r1, [r0, #12]
 8001c36:	6643      	str	r3, [r0, #100]	; 0x64
 8001c38:	81c2      	strh	r2, [r0, #14]
 8001c3a:	6103      	str	r3, [r0, #16]
 8001c3c:	6143      	str	r3, [r0, #20]
 8001c3e:	6183      	str	r3, [r0, #24]
 8001c40:	4619      	mov	r1, r3
 8001c42:	2208      	movs	r2, #8
 8001c44:	305c      	adds	r0, #92	; 0x5c
 8001c46:	f7ff ffc9 	bl	8001bdc <memset>
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <std.isra.0+0x38>)
 8001c4c:	6224      	str	r4, [r4, #32]
 8001c4e:	6263      	str	r3, [r4, #36]	; 0x24
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <std.isra.0+0x3c>)
 8001c52:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <std.isra.0+0x40>)
 8001c56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <std.isra.0+0x44>)
 8001c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8001c5c:	bd10      	pop	{r4, pc}
 8001c5e:	bf00      	nop
 8001c60:	08002439 	.word	0x08002439
 8001c64:	0800245b 	.word	0x0800245b
 8001c68:	08002493 	.word	0x08002493
 8001c6c:	080024b7 	.word	0x080024b7

08001c70 <__sfmoreglue>:
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	2568      	movs	r5, #104	; 0x68
 8001c74:	1e4a      	subs	r2, r1, #1
 8001c76:	4355      	muls	r5, r2
 8001c78:	460e      	mov	r6, r1
 8001c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c7e:	f000 f897 	bl	8001db0 <_malloc_r>
 8001c82:	4604      	mov	r4, r0
 8001c84:	b140      	cbz	r0, 8001c98 <__sfmoreglue+0x28>
 8001c86:	2100      	movs	r1, #0
 8001c88:	e880 0042 	stmia.w	r0, {r1, r6}
 8001c8c:	300c      	adds	r0, #12
 8001c8e:	60a0      	str	r0, [r4, #8]
 8001c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c94:	f7ff ffa2 	bl	8001bdc <memset>
 8001c98:	4620      	mov	r0, r4
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}

08001c9c <__sinit>:
 8001c9c:	6983      	ldr	r3, [r0, #24]
 8001c9e:	b510      	push	{r4, lr}
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	bb33      	cbnz	r3, 8001cf2 <__sinit+0x56>
 8001ca4:	6483      	str	r3, [r0, #72]	; 0x48
 8001ca6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001ca8:	6503      	str	r3, [r0, #80]	; 0x50
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <__sinit+0x58>)
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <__sinit+0x5c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6282      	str	r2, [r0, #40]	; 0x28
 8001cb2:	4298      	cmp	r0, r3
 8001cb4:	bf04      	itt	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	6183      	streq	r3, [r0, #24]
 8001cba:	f000 f81f 	bl	8001cfc <__sfp>
 8001cbe:	6060      	str	r0, [r4, #4]
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f000 f81b 	bl	8001cfc <__sfp>
 8001cc6:	60a0      	str	r0, [r4, #8]
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f000 f817 	bl	8001cfc <__sfp>
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60e0      	str	r0, [r4, #12]
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	6860      	ldr	r0, [r4, #4]
 8001cd6:	f7ff ffa7 	bl	8001c28 <std.isra.0>
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2109      	movs	r1, #9
 8001cde:	68a0      	ldr	r0, [r4, #8]
 8001ce0:	f7ff ffa2 	bl	8001c28 <std.isra.0>
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	2112      	movs	r1, #18
 8001ce8:	68e0      	ldr	r0, [r4, #12]
 8001cea:	f7ff ff9d 	bl	8001c28 <std.isra.0>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61a3      	str	r3, [r4, #24]
 8001cf2:	bd10      	pop	{r4, pc}
 8001cf4:	08002aa8 	.word	0x08002aa8
 8001cf8:	08001c1d 	.word	0x08001c1d

08001cfc <__sfp>:
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <__sfp+0x74>)
 8001d00:	4607      	mov	r7, r0
 8001d02:	681e      	ldr	r6, [r3, #0]
 8001d04:	69b3      	ldr	r3, [r6, #24]
 8001d06:	b913      	cbnz	r3, 8001d0e <__sfp+0x12>
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f7ff ffc7 	bl	8001c9c <__sinit>
 8001d0e:	3648      	adds	r6, #72	; 0x48
 8001d10:	68b4      	ldr	r4, [r6, #8]
 8001d12:	6873      	ldr	r3, [r6, #4]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	d503      	bpl.n	8001d20 <__sfp+0x24>
 8001d18:	6833      	ldr	r3, [r6, #0]
 8001d1a:	b133      	cbz	r3, 8001d2a <__sfp+0x2e>
 8001d1c:	6836      	ldr	r6, [r6, #0]
 8001d1e:	e7f7      	b.n	8001d10 <__sfp+0x14>
 8001d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d24:	b16d      	cbz	r5, 8001d42 <__sfp+0x46>
 8001d26:	3468      	adds	r4, #104	; 0x68
 8001d28:	e7f4      	b.n	8001d14 <__sfp+0x18>
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	4638      	mov	r0, r7
 8001d2e:	f7ff ff9f 	bl	8001c70 <__sfmoreglue>
 8001d32:	6030      	str	r0, [r6, #0]
 8001d34:	2800      	cmp	r0, #0
 8001d36:	d1f1      	bne.n	8001d1c <__sfp+0x20>
 8001d38:	230c      	movs	r3, #12
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4620      	mov	r0, r4
 8001d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d46:	81e3      	strh	r3, [r4, #14]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	6665      	str	r5, [r4, #100]	; 0x64
 8001d4c:	81a3      	strh	r3, [r4, #12]
 8001d4e:	6025      	str	r5, [r4, #0]
 8001d50:	60a5      	str	r5, [r4, #8]
 8001d52:	6065      	str	r5, [r4, #4]
 8001d54:	6125      	str	r5, [r4, #16]
 8001d56:	6165      	str	r5, [r4, #20]
 8001d58:	61a5      	str	r5, [r4, #24]
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d62:	f7ff ff3b 	bl	8001bdc <memset>
 8001d66:	6365      	str	r5, [r4, #52]	; 0x34
 8001d68:	63a5      	str	r5, [r4, #56]	; 0x38
 8001d6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8001d6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001d6e:	e7e6      	b.n	8001d3e <__sfp+0x42>
 8001d70:	08002aa8 	.word	0x08002aa8

08001d74 <_fwalk_reent>:
 8001d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d78:	4680      	mov	r8, r0
 8001d7a:	4689      	mov	r9, r1
 8001d7c:	2600      	movs	r6, #0
 8001d7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d82:	b914      	cbnz	r4, 8001d8a <_fwalk_reent+0x16>
 8001d84:	4630      	mov	r0, r6
 8001d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d8a:	68a5      	ldr	r5, [r4, #8]
 8001d8c:	6867      	ldr	r7, [r4, #4]
 8001d8e:	3f01      	subs	r7, #1
 8001d90:	d501      	bpl.n	8001d96 <_fwalk_reent+0x22>
 8001d92:	6824      	ldr	r4, [r4, #0]
 8001d94:	e7f5      	b.n	8001d82 <_fwalk_reent+0xe>
 8001d96:	89ab      	ldrh	r3, [r5, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d907      	bls.n	8001dac <_fwalk_reent+0x38>
 8001d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001da0:	3301      	adds	r3, #1
 8001da2:	d003      	beq.n	8001dac <_fwalk_reent+0x38>
 8001da4:	4629      	mov	r1, r5
 8001da6:	4640      	mov	r0, r8
 8001da8:	47c8      	blx	r9
 8001daa:	4306      	orrs	r6, r0
 8001dac:	3568      	adds	r5, #104	; 0x68
 8001dae:	e7ee      	b.n	8001d8e <_fwalk_reent+0x1a>

08001db0 <_malloc_r>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	1ccd      	adds	r5, r1, #3
 8001db4:	f025 0503 	bic.w	r5, r5, #3
 8001db8:	3508      	adds	r5, #8
 8001dba:	2d0c      	cmp	r5, #12
 8001dbc:	bf38      	it	cc
 8001dbe:	250c      	movcc	r5, #12
 8001dc0:	2d00      	cmp	r5, #0
 8001dc2:	4606      	mov	r6, r0
 8001dc4:	db01      	blt.n	8001dca <_malloc_r+0x1a>
 8001dc6:	42a9      	cmp	r1, r5
 8001dc8:	d903      	bls.n	8001dd2 <_malloc_r+0x22>
 8001dca:	230c      	movs	r3, #12
 8001dcc:	6033      	str	r3, [r6, #0]
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}
 8001dd2:	f000 fd8d 	bl	80028f0 <__malloc_lock>
 8001dd6:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <_malloc_r+0xb4>)
 8001dd8:	6814      	ldr	r4, [r2, #0]
 8001dda:	4621      	mov	r1, r4
 8001ddc:	b991      	cbnz	r1, 8001e04 <_malloc_r+0x54>
 8001dde:	4c22      	ldr	r4, [pc, #136]	; (8001e68 <_malloc_r+0xb8>)
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	b91b      	cbnz	r3, 8001dec <_malloc_r+0x3c>
 8001de4:	4630      	mov	r0, r6
 8001de6:	f000 fb17 	bl	8002418 <_sbrk_r>
 8001dea:	6020      	str	r0, [r4, #0]
 8001dec:	4629      	mov	r1, r5
 8001dee:	4630      	mov	r0, r6
 8001df0:	f000 fb12 	bl	8002418 <_sbrk_r>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d126      	bne.n	8001e46 <_malloc_r+0x96>
 8001df8:	230c      	movs	r3, #12
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	6033      	str	r3, [r6, #0]
 8001dfe:	f000 fd78 	bl	80028f2 <__malloc_unlock>
 8001e02:	e7e4      	b.n	8001dce <_malloc_r+0x1e>
 8001e04:	680b      	ldr	r3, [r1, #0]
 8001e06:	1b5b      	subs	r3, r3, r5
 8001e08:	d41a      	bmi.n	8001e40 <_malloc_r+0x90>
 8001e0a:	2b0b      	cmp	r3, #11
 8001e0c:	d90f      	bls.n	8001e2e <_malloc_r+0x7e>
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	18cc      	adds	r4, r1, r3
 8001e12:	50cd      	str	r5, [r1, r3]
 8001e14:	4630      	mov	r0, r6
 8001e16:	f000 fd6c 	bl	80028f2 <__malloc_unlock>
 8001e1a:	f104 000b 	add.w	r0, r4, #11
 8001e1e:	1d23      	adds	r3, r4, #4
 8001e20:	f020 0007 	bic.w	r0, r0, #7
 8001e24:	1ac3      	subs	r3, r0, r3
 8001e26:	d01b      	beq.n	8001e60 <_malloc_r+0xb0>
 8001e28:	425a      	negs	r2, r3
 8001e2a:	50e2      	str	r2, [r4, r3]
 8001e2c:	bd70      	pop	{r4, r5, r6, pc}
 8001e2e:	428c      	cmp	r4, r1
 8001e30:	bf0b      	itete	eq
 8001e32:	6863      	ldreq	r3, [r4, #4]
 8001e34:	684b      	ldrne	r3, [r1, #4]
 8001e36:	6013      	streq	r3, [r2, #0]
 8001e38:	6063      	strne	r3, [r4, #4]
 8001e3a:	bf18      	it	ne
 8001e3c:	460c      	movne	r4, r1
 8001e3e:	e7e9      	b.n	8001e14 <_malloc_r+0x64>
 8001e40:	460c      	mov	r4, r1
 8001e42:	6849      	ldr	r1, [r1, #4]
 8001e44:	e7ca      	b.n	8001ddc <_malloc_r+0x2c>
 8001e46:	1cc4      	adds	r4, r0, #3
 8001e48:	f024 0403 	bic.w	r4, r4, #3
 8001e4c:	42a0      	cmp	r0, r4
 8001e4e:	d005      	beq.n	8001e5c <_malloc_r+0xac>
 8001e50:	1a21      	subs	r1, r4, r0
 8001e52:	4630      	mov	r0, r6
 8001e54:	f000 fae0 	bl	8002418 <_sbrk_r>
 8001e58:	3001      	adds	r0, #1
 8001e5a:	d0cd      	beq.n	8001df8 <_malloc_r+0x48>
 8001e5c:	6025      	str	r5, [r4, #0]
 8001e5e:	e7d9      	b.n	8001e14 <_malloc_r+0x64>
 8001e60:	bd70      	pop	{r4, r5, r6, pc}
 8001e62:	bf00      	nop
 8001e64:	20000094 	.word	0x20000094
 8001e68:	20000098 	.word	0x20000098

08001e6c <__sfputc_r>:
 8001e6c:	6893      	ldr	r3, [r2, #8]
 8001e6e:	b410      	push	{r4}
 8001e70:	3b01      	subs	r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	6093      	str	r3, [r2, #8]
 8001e76:	da08      	bge.n	8001e8a <__sfputc_r+0x1e>
 8001e78:	6994      	ldr	r4, [r2, #24]
 8001e7a:	42a3      	cmp	r3, r4
 8001e7c:	db02      	blt.n	8001e84 <__sfputc_r+0x18>
 8001e7e:	b2cb      	uxtb	r3, r1
 8001e80:	2b0a      	cmp	r3, #10
 8001e82:	d102      	bne.n	8001e8a <__sfputc_r+0x1e>
 8001e84:	bc10      	pop	{r4}
 8001e86:	f000 bb1b 	b.w	80024c0 <__swbuf_r>
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	1c58      	adds	r0, r3, #1
 8001e8e:	6010      	str	r0, [r2, #0]
 8001e90:	7019      	strb	r1, [r3, #0]
 8001e92:	b2c8      	uxtb	r0, r1
 8001e94:	bc10      	pop	{r4}
 8001e96:	4770      	bx	lr

08001e98 <__sfputs_r>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	4606      	mov	r6, r0
 8001e9c:	460f      	mov	r7, r1
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	18d5      	adds	r5, r2, r3
 8001ea2:	42ac      	cmp	r4, r5
 8001ea4:	d101      	bne.n	8001eaa <__sfputs_r+0x12>
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	e007      	b.n	8001eba <__sfputs_r+0x22>
 8001eaa:	463a      	mov	r2, r7
 8001eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f7ff ffdb 	bl	8001e6c <__sfputc_r>
 8001eb6:	1c43      	adds	r3, r0, #1
 8001eb8:	d1f3      	bne.n	8001ea2 <__sfputs_r+0xa>
 8001eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ebc <_vfiprintf_r>:
 8001ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec0:	b09d      	sub	sp, #116	; 0x74
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	4617      	mov	r7, r2
 8001ec6:	9303      	str	r3, [sp, #12]
 8001ec8:	4606      	mov	r6, r0
 8001eca:	b118      	cbz	r0, 8001ed4 <_vfiprintf_r+0x18>
 8001ecc:	6983      	ldr	r3, [r0, #24]
 8001ece:	b90b      	cbnz	r3, 8001ed4 <_vfiprintf_r+0x18>
 8001ed0:	f7ff fee4 	bl	8001c9c <__sinit>
 8001ed4:	4b7c      	ldr	r3, [pc, #496]	; (80020c8 <_vfiprintf_r+0x20c>)
 8001ed6:	429c      	cmp	r4, r3
 8001ed8:	d157      	bne.n	8001f8a <_vfiprintf_r+0xce>
 8001eda:	6874      	ldr	r4, [r6, #4]
 8001edc:	89a3      	ldrh	r3, [r4, #12]
 8001ede:	0718      	lsls	r0, r3, #28
 8001ee0:	d55d      	bpl.n	8001f9e <_vfiprintf_r+0xe2>
 8001ee2:	6923      	ldr	r3, [r4, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05a      	beq.n	8001f9e <_vfiprintf_r+0xe2>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9309      	str	r3, [sp, #36]	; 0x24
 8001eec:	2320      	movs	r3, #32
 8001eee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ef2:	2330      	movs	r3, #48	; 0x30
 8001ef4:	f04f 0b01 	mov.w	fp, #1
 8001ef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001efc:	46b8      	mov	r8, r7
 8001efe:	4645      	mov	r5, r8
 8001f00:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d155      	bne.n	8001fb4 <_vfiprintf_r+0xf8>
 8001f08:	ebb8 0a07 	subs.w	sl, r8, r7
 8001f0c:	d00b      	beq.n	8001f26 <_vfiprintf_r+0x6a>
 8001f0e:	4653      	mov	r3, sl
 8001f10:	463a      	mov	r2, r7
 8001f12:	4621      	mov	r1, r4
 8001f14:	4630      	mov	r0, r6
 8001f16:	f7ff ffbf 	bl	8001e98 <__sfputs_r>
 8001f1a:	3001      	adds	r0, #1
 8001f1c:	f000 80c4 	beq.w	80020a8 <_vfiprintf_r+0x1ec>
 8001f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f22:	4453      	add	r3, sl
 8001f24:	9309      	str	r3, [sp, #36]	; 0x24
 8001f26:	f898 3000 	ldrb.w	r3, [r8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80bc 	beq.w	80020a8 <_vfiprintf_r+0x1ec>
 8001f30:	2300      	movs	r3, #0
 8001f32:	f04f 32ff 	mov.w	r2, #4294967295
 8001f36:	9304      	str	r3, [sp, #16]
 8001f38:	9307      	str	r3, [sp, #28]
 8001f3a:	9205      	str	r2, [sp, #20]
 8001f3c:	9306      	str	r3, [sp, #24]
 8001f3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f42:	931a      	str	r3, [sp, #104]	; 0x68
 8001f44:	2205      	movs	r2, #5
 8001f46:	7829      	ldrb	r1, [r5, #0]
 8001f48:	4860      	ldr	r0, [pc, #384]	; (80020cc <_vfiprintf_r+0x210>)
 8001f4a:	f000 fcc3 	bl	80028d4 <memchr>
 8001f4e:	f105 0801 	add.w	r8, r5, #1
 8001f52:	9b04      	ldr	r3, [sp, #16]
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d131      	bne.n	8001fbc <_vfiprintf_r+0x100>
 8001f58:	06d9      	lsls	r1, r3, #27
 8001f5a:	bf44      	itt	mi
 8001f5c:	2220      	movmi	r2, #32
 8001f5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f62:	071a      	lsls	r2, r3, #28
 8001f64:	bf44      	itt	mi
 8001f66:	222b      	movmi	r2, #43	; 0x2b
 8001f68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f6c:	782a      	ldrb	r2, [r5, #0]
 8001f6e:	2a2a      	cmp	r2, #42	; 0x2a
 8001f70:	d02c      	beq.n	8001fcc <_vfiprintf_r+0x110>
 8001f72:	2100      	movs	r1, #0
 8001f74:	200a      	movs	r0, #10
 8001f76:	9a07      	ldr	r2, [sp, #28]
 8001f78:	46a8      	mov	r8, r5
 8001f7a:	f898 3000 	ldrb.w	r3, [r8]
 8001f7e:	3501      	adds	r5, #1
 8001f80:	3b30      	subs	r3, #48	; 0x30
 8001f82:	2b09      	cmp	r3, #9
 8001f84:	d96d      	bls.n	8002062 <_vfiprintf_r+0x1a6>
 8001f86:	b371      	cbz	r1, 8001fe6 <_vfiprintf_r+0x12a>
 8001f88:	e026      	b.n	8001fd8 <_vfiprintf_r+0x11c>
 8001f8a:	4b51      	ldr	r3, [pc, #324]	; (80020d0 <_vfiprintf_r+0x214>)
 8001f8c:	429c      	cmp	r4, r3
 8001f8e:	d101      	bne.n	8001f94 <_vfiprintf_r+0xd8>
 8001f90:	68b4      	ldr	r4, [r6, #8]
 8001f92:	e7a3      	b.n	8001edc <_vfiprintf_r+0x20>
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <_vfiprintf_r+0x218>)
 8001f96:	429c      	cmp	r4, r3
 8001f98:	bf08      	it	eq
 8001f9a:	68f4      	ldreq	r4, [r6, #12]
 8001f9c:	e79e      	b.n	8001edc <_vfiprintf_r+0x20>
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	f000 faf1 	bl	8002588 <__swsetup_r>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d09e      	beq.n	8001ee8 <_vfiprintf_r+0x2c>
 8001faa:	f04f 30ff 	mov.w	r0, #4294967295
 8001fae:	b01d      	add	sp, #116	; 0x74
 8001fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fb4:	2b25      	cmp	r3, #37	; 0x25
 8001fb6:	d0a7      	beq.n	8001f08 <_vfiprintf_r+0x4c>
 8001fb8:	46a8      	mov	r8, r5
 8001fba:	e7a0      	b.n	8001efe <_vfiprintf_r+0x42>
 8001fbc:	4a43      	ldr	r2, [pc, #268]	; (80020cc <_vfiprintf_r+0x210>)
 8001fbe:	4645      	mov	r5, r8
 8001fc0:	1a80      	subs	r0, r0, r2
 8001fc2:	fa0b f000 	lsl.w	r0, fp, r0
 8001fc6:	4318      	orrs	r0, r3
 8001fc8:	9004      	str	r0, [sp, #16]
 8001fca:	e7bb      	b.n	8001f44 <_vfiprintf_r+0x88>
 8001fcc:	9a03      	ldr	r2, [sp, #12]
 8001fce:	1d11      	adds	r1, r2, #4
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	9103      	str	r1, [sp, #12]
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	db01      	blt.n	8001fdc <_vfiprintf_r+0x120>
 8001fd8:	9207      	str	r2, [sp, #28]
 8001fda:	e004      	b.n	8001fe6 <_vfiprintf_r+0x12a>
 8001fdc:	4252      	negs	r2, r2
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	9207      	str	r2, [sp, #28]
 8001fe4:	9304      	str	r3, [sp, #16]
 8001fe6:	f898 3000 	ldrb.w	r3, [r8]
 8001fea:	2b2e      	cmp	r3, #46	; 0x2e
 8001fec:	d110      	bne.n	8002010 <_vfiprintf_r+0x154>
 8001fee:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001ff2:	f108 0101 	add.w	r1, r8, #1
 8001ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ff8:	d137      	bne.n	800206a <_vfiprintf_r+0x1ae>
 8001ffa:	9b03      	ldr	r3, [sp, #12]
 8001ffc:	f108 0802 	add.w	r8, r8, #2
 8002000:	1d1a      	adds	r2, r3, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	9203      	str	r2, [sp, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	bfb8      	it	lt
 800200a:	f04f 33ff 	movlt.w	r3, #4294967295
 800200e:	9305      	str	r3, [sp, #20]
 8002010:	4d31      	ldr	r5, [pc, #196]	; (80020d8 <_vfiprintf_r+0x21c>)
 8002012:	2203      	movs	r2, #3
 8002014:	f898 1000 	ldrb.w	r1, [r8]
 8002018:	4628      	mov	r0, r5
 800201a:	f000 fc5b 	bl	80028d4 <memchr>
 800201e:	b140      	cbz	r0, 8002032 <_vfiprintf_r+0x176>
 8002020:	2340      	movs	r3, #64	; 0x40
 8002022:	1b40      	subs	r0, r0, r5
 8002024:	fa03 f000 	lsl.w	r0, r3, r0
 8002028:	9b04      	ldr	r3, [sp, #16]
 800202a:	f108 0801 	add.w	r8, r8, #1
 800202e:	4303      	orrs	r3, r0
 8002030:	9304      	str	r3, [sp, #16]
 8002032:	f898 1000 	ldrb.w	r1, [r8]
 8002036:	2206      	movs	r2, #6
 8002038:	4828      	ldr	r0, [pc, #160]	; (80020dc <_vfiprintf_r+0x220>)
 800203a:	f108 0701 	add.w	r7, r8, #1
 800203e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002042:	f000 fc47 	bl	80028d4 <memchr>
 8002046:	2800      	cmp	r0, #0
 8002048:	d034      	beq.n	80020b4 <_vfiprintf_r+0x1f8>
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <_vfiprintf_r+0x224>)
 800204c:	bb03      	cbnz	r3, 8002090 <_vfiprintf_r+0x1d4>
 800204e:	9b03      	ldr	r3, [sp, #12]
 8002050:	3307      	adds	r3, #7
 8002052:	f023 0307 	bic.w	r3, r3, #7
 8002056:	3308      	adds	r3, #8
 8002058:	9303      	str	r3, [sp, #12]
 800205a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800205c:	444b      	add	r3, r9
 800205e:	9309      	str	r3, [sp, #36]	; 0x24
 8002060:	e74c      	b.n	8001efc <_vfiprintf_r+0x40>
 8002062:	fb00 3202 	mla	r2, r0, r2, r3
 8002066:	2101      	movs	r1, #1
 8002068:	e786      	b.n	8001f78 <_vfiprintf_r+0xbc>
 800206a:	2300      	movs	r3, #0
 800206c:	250a      	movs	r5, #10
 800206e:	4618      	mov	r0, r3
 8002070:	9305      	str	r3, [sp, #20]
 8002072:	4688      	mov	r8, r1
 8002074:	f898 2000 	ldrb.w	r2, [r8]
 8002078:	3101      	adds	r1, #1
 800207a:	3a30      	subs	r2, #48	; 0x30
 800207c:	2a09      	cmp	r2, #9
 800207e:	d903      	bls.n	8002088 <_vfiprintf_r+0x1cc>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0c5      	beq.n	8002010 <_vfiprintf_r+0x154>
 8002084:	9005      	str	r0, [sp, #20]
 8002086:	e7c3      	b.n	8002010 <_vfiprintf_r+0x154>
 8002088:	fb05 2000 	mla	r0, r5, r0, r2
 800208c:	2301      	movs	r3, #1
 800208e:	e7f0      	b.n	8002072 <_vfiprintf_r+0x1b6>
 8002090:	ab03      	add	r3, sp, #12
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4622      	mov	r2, r4
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <_vfiprintf_r+0x228>)
 8002098:	a904      	add	r1, sp, #16
 800209a:	4630      	mov	r0, r6
 800209c:	f3af 8000 	nop.w
 80020a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020a4:	4681      	mov	r9, r0
 80020a6:	d1d8      	bne.n	800205a <_vfiprintf_r+0x19e>
 80020a8:	89a3      	ldrh	r3, [r4, #12]
 80020aa:	065b      	lsls	r3, r3, #25
 80020ac:	f53f af7d 	bmi.w	8001faa <_vfiprintf_r+0xee>
 80020b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020b2:	e77c      	b.n	8001fae <_vfiprintf_r+0xf2>
 80020b4:	ab03      	add	r3, sp, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4622      	mov	r2, r4
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <_vfiprintf_r+0x228>)
 80020bc:	a904      	add	r1, sp, #16
 80020be:	4630      	mov	r0, r6
 80020c0:	f000 f88a 	bl	80021d8 <_printf_i>
 80020c4:	e7ec      	b.n	80020a0 <_vfiprintf_r+0x1e4>
 80020c6:	bf00      	nop
 80020c8:	08002acc 	.word	0x08002acc
 80020cc:	08002b0c 	.word	0x08002b0c
 80020d0:	08002aec 	.word	0x08002aec
 80020d4:	08002aac 	.word	0x08002aac
 80020d8:	08002b12 	.word	0x08002b12
 80020dc:	08002b16 	.word	0x08002b16
 80020e0:	00000000 	.word	0x00000000
 80020e4:	08001e99 	.word	0x08001e99

080020e8 <_printf_common>:
 80020e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020ec:	4691      	mov	r9, r2
 80020ee:	461f      	mov	r7, r3
 80020f0:	688a      	ldr	r2, [r1, #8]
 80020f2:	690b      	ldr	r3, [r1, #16]
 80020f4:	4606      	mov	r6, r0
 80020f6:	4293      	cmp	r3, r2
 80020f8:	bfb8      	it	lt
 80020fa:	4613      	movlt	r3, r2
 80020fc:	f8c9 3000 	str.w	r3, [r9]
 8002100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002104:	460c      	mov	r4, r1
 8002106:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800210a:	b112      	cbz	r2, 8002112 <_printf_common+0x2a>
 800210c:	3301      	adds	r3, #1
 800210e:	f8c9 3000 	str.w	r3, [r9]
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	0699      	lsls	r1, r3, #26
 8002116:	bf42      	ittt	mi
 8002118:	f8d9 3000 	ldrmi.w	r3, [r9]
 800211c:	3302      	addmi	r3, #2
 800211e:	f8c9 3000 	strmi.w	r3, [r9]
 8002122:	6825      	ldr	r5, [r4, #0]
 8002124:	f015 0506 	ands.w	r5, r5, #6
 8002128:	d107      	bne.n	800213a <_printf_common+0x52>
 800212a:	f104 0a19 	add.w	sl, r4, #25
 800212e:	68e3      	ldr	r3, [r4, #12]
 8002130:	f8d9 2000 	ldr.w	r2, [r9]
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	429d      	cmp	r5, r3
 8002138:	db2a      	blt.n	8002190 <_printf_common+0xa8>
 800213a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800213e:	6822      	ldr	r2, [r4, #0]
 8002140:	3300      	adds	r3, #0
 8002142:	bf18      	it	ne
 8002144:	2301      	movne	r3, #1
 8002146:	0692      	lsls	r2, r2, #26
 8002148:	d42f      	bmi.n	80021aa <_printf_common+0xc2>
 800214a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800214e:	4639      	mov	r1, r7
 8002150:	4630      	mov	r0, r6
 8002152:	47c0      	blx	r8
 8002154:	3001      	adds	r0, #1
 8002156:	d022      	beq.n	800219e <_printf_common+0xb6>
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	68e5      	ldr	r5, [r4, #12]
 800215c:	f003 0306 	and.w	r3, r3, #6
 8002160:	2b04      	cmp	r3, #4
 8002162:	bf18      	it	ne
 8002164:	2500      	movne	r5, #0
 8002166:	f8d9 2000 	ldr.w	r2, [r9]
 800216a:	f04f 0900 	mov.w	r9, #0
 800216e:	bf08      	it	eq
 8002170:	1aad      	subeq	r5, r5, r2
 8002172:	68a3      	ldr	r3, [r4, #8]
 8002174:	6922      	ldr	r2, [r4, #16]
 8002176:	bf08      	it	eq
 8002178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800217c:	4293      	cmp	r3, r2
 800217e:	bfc4      	itt	gt
 8002180:	1a9b      	subgt	r3, r3, r2
 8002182:	18ed      	addgt	r5, r5, r3
 8002184:	341a      	adds	r4, #26
 8002186:	454d      	cmp	r5, r9
 8002188:	d11b      	bne.n	80021c2 <_printf_common+0xda>
 800218a:	2000      	movs	r0, #0
 800218c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002190:	2301      	movs	r3, #1
 8002192:	4652      	mov	r2, sl
 8002194:	4639      	mov	r1, r7
 8002196:	4630      	mov	r0, r6
 8002198:	47c0      	blx	r8
 800219a:	3001      	adds	r0, #1
 800219c:	d103      	bne.n	80021a6 <_printf_common+0xbe>
 800219e:	f04f 30ff 	mov.w	r0, #4294967295
 80021a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021a6:	3501      	adds	r5, #1
 80021a8:	e7c1      	b.n	800212e <_printf_common+0x46>
 80021aa:	2030      	movs	r0, #48	; 0x30
 80021ac:	18e1      	adds	r1, r4, r3
 80021ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021b8:	4422      	add	r2, r4
 80021ba:	3302      	adds	r3, #2
 80021bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021c0:	e7c3      	b.n	800214a <_printf_common+0x62>
 80021c2:	2301      	movs	r3, #1
 80021c4:	4622      	mov	r2, r4
 80021c6:	4639      	mov	r1, r7
 80021c8:	4630      	mov	r0, r6
 80021ca:	47c0      	blx	r8
 80021cc:	3001      	adds	r0, #1
 80021ce:	d0e6      	beq.n	800219e <_printf_common+0xb6>
 80021d0:	f109 0901 	add.w	r9, r9, #1
 80021d4:	e7d7      	b.n	8002186 <_printf_common+0x9e>
	...

080021d8 <_printf_i>:
 80021d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021dc:	4617      	mov	r7, r2
 80021de:	7e0a      	ldrb	r2, [r1, #24]
 80021e0:	b085      	sub	sp, #20
 80021e2:	2a6e      	cmp	r2, #110	; 0x6e
 80021e4:	4698      	mov	r8, r3
 80021e6:	4606      	mov	r6, r0
 80021e8:	460c      	mov	r4, r1
 80021ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80021f0:	f000 80bc 	beq.w	800236c <_printf_i+0x194>
 80021f4:	d81a      	bhi.n	800222c <_printf_i+0x54>
 80021f6:	2a63      	cmp	r2, #99	; 0x63
 80021f8:	d02e      	beq.n	8002258 <_printf_i+0x80>
 80021fa:	d80a      	bhi.n	8002212 <_printf_i+0x3a>
 80021fc:	2a00      	cmp	r2, #0
 80021fe:	f000 80c8 	beq.w	8002392 <_printf_i+0x1ba>
 8002202:	2a58      	cmp	r2, #88	; 0x58
 8002204:	f000 808a 	beq.w	800231c <_printf_i+0x144>
 8002208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800220c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002210:	e02a      	b.n	8002268 <_printf_i+0x90>
 8002212:	2a64      	cmp	r2, #100	; 0x64
 8002214:	d001      	beq.n	800221a <_printf_i+0x42>
 8002216:	2a69      	cmp	r2, #105	; 0x69
 8002218:	d1f6      	bne.n	8002208 <_printf_i+0x30>
 800221a:	6821      	ldr	r1, [r4, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002222:	d023      	beq.n	800226c <_printf_i+0x94>
 8002224:	1d11      	adds	r1, r2, #4
 8002226:	6019      	str	r1, [r3, #0]
 8002228:	6813      	ldr	r3, [r2, #0]
 800222a:	e027      	b.n	800227c <_printf_i+0xa4>
 800222c:	2a73      	cmp	r2, #115	; 0x73
 800222e:	f000 80b4 	beq.w	800239a <_printf_i+0x1c2>
 8002232:	d808      	bhi.n	8002246 <_printf_i+0x6e>
 8002234:	2a6f      	cmp	r2, #111	; 0x6f
 8002236:	d02a      	beq.n	800228e <_printf_i+0xb6>
 8002238:	2a70      	cmp	r2, #112	; 0x70
 800223a:	d1e5      	bne.n	8002208 <_printf_i+0x30>
 800223c:	680a      	ldr	r2, [r1, #0]
 800223e:	f042 0220 	orr.w	r2, r2, #32
 8002242:	600a      	str	r2, [r1, #0]
 8002244:	e003      	b.n	800224e <_printf_i+0x76>
 8002246:	2a75      	cmp	r2, #117	; 0x75
 8002248:	d021      	beq.n	800228e <_printf_i+0xb6>
 800224a:	2a78      	cmp	r2, #120	; 0x78
 800224c:	d1dc      	bne.n	8002208 <_printf_i+0x30>
 800224e:	2278      	movs	r2, #120	; 0x78
 8002250:	496f      	ldr	r1, [pc, #444]	; (8002410 <_printf_i+0x238>)
 8002252:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002256:	e064      	b.n	8002322 <_printf_i+0x14a>
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800225e:	1d11      	adds	r1, r2, #4
 8002260:	6019      	str	r1, [r3, #0]
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002268:	2301      	movs	r3, #1
 800226a:	e0a3      	b.n	80023b4 <_printf_i+0x1dc>
 800226c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002270:	f102 0104 	add.w	r1, r2, #4
 8002274:	6019      	str	r1, [r3, #0]
 8002276:	d0d7      	beq.n	8002228 <_printf_i+0x50>
 8002278:	f9b2 3000 	ldrsh.w	r3, [r2]
 800227c:	2b00      	cmp	r3, #0
 800227e:	da03      	bge.n	8002288 <_printf_i+0xb0>
 8002280:	222d      	movs	r2, #45	; 0x2d
 8002282:	425b      	negs	r3, r3
 8002284:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002288:	4962      	ldr	r1, [pc, #392]	; (8002414 <_printf_i+0x23c>)
 800228a:	220a      	movs	r2, #10
 800228c:	e017      	b.n	80022be <_printf_i+0xe6>
 800228e:	6820      	ldr	r0, [r4, #0]
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002296:	d003      	beq.n	80022a0 <_printf_i+0xc8>
 8002298:	1d08      	adds	r0, r1, #4
 800229a:	6018      	str	r0, [r3, #0]
 800229c:	680b      	ldr	r3, [r1, #0]
 800229e:	e006      	b.n	80022ae <_printf_i+0xd6>
 80022a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022a4:	f101 0004 	add.w	r0, r1, #4
 80022a8:	6018      	str	r0, [r3, #0]
 80022aa:	d0f7      	beq.n	800229c <_printf_i+0xc4>
 80022ac:	880b      	ldrh	r3, [r1, #0]
 80022ae:	2a6f      	cmp	r2, #111	; 0x6f
 80022b0:	bf14      	ite	ne
 80022b2:	220a      	movne	r2, #10
 80022b4:	2208      	moveq	r2, #8
 80022b6:	4957      	ldr	r1, [pc, #348]	; (8002414 <_printf_i+0x23c>)
 80022b8:	2000      	movs	r0, #0
 80022ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80022be:	6865      	ldr	r5, [r4, #4]
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	60a5      	str	r5, [r4, #8]
 80022c4:	f2c0 809c 	blt.w	8002400 <_printf_i+0x228>
 80022c8:	6820      	ldr	r0, [r4, #0]
 80022ca:	f020 0004 	bic.w	r0, r0, #4
 80022ce:	6020      	str	r0, [r4, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d13f      	bne.n	8002354 <_printf_i+0x17c>
 80022d4:	2d00      	cmp	r5, #0
 80022d6:	f040 8095 	bne.w	8002404 <_printf_i+0x22c>
 80022da:	4675      	mov	r5, lr
 80022dc:	2a08      	cmp	r2, #8
 80022de:	d10b      	bne.n	80022f8 <_printf_i+0x120>
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	07da      	lsls	r2, r3, #31
 80022e4:	d508      	bpl.n	80022f8 <_printf_i+0x120>
 80022e6:	6923      	ldr	r3, [r4, #16]
 80022e8:	6862      	ldr	r2, [r4, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	bfde      	ittt	le
 80022ee:	2330      	movle	r3, #48	; 0x30
 80022f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022f8:	ebae 0305 	sub.w	r3, lr, r5
 80022fc:	6123      	str	r3, [r4, #16]
 80022fe:	f8cd 8000 	str.w	r8, [sp]
 8002302:	463b      	mov	r3, r7
 8002304:	aa03      	add	r2, sp, #12
 8002306:	4621      	mov	r1, r4
 8002308:	4630      	mov	r0, r6
 800230a:	f7ff feed 	bl	80020e8 <_printf_common>
 800230e:	3001      	adds	r0, #1
 8002310:	d155      	bne.n	80023be <_printf_i+0x1e6>
 8002312:	f04f 30ff 	mov.w	r0, #4294967295
 8002316:	b005      	add	sp, #20
 8002318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800231c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002320:	493c      	ldr	r1, [pc, #240]	; (8002414 <_printf_i+0x23c>)
 8002322:	6822      	ldr	r2, [r4, #0]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	f012 0f80 	tst.w	r2, #128	; 0x80
 800232a:	f100 0504 	add.w	r5, r0, #4
 800232e:	601d      	str	r5, [r3, #0]
 8002330:	d001      	beq.n	8002336 <_printf_i+0x15e>
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	e002      	b.n	800233c <_printf_i+0x164>
 8002336:	0655      	lsls	r5, r2, #25
 8002338:	d5fb      	bpl.n	8002332 <_printf_i+0x15a>
 800233a:	8803      	ldrh	r3, [r0, #0]
 800233c:	07d0      	lsls	r0, r2, #31
 800233e:	bf44      	itt	mi
 8002340:	f042 0220 	orrmi.w	r2, r2, #32
 8002344:	6022      	strmi	r2, [r4, #0]
 8002346:	b91b      	cbnz	r3, 8002350 <_printf_i+0x178>
 8002348:	6822      	ldr	r2, [r4, #0]
 800234a:	f022 0220 	bic.w	r2, r2, #32
 800234e:	6022      	str	r2, [r4, #0]
 8002350:	2210      	movs	r2, #16
 8002352:	e7b1      	b.n	80022b8 <_printf_i+0xe0>
 8002354:	4675      	mov	r5, lr
 8002356:	fbb3 f0f2 	udiv	r0, r3, r2
 800235a:	fb02 3310 	mls	r3, r2, r0, r3
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002364:	4603      	mov	r3, r0
 8002366:	2800      	cmp	r0, #0
 8002368:	d1f5      	bne.n	8002356 <_printf_i+0x17e>
 800236a:	e7b7      	b.n	80022dc <_printf_i+0x104>
 800236c:	6808      	ldr	r0, [r1, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002374:	6949      	ldr	r1, [r1, #20]
 8002376:	d004      	beq.n	8002382 <_printf_i+0x1aa>
 8002378:	1d10      	adds	r0, r2, #4
 800237a:	6018      	str	r0, [r3, #0]
 800237c:	6813      	ldr	r3, [r2, #0]
 800237e:	6019      	str	r1, [r3, #0]
 8002380:	e007      	b.n	8002392 <_printf_i+0x1ba>
 8002382:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002386:	f102 0004 	add.w	r0, r2, #4
 800238a:	6018      	str	r0, [r3, #0]
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	d0f6      	beq.n	800237e <_printf_i+0x1a6>
 8002390:	8019      	strh	r1, [r3, #0]
 8002392:	2300      	movs	r3, #0
 8002394:	4675      	mov	r5, lr
 8002396:	6123      	str	r3, [r4, #16]
 8002398:	e7b1      	b.n	80022fe <_printf_i+0x126>
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	1d11      	adds	r1, r2, #4
 800239e:	6019      	str	r1, [r3, #0]
 80023a0:	6815      	ldr	r5, [r2, #0]
 80023a2:	2100      	movs	r1, #0
 80023a4:	6862      	ldr	r2, [r4, #4]
 80023a6:	4628      	mov	r0, r5
 80023a8:	f000 fa94 	bl	80028d4 <memchr>
 80023ac:	b108      	cbz	r0, 80023b2 <_printf_i+0x1da>
 80023ae:	1b40      	subs	r0, r0, r5
 80023b0:	6060      	str	r0, [r4, #4]
 80023b2:	6863      	ldr	r3, [r4, #4]
 80023b4:	6123      	str	r3, [r4, #16]
 80023b6:	2300      	movs	r3, #0
 80023b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023bc:	e79f      	b.n	80022fe <_printf_i+0x126>
 80023be:	6923      	ldr	r3, [r4, #16]
 80023c0:	462a      	mov	r2, r5
 80023c2:	4639      	mov	r1, r7
 80023c4:	4630      	mov	r0, r6
 80023c6:	47c0      	blx	r8
 80023c8:	3001      	adds	r0, #1
 80023ca:	d0a2      	beq.n	8002312 <_printf_i+0x13a>
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	079b      	lsls	r3, r3, #30
 80023d0:	d507      	bpl.n	80023e2 <_printf_i+0x20a>
 80023d2:	2500      	movs	r5, #0
 80023d4:	f104 0919 	add.w	r9, r4, #25
 80023d8:	68e3      	ldr	r3, [r4, #12]
 80023da:	9a03      	ldr	r2, [sp, #12]
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	429d      	cmp	r5, r3
 80023e0:	db05      	blt.n	80023ee <_printf_i+0x216>
 80023e2:	68e0      	ldr	r0, [r4, #12]
 80023e4:	9b03      	ldr	r3, [sp, #12]
 80023e6:	4298      	cmp	r0, r3
 80023e8:	bfb8      	it	lt
 80023ea:	4618      	movlt	r0, r3
 80023ec:	e793      	b.n	8002316 <_printf_i+0x13e>
 80023ee:	2301      	movs	r3, #1
 80023f0:	464a      	mov	r2, r9
 80023f2:	4639      	mov	r1, r7
 80023f4:	4630      	mov	r0, r6
 80023f6:	47c0      	blx	r8
 80023f8:	3001      	adds	r0, #1
 80023fa:	d08a      	beq.n	8002312 <_printf_i+0x13a>
 80023fc:	3501      	adds	r5, #1
 80023fe:	e7eb      	b.n	80023d8 <_printf_i+0x200>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1a7      	bne.n	8002354 <_printf_i+0x17c>
 8002404:	780b      	ldrb	r3, [r1, #0]
 8002406:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800240a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800240e:	e765      	b.n	80022dc <_printf_i+0x104>
 8002410:	08002b2e 	.word	0x08002b2e
 8002414:	08002b1d 	.word	0x08002b1d

08002418 <_sbrk_r>:
 8002418:	b538      	push	{r3, r4, r5, lr}
 800241a:	2300      	movs	r3, #0
 800241c:	4c05      	ldr	r4, [pc, #20]	; (8002434 <_sbrk_r+0x1c>)
 800241e:	4605      	mov	r5, r0
 8002420:	4608      	mov	r0, r1
 8002422:	6023      	str	r3, [r4, #0]
 8002424:	f7ff fafc 	bl	8001a20 <_sbrk>
 8002428:	1c43      	adds	r3, r0, #1
 800242a:	d102      	bne.n	8002432 <_sbrk_r+0x1a>
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	b103      	cbz	r3, 8002432 <_sbrk_r+0x1a>
 8002430:	602b      	str	r3, [r5, #0]
 8002432:	bd38      	pop	{r3, r4, r5, pc}
 8002434:	2000026c 	.word	0x2000026c

08002438 <__sread>:
 8002438:	b510      	push	{r4, lr}
 800243a:	460c      	mov	r4, r1
 800243c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002440:	f000 faa4 	bl	800298c <_read_r>
 8002444:	2800      	cmp	r0, #0
 8002446:	bfab      	itete	ge
 8002448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800244a:	89a3      	ldrhlt	r3, [r4, #12]
 800244c:	181b      	addge	r3, r3, r0
 800244e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002452:	bfac      	ite	ge
 8002454:	6563      	strge	r3, [r4, #84]	; 0x54
 8002456:	81a3      	strhlt	r3, [r4, #12]
 8002458:	bd10      	pop	{r4, pc}

0800245a <__swrite>:
 800245a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800245e:	461f      	mov	r7, r3
 8002460:	898b      	ldrh	r3, [r1, #12]
 8002462:	4605      	mov	r5, r0
 8002464:	05db      	lsls	r3, r3, #23
 8002466:	460c      	mov	r4, r1
 8002468:	4616      	mov	r6, r2
 800246a:	d505      	bpl.n	8002478 <__swrite+0x1e>
 800246c:	2302      	movs	r3, #2
 800246e:	2200      	movs	r2, #0
 8002470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002474:	f000 f9b8 	bl	80027e8 <_lseek_r>
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	4632      	mov	r2, r6
 800247c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002480:	81a3      	strh	r3, [r4, #12]
 8002482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002486:	463b      	mov	r3, r7
 8002488:	4628      	mov	r0, r5
 800248a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800248e:	f000 b869 	b.w	8002564 <_write_r>

08002492 <__sseek>:
 8002492:	b510      	push	{r4, lr}
 8002494:	460c      	mov	r4, r1
 8002496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800249a:	f000 f9a5 	bl	80027e8 <_lseek_r>
 800249e:	1c43      	adds	r3, r0, #1
 80024a0:	89a3      	ldrh	r3, [r4, #12]
 80024a2:	bf15      	itete	ne
 80024a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80024a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024ae:	81a3      	strheq	r3, [r4, #12]
 80024b0:	bf18      	it	ne
 80024b2:	81a3      	strhne	r3, [r4, #12]
 80024b4:	bd10      	pop	{r4, pc}

080024b6 <__sclose>:
 80024b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ba:	f000 b8d3 	b.w	8002664 <_close_r>
	...

080024c0 <__swbuf_r>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	460e      	mov	r6, r1
 80024c4:	4614      	mov	r4, r2
 80024c6:	4605      	mov	r5, r0
 80024c8:	b118      	cbz	r0, 80024d2 <__swbuf_r+0x12>
 80024ca:	6983      	ldr	r3, [r0, #24]
 80024cc:	b90b      	cbnz	r3, 80024d2 <__swbuf_r+0x12>
 80024ce:	f7ff fbe5 	bl	8001c9c <__sinit>
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <__swbuf_r+0x98>)
 80024d4:	429c      	cmp	r4, r3
 80024d6:	d12a      	bne.n	800252e <__swbuf_r+0x6e>
 80024d8:	686c      	ldr	r4, [r5, #4]
 80024da:	69a3      	ldr	r3, [r4, #24]
 80024dc:	60a3      	str	r3, [r4, #8]
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	071a      	lsls	r2, r3, #28
 80024e2:	d52e      	bpl.n	8002542 <__swbuf_r+0x82>
 80024e4:	6923      	ldr	r3, [r4, #16]
 80024e6:	b363      	cbz	r3, 8002542 <__swbuf_r+0x82>
 80024e8:	6923      	ldr	r3, [r4, #16]
 80024ea:	6820      	ldr	r0, [r4, #0]
 80024ec:	b2f6      	uxtb	r6, r6
 80024ee:	1ac0      	subs	r0, r0, r3
 80024f0:	6963      	ldr	r3, [r4, #20]
 80024f2:	4637      	mov	r7, r6
 80024f4:	4298      	cmp	r0, r3
 80024f6:	db04      	blt.n	8002502 <__swbuf_r+0x42>
 80024f8:	4621      	mov	r1, r4
 80024fa:	4628      	mov	r0, r5
 80024fc:	f000 f94a 	bl	8002794 <_fflush_r>
 8002500:	bb28      	cbnz	r0, 800254e <__swbuf_r+0x8e>
 8002502:	68a3      	ldr	r3, [r4, #8]
 8002504:	3001      	adds	r0, #1
 8002506:	3b01      	subs	r3, #1
 8002508:	60a3      	str	r3, [r4, #8]
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	6022      	str	r2, [r4, #0]
 8002510:	701e      	strb	r6, [r3, #0]
 8002512:	6963      	ldr	r3, [r4, #20]
 8002514:	4298      	cmp	r0, r3
 8002516:	d004      	beq.n	8002522 <__swbuf_r+0x62>
 8002518:	89a3      	ldrh	r3, [r4, #12]
 800251a:	07db      	lsls	r3, r3, #31
 800251c:	d519      	bpl.n	8002552 <__swbuf_r+0x92>
 800251e:	2e0a      	cmp	r6, #10
 8002520:	d117      	bne.n	8002552 <__swbuf_r+0x92>
 8002522:	4621      	mov	r1, r4
 8002524:	4628      	mov	r0, r5
 8002526:	f000 f935 	bl	8002794 <_fflush_r>
 800252a:	b190      	cbz	r0, 8002552 <__swbuf_r+0x92>
 800252c:	e00f      	b.n	800254e <__swbuf_r+0x8e>
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <__swbuf_r+0x9c>)
 8002530:	429c      	cmp	r4, r3
 8002532:	d101      	bne.n	8002538 <__swbuf_r+0x78>
 8002534:	68ac      	ldr	r4, [r5, #8]
 8002536:	e7d0      	b.n	80024da <__swbuf_r+0x1a>
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <__swbuf_r+0xa0>)
 800253a:	429c      	cmp	r4, r3
 800253c:	bf08      	it	eq
 800253e:	68ec      	ldreq	r4, [r5, #12]
 8002540:	e7cb      	b.n	80024da <__swbuf_r+0x1a>
 8002542:	4621      	mov	r1, r4
 8002544:	4628      	mov	r0, r5
 8002546:	f000 f81f 	bl	8002588 <__swsetup_r>
 800254a:	2800      	cmp	r0, #0
 800254c:	d0cc      	beq.n	80024e8 <__swbuf_r+0x28>
 800254e:	f04f 37ff 	mov.w	r7, #4294967295
 8002552:	4638      	mov	r0, r7
 8002554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002556:	bf00      	nop
 8002558:	08002acc 	.word	0x08002acc
 800255c:	08002aec 	.word	0x08002aec
 8002560:	08002aac 	.word	0x08002aac

08002564 <_write_r>:
 8002564:	b538      	push	{r3, r4, r5, lr}
 8002566:	4605      	mov	r5, r0
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	2200      	movs	r2, #0
 800256e:	4c05      	ldr	r4, [pc, #20]	; (8002584 <_write_r+0x20>)
 8002570:	6022      	str	r2, [r4, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	f7ff f838 	bl	80015e8 <_write>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d102      	bne.n	8002582 <_write_r+0x1e>
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	b103      	cbz	r3, 8002582 <_write_r+0x1e>
 8002580:	602b      	str	r3, [r5, #0]
 8002582:	bd38      	pop	{r3, r4, r5, pc}
 8002584:	2000026c 	.word	0x2000026c

08002588 <__swsetup_r>:
 8002588:	4b32      	ldr	r3, [pc, #200]	; (8002654 <__swsetup_r+0xcc>)
 800258a:	b570      	push	{r4, r5, r6, lr}
 800258c:	681d      	ldr	r5, [r3, #0]
 800258e:	4606      	mov	r6, r0
 8002590:	460c      	mov	r4, r1
 8002592:	b125      	cbz	r5, 800259e <__swsetup_r+0x16>
 8002594:	69ab      	ldr	r3, [r5, #24]
 8002596:	b913      	cbnz	r3, 800259e <__swsetup_r+0x16>
 8002598:	4628      	mov	r0, r5
 800259a:	f7ff fb7f 	bl	8001c9c <__sinit>
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <__swsetup_r+0xd0>)
 80025a0:	429c      	cmp	r4, r3
 80025a2:	d10f      	bne.n	80025c4 <__swsetup_r+0x3c>
 80025a4:	686c      	ldr	r4, [r5, #4]
 80025a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	0715      	lsls	r5, r2, #28
 80025ae:	d42c      	bmi.n	800260a <__swsetup_r+0x82>
 80025b0:	06d0      	lsls	r0, r2, #27
 80025b2:	d411      	bmi.n	80025d8 <__swsetup_r+0x50>
 80025b4:	2209      	movs	r2, #9
 80025b6:	6032      	str	r2, [r6, #0]
 80025b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025bc:	81a3      	strh	r3, [r4, #12]
 80025be:	f04f 30ff 	mov.w	r0, #4294967295
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <__swsetup_r+0xd4>)
 80025c6:	429c      	cmp	r4, r3
 80025c8:	d101      	bne.n	80025ce <__swsetup_r+0x46>
 80025ca:	68ac      	ldr	r4, [r5, #8]
 80025cc:	e7eb      	b.n	80025a6 <__swsetup_r+0x1e>
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <__swsetup_r+0xd8>)
 80025d0:	429c      	cmp	r4, r3
 80025d2:	bf08      	it	eq
 80025d4:	68ec      	ldreq	r4, [r5, #12]
 80025d6:	e7e6      	b.n	80025a6 <__swsetup_r+0x1e>
 80025d8:	0751      	lsls	r1, r2, #29
 80025da:	d512      	bpl.n	8002602 <__swsetup_r+0x7a>
 80025dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025de:	b141      	cbz	r1, 80025f2 <__swsetup_r+0x6a>
 80025e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025e4:	4299      	cmp	r1, r3
 80025e6:	d002      	beq.n	80025ee <__swsetup_r+0x66>
 80025e8:	4630      	mov	r0, r6
 80025ea:	f000 f983 	bl	80028f4 <_free_r>
 80025ee:	2300      	movs	r3, #0
 80025f0:	6363      	str	r3, [r4, #52]	; 0x34
 80025f2:	89a3      	ldrh	r3, [r4, #12]
 80025f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025f8:	81a3      	strh	r3, [r4, #12]
 80025fa:	2300      	movs	r3, #0
 80025fc:	6063      	str	r3, [r4, #4]
 80025fe:	6923      	ldr	r3, [r4, #16]
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	89a3      	ldrh	r3, [r4, #12]
 8002604:	f043 0308 	orr.w	r3, r3, #8
 8002608:	81a3      	strh	r3, [r4, #12]
 800260a:	6923      	ldr	r3, [r4, #16]
 800260c:	b94b      	cbnz	r3, 8002622 <__swsetup_r+0x9a>
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d003      	beq.n	8002622 <__swsetup_r+0x9a>
 800261a:	4621      	mov	r1, r4
 800261c:	4630      	mov	r0, r6
 800261e:	f000 f919 	bl	8002854 <__smakebuf_r>
 8002622:	89a2      	ldrh	r2, [r4, #12]
 8002624:	f012 0301 	ands.w	r3, r2, #1
 8002628:	d00c      	beq.n	8002644 <__swsetup_r+0xbc>
 800262a:	2300      	movs	r3, #0
 800262c:	60a3      	str	r3, [r4, #8]
 800262e:	6963      	ldr	r3, [r4, #20]
 8002630:	425b      	negs	r3, r3
 8002632:	61a3      	str	r3, [r4, #24]
 8002634:	6923      	ldr	r3, [r4, #16]
 8002636:	b953      	cbnz	r3, 800264e <__swsetup_r+0xc6>
 8002638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800263c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002640:	d1ba      	bne.n	80025b8 <__swsetup_r+0x30>
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	0792      	lsls	r2, r2, #30
 8002646:	bf58      	it	pl
 8002648:	6963      	ldrpl	r3, [r4, #20]
 800264a:	60a3      	str	r3, [r4, #8]
 800264c:	e7f2      	b.n	8002634 <__swsetup_r+0xac>
 800264e:	2000      	movs	r0, #0
 8002650:	e7f7      	b.n	8002642 <__swsetup_r+0xba>
 8002652:	bf00      	nop
 8002654:	2000000c 	.word	0x2000000c
 8002658:	08002acc 	.word	0x08002acc
 800265c:	08002aec 	.word	0x08002aec
 8002660:	08002aac 	.word	0x08002aac

08002664 <_close_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	2300      	movs	r3, #0
 8002668:	4c05      	ldr	r4, [pc, #20]	; (8002680 <_close_r+0x1c>)
 800266a:	4605      	mov	r5, r0
 800266c:	4608      	mov	r0, r1
 800266e:	6023      	str	r3, [r4, #0]
 8002670:	f7ff f9f0 	bl	8001a54 <_close>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d102      	bne.n	800267e <_close_r+0x1a>
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	b103      	cbz	r3, 800267e <_close_r+0x1a>
 800267c:	602b      	str	r3, [r5, #0]
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	2000026c 	.word	0x2000026c

08002684 <__sflush_r>:
 8002684:	898a      	ldrh	r2, [r1, #12]
 8002686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800268a:	4605      	mov	r5, r0
 800268c:	0710      	lsls	r0, r2, #28
 800268e:	460c      	mov	r4, r1
 8002690:	d45a      	bmi.n	8002748 <__sflush_r+0xc4>
 8002692:	684b      	ldr	r3, [r1, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	dc05      	bgt.n	80026a4 <__sflush_r+0x20>
 8002698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	dc02      	bgt.n	80026a4 <__sflush_r+0x20>
 800269e:	2000      	movs	r0, #0
 80026a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	d0f9      	beq.n	800269e <__sflush_r+0x1a>
 80026aa:	2300      	movs	r3, #0
 80026ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026b0:	682f      	ldr	r7, [r5, #0]
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	d033      	beq.n	800271e <__sflush_r+0x9a>
 80026b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026b8:	89a3      	ldrh	r3, [r4, #12]
 80026ba:	075a      	lsls	r2, r3, #29
 80026bc:	d505      	bpl.n	80026ca <__sflush_r+0x46>
 80026be:	6863      	ldr	r3, [r4, #4]
 80026c0:	1ac0      	subs	r0, r0, r3
 80026c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026c4:	b10b      	cbz	r3, 80026ca <__sflush_r+0x46>
 80026c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c8:	1ac0      	subs	r0, r0, r3
 80026ca:	2300      	movs	r3, #0
 80026cc:	4602      	mov	r2, r0
 80026ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026d0:	6a21      	ldr	r1, [r4, #32]
 80026d2:	4628      	mov	r0, r5
 80026d4:	47b0      	blx	r6
 80026d6:	1c43      	adds	r3, r0, #1
 80026d8:	89a3      	ldrh	r3, [r4, #12]
 80026da:	d106      	bne.n	80026ea <__sflush_r+0x66>
 80026dc:	6829      	ldr	r1, [r5, #0]
 80026de:	291d      	cmp	r1, #29
 80026e0:	d84b      	bhi.n	800277a <__sflush_r+0xf6>
 80026e2:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <__sflush_r+0x10c>)
 80026e4:	40ca      	lsrs	r2, r1
 80026e6:	07d6      	lsls	r6, r2, #31
 80026e8:	d547      	bpl.n	800277a <__sflush_r+0xf6>
 80026ea:	2200      	movs	r2, #0
 80026ec:	6062      	str	r2, [r4, #4]
 80026ee:	6922      	ldr	r2, [r4, #16]
 80026f0:	04d9      	lsls	r1, r3, #19
 80026f2:	6022      	str	r2, [r4, #0]
 80026f4:	d504      	bpl.n	8002700 <__sflush_r+0x7c>
 80026f6:	1c42      	adds	r2, r0, #1
 80026f8:	d101      	bne.n	80026fe <__sflush_r+0x7a>
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	b903      	cbnz	r3, 8002700 <__sflush_r+0x7c>
 80026fe:	6560      	str	r0, [r4, #84]	; 0x54
 8002700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002702:	602f      	str	r7, [r5, #0]
 8002704:	2900      	cmp	r1, #0
 8002706:	d0ca      	beq.n	800269e <__sflush_r+0x1a>
 8002708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800270c:	4299      	cmp	r1, r3
 800270e:	d002      	beq.n	8002716 <__sflush_r+0x92>
 8002710:	4628      	mov	r0, r5
 8002712:	f000 f8ef 	bl	80028f4 <_free_r>
 8002716:	2000      	movs	r0, #0
 8002718:	6360      	str	r0, [r4, #52]	; 0x34
 800271a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800271e:	6a21      	ldr	r1, [r4, #32]
 8002720:	2301      	movs	r3, #1
 8002722:	4628      	mov	r0, r5
 8002724:	47b0      	blx	r6
 8002726:	1c41      	adds	r1, r0, #1
 8002728:	d1c6      	bne.n	80026b8 <__sflush_r+0x34>
 800272a:	682b      	ldr	r3, [r5, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0c3      	beq.n	80026b8 <__sflush_r+0x34>
 8002730:	2b1d      	cmp	r3, #29
 8002732:	d001      	beq.n	8002738 <__sflush_r+0xb4>
 8002734:	2b16      	cmp	r3, #22
 8002736:	d101      	bne.n	800273c <__sflush_r+0xb8>
 8002738:	602f      	str	r7, [r5, #0]
 800273a:	e7b0      	b.n	800269e <__sflush_r+0x1a>
 800273c:	89a3      	ldrh	r3, [r4, #12]
 800273e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002742:	81a3      	strh	r3, [r4, #12]
 8002744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002748:	690f      	ldr	r7, [r1, #16]
 800274a:	2f00      	cmp	r7, #0
 800274c:	d0a7      	beq.n	800269e <__sflush_r+0x1a>
 800274e:	0793      	lsls	r3, r2, #30
 8002750:	bf18      	it	ne
 8002752:	2300      	movne	r3, #0
 8002754:	680e      	ldr	r6, [r1, #0]
 8002756:	bf08      	it	eq
 8002758:	694b      	ldreq	r3, [r1, #20]
 800275a:	eba6 0807 	sub.w	r8, r6, r7
 800275e:	600f      	str	r7, [r1, #0]
 8002760:	608b      	str	r3, [r1, #8]
 8002762:	f1b8 0f00 	cmp.w	r8, #0
 8002766:	dd9a      	ble.n	800269e <__sflush_r+0x1a>
 8002768:	4643      	mov	r3, r8
 800276a:	463a      	mov	r2, r7
 800276c:	6a21      	ldr	r1, [r4, #32]
 800276e:	4628      	mov	r0, r5
 8002770:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002772:	47b0      	blx	r6
 8002774:	2800      	cmp	r0, #0
 8002776:	dc07      	bgt.n	8002788 <__sflush_r+0x104>
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002788:	4407      	add	r7, r0
 800278a:	eba8 0800 	sub.w	r8, r8, r0
 800278e:	e7e8      	b.n	8002762 <__sflush_r+0xde>
 8002790:	20400001 	.word	0x20400001

08002794 <_fflush_r>:
 8002794:	b538      	push	{r3, r4, r5, lr}
 8002796:	690b      	ldr	r3, [r1, #16]
 8002798:	4605      	mov	r5, r0
 800279a:	460c      	mov	r4, r1
 800279c:	b1db      	cbz	r3, 80027d6 <_fflush_r+0x42>
 800279e:	b118      	cbz	r0, 80027a8 <_fflush_r+0x14>
 80027a0:	6983      	ldr	r3, [r0, #24]
 80027a2:	b90b      	cbnz	r3, 80027a8 <_fflush_r+0x14>
 80027a4:	f7ff fa7a 	bl	8001c9c <__sinit>
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <_fflush_r+0x48>)
 80027aa:	429c      	cmp	r4, r3
 80027ac:	d109      	bne.n	80027c2 <_fflush_r+0x2e>
 80027ae:	686c      	ldr	r4, [r5, #4]
 80027b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027b4:	b17b      	cbz	r3, 80027d6 <_fflush_r+0x42>
 80027b6:	4621      	mov	r1, r4
 80027b8:	4628      	mov	r0, r5
 80027ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027be:	f7ff bf61 	b.w	8002684 <__sflush_r>
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <_fflush_r+0x4c>)
 80027c4:	429c      	cmp	r4, r3
 80027c6:	d101      	bne.n	80027cc <_fflush_r+0x38>
 80027c8:	68ac      	ldr	r4, [r5, #8]
 80027ca:	e7f1      	b.n	80027b0 <_fflush_r+0x1c>
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <_fflush_r+0x50>)
 80027ce:	429c      	cmp	r4, r3
 80027d0:	bf08      	it	eq
 80027d2:	68ec      	ldreq	r4, [r5, #12]
 80027d4:	e7ec      	b.n	80027b0 <_fflush_r+0x1c>
 80027d6:	2000      	movs	r0, #0
 80027d8:	bd38      	pop	{r3, r4, r5, pc}
 80027da:	bf00      	nop
 80027dc:	08002acc 	.word	0x08002acc
 80027e0:	08002aec 	.word	0x08002aec
 80027e4:	08002aac 	.word	0x08002aac

080027e8 <_lseek_r>:
 80027e8:	b538      	push	{r3, r4, r5, lr}
 80027ea:	4605      	mov	r5, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	2200      	movs	r2, #0
 80027f2:	4c05      	ldr	r4, [pc, #20]	; (8002808 <_lseek_r+0x20>)
 80027f4:	6022      	str	r2, [r4, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f7ff f936 	bl	8001a68 <_lseek>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d102      	bne.n	8002806 <_lseek_r+0x1e>
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	b103      	cbz	r3, 8002806 <_lseek_r+0x1e>
 8002804:	602b      	str	r3, [r5, #0]
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	2000026c 	.word	0x2000026c

0800280c <__swhatbuf_r>:
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	460e      	mov	r6, r1
 8002810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002814:	b090      	sub	sp, #64	; 0x40
 8002816:	2900      	cmp	r1, #0
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
 800281c:	da07      	bge.n	800282e <__swhatbuf_r+0x22>
 800281e:	2300      	movs	r3, #0
 8002820:	602b      	str	r3, [r5, #0]
 8002822:	89b3      	ldrh	r3, [r6, #12]
 8002824:	061a      	lsls	r2, r3, #24
 8002826:	d410      	bmi.n	800284a <__swhatbuf_r+0x3e>
 8002828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282c:	e00e      	b.n	800284c <__swhatbuf_r+0x40>
 800282e:	aa01      	add	r2, sp, #4
 8002830:	f000 f8be 	bl	80029b0 <_fstat_r>
 8002834:	2800      	cmp	r0, #0
 8002836:	dbf2      	blt.n	800281e <__swhatbuf_r+0x12>
 8002838:	9a02      	ldr	r2, [sp, #8]
 800283a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800283e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002842:	425a      	negs	r2, r3
 8002844:	415a      	adcs	r2, r3
 8002846:	602a      	str	r2, [r5, #0]
 8002848:	e7ee      	b.n	8002828 <__swhatbuf_r+0x1c>
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	2000      	movs	r0, #0
 800284e:	6023      	str	r3, [r4, #0]
 8002850:	b010      	add	sp, #64	; 0x40
 8002852:	bd70      	pop	{r4, r5, r6, pc}

08002854 <__smakebuf_r>:
 8002854:	898b      	ldrh	r3, [r1, #12]
 8002856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002858:	079d      	lsls	r5, r3, #30
 800285a:	4606      	mov	r6, r0
 800285c:	460c      	mov	r4, r1
 800285e:	d507      	bpl.n	8002870 <__smakebuf_r+0x1c>
 8002860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	6123      	str	r3, [r4, #16]
 8002868:	2301      	movs	r3, #1
 800286a:	6163      	str	r3, [r4, #20]
 800286c:	b002      	add	sp, #8
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	ab01      	add	r3, sp, #4
 8002872:	466a      	mov	r2, sp
 8002874:	f7ff ffca 	bl	800280c <__swhatbuf_r>
 8002878:	9900      	ldr	r1, [sp, #0]
 800287a:	4605      	mov	r5, r0
 800287c:	4630      	mov	r0, r6
 800287e:	f7ff fa97 	bl	8001db0 <_malloc_r>
 8002882:	b948      	cbnz	r0, 8002898 <__smakebuf_r+0x44>
 8002884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002888:	059a      	lsls	r2, r3, #22
 800288a:	d4ef      	bmi.n	800286c <__smakebuf_r+0x18>
 800288c:	f023 0303 	bic.w	r3, r3, #3
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	81a3      	strh	r3, [r4, #12]
 8002896:	e7e3      	b.n	8002860 <__smakebuf_r+0xc>
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <__smakebuf_r+0x7c>)
 800289a:	62b3      	str	r3, [r6, #40]	; 0x28
 800289c:	89a3      	ldrh	r3, [r4, #12]
 800289e:	6020      	str	r0, [r4, #0]
 80028a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a4:	81a3      	strh	r3, [r4, #12]
 80028a6:	9b00      	ldr	r3, [sp, #0]
 80028a8:	6120      	str	r0, [r4, #16]
 80028aa:	6163      	str	r3, [r4, #20]
 80028ac:	9b01      	ldr	r3, [sp, #4]
 80028ae:	b15b      	cbz	r3, 80028c8 <__smakebuf_r+0x74>
 80028b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028b4:	4630      	mov	r0, r6
 80028b6:	f000 f88d 	bl	80029d4 <_isatty_r>
 80028ba:	b128      	cbz	r0, 80028c8 <__smakebuf_r+0x74>
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	81a3      	strh	r3, [r4, #12]
 80028c8:	89a3      	ldrh	r3, [r4, #12]
 80028ca:	431d      	orrs	r5, r3
 80028cc:	81a5      	strh	r5, [r4, #12]
 80028ce:	e7cd      	b.n	800286c <__smakebuf_r+0x18>
 80028d0:	08001c1d 	.word	0x08001c1d

080028d4 <memchr>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	b2c9      	uxtb	r1, r1
 80028d8:	4402      	add	r2, r0
 80028da:	4290      	cmp	r0, r2
 80028dc:	4603      	mov	r3, r0
 80028de:	d101      	bne.n	80028e4 <memchr+0x10>
 80028e0:	2000      	movs	r0, #0
 80028e2:	bd10      	pop	{r4, pc}
 80028e4:	781c      	ldrb	r4, [r3, #0]
 80028e6:	3001      	adds	r0, #1
 80028e8:	428c      	cmp	r4, r1
 80028ea:	d1f6      	bne.n	80028da <memchr+0x6>
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd10      	pop	{r4, pc}

080028f0 <__malloc_lock>:
 80028f0:	4770      	bx	lr

080028f2 <__malloc_unlock>:
 80028f2:	4770      	bx	lr

080028f4 <_free_r>:
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4605      	mov	r5, r0
 80028f8:	2900      	cmp	r1, #0
 80028fa:	d043      	beq.n	8002984 <_free_r+0x90>
 80028fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002900:	1f0c      	subs	r4, r1, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	bfb8      	it	lt
 8002906:	18e4      	addlt	r4, r4, r3
 8002908:	f7ff fff2 	bl	80028f0 <__malloc_lock>
 800290c:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <_free_r+0x94>)
 800290e:	6813      	ldr	r3, [r2, #0]
 8002910:	4610      	mov	r0, r2
 8002912:	b933      	cbnz	r3, 8002922 <_free_r+0x2e>
 8002914:	6063      	str	r3, [r4, #4]
 8002916:	6014      	str	r4, [r2, #0]
 8002918:	4628      	mov	r0, r5
 800291a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800291e:	f7ff bfe8 	b.w	80028f2 <__malloc_unlock>
 8002922:	42a3      	cmp	r3, r4
 8002924:	d90b      	bls.n	800293e <_free_r+0x4a>
 8002926:	6821      	ldr	r1, [r4, #0]
 8002928:	1862      	adds	r2, r4, r1
 800292a:	4293      	cmp	r3, r2
 800292c:	bf01      	itttt	eq
 800292e:	681a      	ldreq	r2, [r3, #0]
 8002930:	685b      	ldreq	r3, [r3, #4]
 8002932:	1852      	addeq	r2, r2, r1
 8002934:	6022      	streq	r2, [r4, #0]
 8002936:	6063      	str	r3, [r4, #4]
 8002938:	6004      	str	r4, [r0, #0]
 800293a:	e7ed      	b.n	8002918 <_free_r+0x24>
 800293c:	4613      	mov	r3, r2
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	b10a      	cbz	r2, 8002946 <_free_r+0x52>
 8002942:	42a2      	cmp	r2, r4
 8002944:	d9fa      	bls.n	800293c <_free_r+0x48>
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	1858      	adds	r0, r3, r1
 800294a:	42a0      	cmp	r0, r4
 800294c:	d10b      	bne.n	8002966 <_free_r+0x72>
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	4401      	add	r1, r0
 8002952:	1858      	adds	r0, r3, r1
 8002954:	4282      	cmp	r2, r0
 8002956:	6019      	str	r1, [r3, #0]
 8002958:	d1de      	bne.n	8002918 <_free_r+0x24>
 800295a:	6810      	ldr	r0, [r2, #0]
 800295c:	6852      	ldr	r2, [r2, #4]
 800295e:	4401      	add	r1, r0
 8002960:	6019      	str	r1, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	e7d8      	b.n	8002918 <_free_r+0x24>
 8002966:	d902      	bls.n	800296e <_free_r+0x7a>
 8002968:	230c      	movs	r3, #12
 800296a:	602b      	str	r3, [r5, #0]
 800296c:	e7d4      	b.n	8002918 <_free_r+0x24>
 800296e:	6820      	ldr	r0, [r4, #0]
 8002970:	1821      	adds	r1, r4, r0
 8002972:	428a      	cmp	r2, r1
 8002974:	bf01      	itttt	eq
 8002976:	6811      	ldreq	r1, [r2, #0]
 8002978:	6852      	ldreq	r2, [r2, #4]
 800297a:	1809      	addeq	r1, r1, r0
 800297c:	6021      	streq	r1, [r4, #0]
 800297e:	6062      	str	r2, [r4, #4]
 8002980:	605c      	str	r4, [r3, #4]
 8002982:	e7c9      	b.n	8002918 <_free_r+0x24>
 8002984:	bd38      	pop	{r3, r4, r5, pc}
 8002986:	bf00      	nop
 8002988:	20000094 	.word	0x20000094

0800298c <_read_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4605      	mov	r5, r0
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	2200      	movs	r2, #0
 8002996:	4c05      	ldr	r4, [pc, #20]	; (80029ac <_read_r+0x20>)
 8002998:	6022      	str	r2, [r4, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	f7ff f832 	bl	8001a04 <_read>
 80029a0:	1c43      	adds	r3, r0, #1
 80029a2:	d102      	bne.n	80029aa <_read_r+0x1e>
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	b103      	cbz	r3, 80029aa <_read_r+0x1e>
 80029a8:	602b      	str	r3, [r5, #0]
 80029aa:	bd38      	pop	{r3, r4, r5, pc}
 80029ac:	2000026c 	.word	0x2000026c

080029b0 <_fstat_r>:
 80029b0:	b538      	push	{r3, r4, r5, lr}
 80029b2:	2300      	movs	r3, #0
 80029b4:	4c06      	ldr	r4, [pc, #24]	; (80029d0 <_fstat_r+0x20>)
 80029b6:	4605      	mov	r5, r0
 80029b8:	4608      	mov	r0, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	6023      	str	r3, [r4, #0]
 80029be:	f7ff f84c 	bl	8001a5a <_fstat>
 80029c2:	1c43      	adds	r3, r0, #1
 80029c4:	d102      	bne.n	80029cc <_fstat_r+0x1c>
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	b103      	cbz	r3, 80029cc <_fstat_r+0x1c>
 80029ca:	602b      	str	r3, [r5, #0]
 80029cc:	bd38      	pop	{r3, r4, r5, pc}
 80029ce:	bf00      	nop
 80029d0:	2000026c 	.word	0x2000026c

080029d4 <_isatty_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	2300      	movs	r3, #0
 80029d8:	4c05      	ldr	r4, [pc, #20]	; (80029f0 <_isatty_r+0x1c>)
 80029da:	4605      	mov	r5, r0
 80029dc:	4608      	mov	r0, r1
 80029de:	6023      	str	r3, [r4, #0]
 80029e0:	f7ff f840 	bl	8001a64 <_isatty>
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	d102      	bne.n	80029ee <_isatty_r+0x1a>
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	b103      	cbz	r3, 80029ee <_isatty_r+0x1a>
 80029ec:	602b      	str	r3, [r5, #0]
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
 80029f0:	2000026c 	.word	0x2000026c

080029f4 <_init>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr

08002a00 <_fini>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr
