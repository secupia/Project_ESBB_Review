
0514_ESBB_KEY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000108c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001198  08001198  00011198  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080011b8  080011b8  000111b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080011c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  2000000c  080011cc  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000080  080011cc  00020080  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e875  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ed2  00000000  00000000  0002e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000473a  00000000  00000000  0003077c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006b8  00000000  00000000  00034eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008d0  00000000  00000000  00035570  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003bdb  00000000  00000000  00035e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ba0  00000000  00000000  00039a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c5bb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012b8  00000000  00000000  0003c638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001180 	.word	0x08001180

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001180 	.word	0x08001180

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88c 	bl	8000280 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ff20 	bl	8000ff0 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000038 	.word	0x20000038
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000038 	.word	0x20000038

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	2301      	movs	r3, #1
 800026a:	0942      	lsrs	r2, r0, #5
 800026c:	f000 001f 	and.w	r0, r0, #31
 8000270:	fa03 f000 	lsl.w	r0, r3, r0
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000276:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002b0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002b2:	4616      	mov	r6, r2
 80002b4:	4b65      	ldr	r3, [pc, #404]	; (800044c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002b6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800045c <HAL_GPIO_Init+0x1b0>
 80002ba:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000460 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002be:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002c4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002cc:	45a0      	cmp	r8, r4
 80002ce:	d17f      	bne.n	80003d0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002d0:	684d      	ldr	r5, [r1, #4]
 80002d2:	2d12      	cmp	r5, #18
 80002d4:	f000 80af 	beq.w	8000436 <HAL_GPIO_Init+0x18a>
 80002d8:	f200 8088 	bhi.w	80003ec <HAL_GPIO_Init+0x140>
 80002dc:	2d02      	cmp	r5, #2
 80002de:	f000 80a7 	beq.w	8000430 <HAL_GPIO_Init+0x184>
 80002e2:	d87c      	bhi.n	80003de <HAL_GPIO_Init+0x132>
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	f000 808e 	beq.w	8000406 <HAL_GPIO_Init+0x15a>
 80002ea:	2d01      	cmp	r5, #1
 80002ec:	f000 809e 	beq.w	800042c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002f4:	2cff      	cmp	r4, #255	; 0xff
 80002f6:	bf93      	iteet	ls
 80002f8:	4682      	movls	sl, r0
 80002fa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002fe:	3d08      	subhi	r5, #8
 8000300:	f8d0 b000 	ldrls.w	fp, [r0]
 8000304:	bf92      	itee	ls
 8000306:	00b5      	lslls	r5, r6, #2
 8000308:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800030c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800030e:	fa09 f805 	lsl.w	r8, r9, r5
 8000312:	ea2b 0808 	bic.w	r8, fp, r8
 8000316:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800031a:	bf88      	it	hi
 800031c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000320:	ea48 0505 	orr.w	r5, r8, r5
 8000324:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000328:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800032c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000330:	d04e      	beq.n	80003d0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	4d47      	ldr	r5, [pc, #284]	; (8000450 <HAL_GPIO_Init+0x1a4>)
 8000334:	4f46      	ldr	r7, [pc, #280]	; (8000450 <HAL_GPIO_Init+0x1a4>)
 8000336:	69ad      	ldr	r5, [r5, #24]
 8000338:	f026 0803 	bic.w	r8, r6, #3
 800033c:	f045 0501 	orr.w	r5, r5, #1
 8000340:	61bd      	str	r5, [r7, #24]
 8000342:	69bd      	ldr	r5, [r7, #24]
 8000344:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000348:	f005 0501 	and.w	r5, r5, #1
 800034c:	9501      	str	r5, [sp, #4]
 800034e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000352:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000358:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800035c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000360:	fa09 f90b 	lsl.w	r9, r9, fp
 8000364:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000368:	4d3a      	ldr	r5, [pc, #232]	; (8000454 <HAL_GPIO_Init+0x1a8>)
 800036a:	42a8      	cmp	r0, r5
 800036c:	d068      	beq.n	8000440 <HAL_GPIO_Init+0x194>
 800036e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000372:	42a8      	cmp	r0, r5
 8000374:	d066      	beq.n	8000444 <HAL_GPIO_Init+0x198>
 8000376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037a:	42a8      	cmp	r0, r5
 800037c:	d064      	beq.n	8000448 <HAL_GPIO_Init+0x19c>
 800037e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000382:	42a8      	cmp	r0, r5
 8000384:	bf0c      	ite	eq
 8000386:	2503      	moveq	r5, #3
 8000388:	2504      	movne	r5, #4
 800038a:	fa05 f50b 	lsl.w	r5, r5, fp
 800038e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000392:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000396:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000398:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800039c:	bf14      	ite	ne
 800039e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003a0:	43a5      	biceq	r5, r4
 80003a2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003a4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003a6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003aa:	bf14      	ite	ne
 80003ac:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ae:	43a5      	biceq	r5, r4
 80003b0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003b4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b8:	bf14      	ite	ne
 80003ba:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003bc:	43a5      	biceq	r5, r4
 80003be:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003c2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c6:	bf14      	ite	ne
 80003c8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ca:	ea25 0404 	biceq.w	r4, r5, r4
 80003ce:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003d0:	3601      	adds	r6, #1
 80003d2:	2e10      	cmp	r6, #16
 80003d4:	f47f af73 	bne.w	80002be <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003d8:	b003      	add	sp, #12
 80003da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003de:	2d03      	cmp	r5, #3
 80003e0:	d022      	beq.n	8000428 <HAL_GPIO_Init+0x17c>
 80003e2:	2d11      	cmp	r5, #17
 80003e4:	d184      	bne.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003e6:	68ca      	ldr	r2, [r1, #12]
 80003e8:	3204      	adds	r2, #4
          break;
 80003ea:	e781      	b.n	80002f0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003ec:	4f1a      	ldr	r7, [pc, #104]	; (8000458 <HAL_GPIO_Init+0x1ac>)
 80003ee:	42bd      	cmp	r5, r7
 80003f0:	d009      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 80003f2:	d812      	bhi.n	800041a <HAL_GPIO_Init+0x16e>
 80003f4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000464 <HAL_GPIO_Init+0x1b8>
 80003f8:	454d      	cmp	r5, r9
 80003fa:	d004      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 80003fc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000400:	454d      	cmp	r5, r9
 8000402:	f47f af75 	bne.w	80002f0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000406:	688a      	ldr	r2, [r1, #8]
 8000408:	b1c2      	cbz	r2, 800043c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800040a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800040c:	bf0c      	ite	eq
 800040e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000412:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000416:	2208      	movs	r2, #8
 8000418:	e76a      	b.n	80002f0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800041a:	4575      	cmp	r5, lr
 800041c:	d0f3      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 800041e:	4565      	cmp	r5, ip
 8000420:	d0f1      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 8000422:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000468 <HAL_GPIO_Init+0x1bc>
 8000426:	e7eb      	b.n	8000400 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000428:	2200      	movs	r2, #0
 800042a:	e761      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800042c:	68ca      	ldr	r2, [r1, #12]
          break;
 800042e:	e75f      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000430:	68ca      	ldr	r2, [r1, #12]
 8000432:	3208      	adds	r2, #8
          break;
 8000434:	e75c      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000436:	68ca      	ldr	r2, [r1, #12]
 8000438:	320c      	adds	r2, #12
          break;
 800043a:	e759      	b.n	80002f0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800043c:	2204      	movs	r2, #4
 800043e:	e757      	b.n	80002f0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	2500      	movs	r5, #0
 8000442:	e7a2      	b.n	800038a <HAL_GPIO_Init+0xde>
 8000444:	2501      	movs	r5, #1
 8000446:	e7a0      	b.n	800038a <HAL_GPIO_Init+0xde>
 8000448:	2502      	movs	r5, #2
 800044a:	e79e      	b.n	800038a <HAL_GPIO_Init+0xde>
 800044c:	40010400 	.word	0x40010400
 8000450:	40021000 	.word	0x40021000
 8000454:	40010800 	.word	0x40010800
 8000458:	10210000 	.word	0x10210000
 800045c:	10310000 	.word	0x10310000
 8000460:	10320000 	.word	0x10320000
 8000464:	10110000 	.word	0x10110000
 8000468:	10220000 	.word	0x10220000

0800046c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800046c:	6883      	ldr	r3, [r0, #8]
 800046e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000470:	bf14      	ite	ne
 8000472:	2001      	movne	r0, #1
 8000474:	2000      	moveq	r0, #0
 8000476:	4770      	bx	lr

08000478 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000478:	b10a      	cbz	r2, 800047e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800047a:	6101      	str	r1, [r0, #16]
 800047c:	4770      	bx	lr
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	e7fb      	b.n	800047a <HAL_GPIO_WritePin+0x2>

08000482 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000482:	68c3      	ldr	r3, [r0, #12]
 8000484:	4059      	eors	r1, r3
 8000486:	60c1      	str	r1, [r0, #12]
 8000488:	4770      	bx	lr
	...

0800048c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048c:	6803      	ldr	r3, [r0, #0]
{
 800048e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000492:	07db      	lsls	r3, r3, #31
{
 8000494:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000496:	d410      	bmi.n	80004ba <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000498:	682b      	ldr	r3, [r5, #0]
 800049a:	079f      	lsls	r7, r3, #30
 800049c:	d45e      	bmi.n	800055c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800049e:	682b      	ldr	r3, [r5, #0]
 80004a0:	0719      	lsls	r1, r3, #28
 80004a2:	f100 8095 	bmi.w	80005d0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004a6:	682b      	ldr	r3, [r5, #0]
 80004a8:	075a      	lsls	r2, r3, #29
 80004aa:	f100 80bf 	bmi.w	800062c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004ae:	69ea      	ldr	r2, [r5, #28]
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 812d 	bne.w	8000710 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004b6:	2000      	movs	r0, #0
 80004b8:	e014      	b.n	80004e4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ba:	4c90      	ldr	r4, [pc, #576]	; (80006fc <HAL_RCC_OscConfig+0x270>)
 80004bc:	6863      	ldr	r3, [r4, #4]
 80004be:	f003 030c 	and.w	r3, r3, #12
 80004c2:	2b04      	cmp	r3, #4
 80004c4:	d007      	beq.n	80004d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004c6:	6863      	ldr	r3, [r4, #4]
 80004c8:	f003 030c 	and.w	r3, r3, #12
 80004cc:	2b08      	cmp	r3, #8
 80004ce:	d10c      	bne.n	80004ea <HAL_RCC_OscConfig+0x5e>
 80004d0:	6863      	ldr	r3, [r4, #4]
 80004d2:	03de      	lsls	r6, r3, #15
 80004d4:	d509      	bpl.n	80004ea <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004d6:	6823      	ldr	r3, [r4, #0]
 80004d8:	039c      	lsls	r4, r3, #14
 80004da:	d5dd      	bpl.n	8000498 <HAL_RCC_OscConfig+0xc>
 80004dc:	686b      	ldr	r3, [r5, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1da      	bne.n	8000498 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004e2:	2001      	movs	r0, #1
}
 80004e4:	b002      	add	sp, #8
 80004e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004ea:	686b      	ldr	r3, [r5, #4]
 80004ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004f0:	d110      	bne.n	8000514 <HAL_RCC_OscConfig+0x88>
 80004f2:	6823      	ldr	r3, [r4, #0]
 80004f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004fa:	f7ff fe69 	bl	80001d0 <HAL_GetTick>
 80004fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000500:	6823      	ldr	r3, [r4, #0]
 8000502:	0398      	lsls	r0, r3, #14
 8000504:	d4c8      	bmi.n	8000498 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000506:	f7ff fe63 	bl	80001d0 <HAL_GetTick>
 800050a:	1b80      	subs	r0, r0, r6
 800050c:	2864      	cmp	r0, #100	; 0x64
 800050e:	d9f7      	bls.n	8000500 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000510:	2003      	movs	r0, #3
 8000512:	e7e7      	b.n	80004e4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000514:	b99b      	cbnz	r3, 800053e <HAL_RCC_OscConfig+0xb2>
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800051c:	6023      	str	r3, [r4, #0]
 800051e:	6823      	ldr	r3, [r4, #0]
 8000520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000524:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000526:	f7ff fe53 	bl	80001d0 <HAL_GetTick>
 800052a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800052c:	6823      	ldr	r3, [r4, #0]
 800052e:	0399      	lsls	r1, r3, #14
 8000530:	d5b2      	bpl.n	8000498 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000532:	f7ff fe4d 	bl	80001d0 <HAL_GetTick>
 8000536:	1b80      	subs	r0, r0, r6
 8000538:	2864      	cmp	r0, #100	; 0x64
 800053a:	d9f7      	bls.n	800052c <HAL_RCC_OscConfig+0xa0>
 800053c:	e7e8      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000542:	6823      	ldr	r3, [r4, #0]
 8000544:	d103      	bne.n	800054e <HAL_RCC_OscConfig+0xc2>
 8000546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800054a:	6023      	str	r3, [r4, #0]
 800054c:	e7d1      	b.n	80004f2 <HAL_RCC_OscConfig+0x66>
 800054e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000552:	6023      	str	r3, [r4, #0]
 8000554:	6823      	ldr	r3, [r4, #0]
 8000556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055a:	e7cd      	b.n	80004f8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800055c:	4c67      	ldr	r4, [pc, #412]	; (80006fc <HAL_RCC_OscConfig+0x270>)
 800055e:	6863      	ldr	r3, [r4, #4]
 8000560:	f013 0f0c 	tst.w	r3, #12
 8000564:	d007      	beq.n	8000576 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000566:	6863      	ldr	r3, [r4, #4]
 8000568:	f003 030c 	and.w	r3, r3, #12
 800056c:	2b08      	cmp	r3, #8
 800056e:	d110      	bne.n	8000592 <HAL_RCC_OscConfig+0x106>
 8000570:	6863      	ldr	r3, [r4, #4]
 8000572:	03da      	lsls	r2, r3, #15
 8000574:	d40d      	bmi.n	8000592 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	079b      	lsls	r3, r3, #30
 800057a:	d502      	bpl.n	8000582 <HAL_RCC_OscConfig+0xf6>
 800057c:	692b      	ldr	r3, [r5, #16]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d1af      	bne.n	80004e2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	696a      	ldr	r2, [r5, #20]
 8000586:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800058a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800058e:	6023      	str	r3, [r4, #0]
 8000590:	e785      	b.n	800049e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000592:	692a      	ldr	r2, [r5, #16]
 8000594:	4b5a      	ldr	r3, [pc, #360]	; (8000700 <HAL_RCC_OscConfig+0x274>)
 8000596:	b16a      	cbz	r2, 80005b4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800059c:	f7ff fe18 	bl	80001d0 <HAL_GetTick>
 80005a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	079f      	lsls	r7, r3, #30
 80005a6:	d4ec      	bmi.n	8000582 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005a8:	f7ff fe12 	bl	80001d0 <HAL_GetTick>
 80005ac:	1b80      	subs	r0, r0, r6
 80005ae:	2802      	cmp	r0, #2
 80005b0:	d9f7      	bls.n	80005a2 <HAL_RCC_OscConfig+0x116>
 80005b2:	e7ad      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b6:	f7ff fe0b 	bl	80001d0 <HAL_GetTick>
 80005ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	0798      	lsls	r0, r3, #30
 80005c0:	f57f af6d 	bpl.w	800049e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005c4:	f7ff fe04 	bl	80001d0 <HAL_GetTick>
 80005c8:	1b80      	subs	r0, r0, r6
 80005ca:	2802      	cmp	r0, #2
 80005cc:	d9f6      	bls.n	80005bc <HAL_RCC_OscConfig+0x130>
 80005ce:	e79f      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005d0:	69aa      	ldr	r2, [r5, #24]
 80005d2:	4c4a      	ldr	r4, [pc, #296]	; (80006fc <HAL_RCC_OscConfig+0x270>)
 80005d4:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <HAL_RCC_OscConfig+0x278>)
 80005d6:	b1da      	cbz	r2, 8000610 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005dc:	f7ff fdf8 	bl	80001d0 <HAL_GetTick>
 80005e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005e4:	079b      	lsls	r3, r3, #30
 80005e6:	d50d      	bpl.n	8000604 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005e8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005ec:	4b46      	ldr	r3, [pc, #280]	; (8000708 <HAL_RCC_OscConfig+0x27c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005f6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005f8:	9b01      	ldr	r3, [sp, #4]
 80005fa:	1e5a      	subs	r2, r3, #1
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f9      	bne.n	80005f6 <HAL_RCC_OscConfig+0x16a>
 8000602:	e750      	b.n	80004a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000604:	f7ff fde4 	bl	80001d0 <HAL_GetTick>
 8000608:	1b80      	subs	r0, r0, r6
 800060a:	2802      	cmp	r0, #2
 800060c:	d9e9      	bls.n	80005e2 <HAL_RCC_OscConfig+0x156>
 800060e:	e77f      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000610:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000612:	f7ff fddd 	bl	80001d0 <HAL_GetTick>
 8000616:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800061a:	079f      	lsls	r7, r3, #30
 800061c:	f57f af43 	bpl.w	80004a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000620:	f7ff fdd6 	bl	80001d0 <HAL_GetTick>
 8000624:	1b80      	subs	r0, r0, r6
 8000626:	2802      	cmp	r0, #2
 8000628:	d9f6      	bls.n	8000618 <HAL_RCC_OscConfig+0x18c>
 800062a:	e771      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800062c:	4c33      	ldr	r4, [pc, #204]	; (80006fc <HAL_RCC_OscConfig+0x270>)
 800062e:	69e3      	ldr	r3, [r4, #28]
 8000630:	00d8      	lsls	r0, r3, #3
 8000632:	d424      	bmi.n	800067e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000634:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	69e3      	ldr	r3, [r4, #28]
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	61e3      	str	r3, [r4, #28]
 800063e:	69e3      	ldr	r3, [r4, #28]
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000648:	4e30      	ldr	r6, [pc, #192]	; (800070c <HAL_RCC_OscConfig+0x280>)
 800064a:	6833      	ldr	r3, [r6, #0]
 800064c:	05d9      	lsls	r1, r3, #23
 800064e:	d518      	bpl.n	8000682 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000650:	68eb      	ldr	r3, [r5, #12]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d126      	bne.n	80006a4 <HAL_RCC_OscConfig+0x218>
 8000656:	6a23      	ldr	r3, [r4, #32]
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800065e:	f7ff fdb7 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000662:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000666:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000668:	6a23      	ldr	r3, [r4, #32]
 800066a:	079b      	lsls	r3, r3, #30
 800066c:	d53f      	bpl.n	80006ee <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800066e:	2f00      	cmp	r7, #0
 8000670:	f43f af1d 	beq.w	80004ae <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000674:	69e3      	ldr	r3, [r4, #28]
 8000676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800067a:	61e3      	str	r3, [r4, #28]
 800067c:	e717      	b.n	80004ae <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800067e:	2700      	movs	r7, #0
 8000680:	e7e2      	b.n	8000648 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000682:	6833      	ldr	r3, [r6, #0]
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800068a:	f7ff fda1 	bl	80001d0 <HAL_GetTick>
 800068e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000690:	6833      	ldr	r3, [r6, #0]
 8000692:	05da      	lsls	r2, r3, #23
 8000694:	d4dc      	bmi.n	8000650 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000696:	f7ff fd9b 	bl	80001d0 <HAL_GetTick>
 800069a:	eba0 0008 	sub.w	r0, r0, r8
 800069e:	2864      	cmp	r0, #100	; 0x64
 80006a0:	d9f6      	bls.n	8000690 <HAL_RCC_OscConfig+0x204>
 80006a2:	e735      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a4:	b9ab      	cbnz	r3, 80006d2 <HAL_RCC_OscConfig+0x246>
 80006a6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ac:	f023 0301 	bic.w	r3, r3, #1
 80006b0:	6223      	str	r3, [r4, #32]
 80006b2:	6a23      	ldr	r3, [r4, #32]
 80006b4:	f023 0304 	bic.w	r3, r3, #4
 80006b8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ba:	f7ff fd89 	bl	80001d0 <HAL_GetTick>
 80006be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006c0:	6a23      	ldr	r3, [r4, #32]
 80006c2:	0798      	lsls	r0, r3, #30
 80006c4:	d5d3      	bpl.n	800066e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006c6:	f7ff fd83 	bl	80001d0 <HAL_GetTick>
 80006ca:	1b80      	subs	r0, r0, r6
 80006cc:	4540      	cmp	r0, r8
 80006ce:	d9f7      	bls.n	80006c0 <HAL_RCC_OscConfig+0x234>
 80006d0:	e71e      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	6a23      	ldr	r3, [r4, #32]
 80006d6:	d103      	bne.n	80006e0 <HAL_RCC_OscConfig+0x254>
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6223      	str	r3, [r4, #32]
 80006de:	e7ba      	b.n	8000656 <HAL_RCC_OscConfig+0x1ca>
 80006e0:	f023 0301 	bic.w	r3, r3, #1
 80006e4:	6223      	str	r3, [r4, #32]
 80006e6:	6a23      	ldr	r3, [r4, #32]
 80006e8:	f023 0304 	bic.w	r3, r3, #4
 80006ec:	e7b6      	b.n	800065c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ee:	f7ff fd6f 	bl	80001d0 <HAL_GetTick>
 80006f2:	eba0 0008 	sub.w	r0, r0, r8
 80006f6:	42b0      	cmp	r0, r6
 80006f8:	d9b6      	bls.n	8000668 <HAL_RCC_OscConfig+0x1dc>
 80006fa:	e709      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
 80006fc:	40021000 	.word	0x40021000
 8000700:	42420000 	.word	0x42420000
 8000704:	42420480 	.word	0x42420480
 8000708:	20000008 	.word	0x20000008
 800070c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000710:	4c22      	ldr	r4, [pc, #136]	; (800079c <HAL_RCC_OscConfig+0x310>)
 8000712:	6863      	ldr	r3, [r4, #4]
 8000714:	f003 030c 	and.w	r3, r3, #12
 8000718:	2b08      	cmp	r3, #8
 800071a:	f43f aee2 	beq.w	80004e2 <HAL_RCC_OscConfig+0x56>
 800071e:	2300      	movs	r3, #0
 8000720:	4e1f      	ldr	r6, [pc, #124]	; (80007a0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000722:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000724:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000726:	d12b      	bne.n	8000780 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000728:	f7ff fd52 	bl	80001d0 <HAL_GetTick>
 800072c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	0199      	lsls	r1, r3, #6
 8000732:	d41f      	bmi.n	8000774 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000734:	6a2b      	ldr	r3, [r5, #32]
 8000736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800073a:	d105      	bne.n	8000748 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800073c:	6862      	ldr	r2, [r4, #4]
 800073e:	68a9      	ldr	r1, [r5, #8]
 8000740:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000744:	430a      	orrs	r2, r1
 8000746:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000748:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800074a:	6862      	ldr	r2, [r4, #4]
 800074c:	430b      	orrs	r3, r1
 800074e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000752:	4313      	orrs	r3, r2
 8000754:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000756:	2301      	movs	r3, #1
 8000758:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800075a:	f7ff fd39 	bl	80001d0 <HAL_GetTick>
 800075e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	019a      	lsls	r2, r3, #6
 8000764:	f53f aea7 	bmi.w	80004b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000768:	f7ff fd32 	bl	80001d0 <HAL_GetTick>
 800076c:	1b40      	subs	r0, r0, r5
 800076e:	2802      	cmp	r0, #2
 8000770:	d9f6      	bls.n	8000760 <HAL_RCC_OscConfig+0x2d4>
 8000772:	e6cd      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000774:	f7ff fd2c 	bl	80001d0 <HAL_GetTick>
 8000778:	1bc0      	subs	r0, r0, r7
 800077a:	2802      	cmp	r0, #2
 800077c:	d9d7      	bls.n	800072e <HAL_RCC_OscConfig+0x2a2>
 800077e:	e6c7      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000780:	f7ff fd26 	bl	80001d0 <HAL_GetTick>
 8000784:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	f57f ae94 	bpl.w	80004b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800078e:	f7ff fd1f 	bl	80001d0 <HAL_GetTick>
 8000792:	1b40      	subs	r0, r0, r5
 8000794:	2802      	cmp	r0, #2
 8000796:	d9f6      	bls.n	8000786 <HAL_RCC_OscConfig+0x2fa>
 8000798:	e6ba      	b.n	8000510 <HAL_RCC_OscConfig+0x84>
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000
 80007a0:	42420060 	.word	0x42420060

080007a4 <HAL_RCC_GetSysClockFreq>:
{
 80007a4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007a8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007aa:	ac02      	add	r4, sp, #8
 80007ac:	f103 0510 	add.w	r5, r3, #16
 80007b0:	4622      	mov	r2, r4
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	6859      	ldr	r1, [r3, #4]
 80007b6:	3308      	adds	r3, #8
 80007b8:	c203      	stmia	r2!, {r0, r1}
 80007ba:	42ab      	cmp	r3, r5
 80007bc:	4614      	mov	r4, r2
 80007be:	d1f7      	bne.n	80007b0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007c0:	2301      	movs	r3, #1
 80007c2:	f88d 3004 	strb.w	r3, [sp, #4]
 80007c6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007c8:	4911      	ldr	r1, [pc, #68]	; (8000810 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ca:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007ce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007d0:	f003 020c 	and.w	r2, r3, #12
 80007d4:	2a08      	cmp	r2, #8
 80007d6:	d117      	bne.n	8000808 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007d8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007dc:	a806      	add	r0, sp, #24
 80007de:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007e0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007e2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007e6:	d50c      	bpl.n	8000802 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007f0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f2:	aa06      	add	r2, sp, #24
 80007f4:	4413      	add	r3, r2
 80007f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007fa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007fe:	b007      	add	sp, #28
 8000800:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <HAL_RCC_GetSysClockFreq+0x74>)
 8000804:	4350      	muls	r0, r2
 8000806:	e7fa      	b.n	80007fe <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800080a:	e7f8      	b.n	80007fe <HAL_RCC_GetSysClockFreq+0x5a>
 800080c:	08001198 	.word	0x08001198
 8000810:	40021000 	.word	0x40021000
 8000814:	007a1200 	.word	0x007a1200
 8000818:	003d0900 	.word	0x003d0900

0800081c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081c:	4a54      	ldr	r2, [pc, #336]	; (8000970 <HAL_RCC_ClockConfig+0x154>)
{
 800081e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000822:	6813      	ldr	r3, [r2, #0]
{
 8000824:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	428b      	cmp	r3, r1
{
 800082c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800082e:	d32a      	bcc.n	8000886 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000830:	6829      	ldr	r1, [r5, #0]
 8000832:	078c      	lsls	r4, r1, #30
 8000834:	d434      	bmi.n	80008a0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000836:	07ca      	lsls	r2, r1, #31
 8000838:	d447      	bmi.n	80008ca <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800083a:	4a4d      	ldr	r2, [pc, #308]	; (8000970 <HAL_RCC_ClockConfig+0x154>)
 800083c:	6813      	ldr	r3, [r2, #0]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	429e      	cmp	r6, r3
 8000844:	f0c0 8082 	bcc.w	800094c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000848:	682a      	ldr	r2, [r5, #0]
 800084a:	4c4a      	ldr	r4, [pc, #296]	; (8000974 <HAL_RCC_ClockConfig+0x158>)
 800084c:	f012 0f04 	tst.w	r2, #4
 8000850:	f040 8087 	bne.w	8000962 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000854:	0713      	lsls	r3, r2, #28
 8000856:	d506      	bpl.n	8000866 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000858:	6863      	ldr	r3, [r4, #4]
 800085a:	692a      	ldr	r2, [r5, #16]
 800085c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000860:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000864:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000866:	f7ff ff9d 	bl	80007a4 <HAL_RCC_GetSysClockFreq>
 800086a:	6863      	ldr	r3, [r4, #4]
 800086c:	4a42      	ldr	r2, [pc, #264]	; (8000978 <HAL_RCC_ClockConfig+0x15c>)
 800086e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	40d8      	lsrs	r0, r3
 8000876:	4b41      	ldr	r3, [pc, #260]	; (800097c <HAL_RCC_ClockConfig+0x160>)
 8000878:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fc66 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000880:	2000      	movs	r0, #0
}
 8000882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000886:	6813      	ldr	r3, [r2, #0]
 8000888:	f023 0307 	bic.w	r3, r3, #7
 800088c:	430b      	orrs	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000890:	6813      	ldr	r3, [r2, #0]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	4299      	cmp	r1, r3
 8000898:	d0ca      	beq.n	8000830 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800089a:	2001      	movs	r0, #1
 800089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008a0:	4b34      	ldr	r3, [pc, #208]	; (8000974 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008a2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008a6:	bf1e      	ittt	ne
 80008a8:	685a      	ldrne	r2, [r3, #4]
 80008aa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008ae:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008b0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008b2:	bf42      	ittt	mi
 80008b4:	685a      	ldrmi	r2, [r3, #4]
 80008b6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008ba:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008bc:	685a      	ldr	r2, [r3, #4]
 80008be:	68a8      	ldr	r0, [r5, #8]
 80008c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008c4:	4302      	orrs	r2, r0
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	e7b5      	b.n	8000836 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ca:	686a      	ldr	r2, [r5, #4]
 80008cc:	4c29      	ldr	r4, [pc, #164]	; (8000974 <HAL_RCC_ClockConfig+0x158>)
 80008ce:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d2:	d11c      	bne.n	800090e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d8:	d0df      	beq.n	800089a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008da:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e0:	f023 0303 	bic.w	r3, r3, #3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008e8:	f7ff fc72 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ec:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008ee:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d114      	bne.n	800091e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008f4:	6863      	ldr	r3, [r4, #4]
 80008f6:	f003 030c 	and.w	r3, r3, #12
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d09d      	beq.n	800083a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fe:	f7ff fc67 	bl	80001d0 <HAL_GetTick>
 8000902:	1bc0      	subs	r0, r0, r7
 8000904:	4540      	cmp	r0, r8
 8000906:	d9f5      	bls.n	80008f4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000908:	2003      	movs	r0, #3
 800090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800090e:	2a02      	cmp	r2, #2
 8000910:	d102      	bne.n	8000918 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000912:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000916:	e7df      	b.n	80008d8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000918:	f013 0f02 	tst.w	r3, #2
 800091c:	e7dc      	b.n	80008d8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800091e:	2b02      	cmp	r3, #2
 8000920:	d10f      	bne.n	8000942 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000922:	6863      	ldr	r3, [r4, #4]
 8000924:	f003 030c 	and.w	r3, r3, #12
 8000928:	2b08      	cmp	r3, #8
 800092a:	d086      	beq.n	800083a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800092c:	f7ff fc50 	bl	80001d0 <HAL_GetTick>
 8000930:	1bc0      	subs	r0, r0, r7
 8000932:	4540      	cmp	r0, r8
 8000934:	d9f5      	bls.n	8000922 <HAL_RCC_ClockConfig+0x106>
 8000936:	e7e7      	b.n	8000908 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000938:	f7ff fc4a 	bl	80001d0 <HAL_GetTick>
 800093c:	1bc0      	subs	r0, r0, r7
 800093e:	4540      	cmp	r0, r8
 8000940:	d8e2      	bhi.n	8000908 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000942:	6863      	ldr	r3, [r4, #4]
 8000944:	f013 0f0c 	tst.w	r3, #12
 8000948:	d1f6      	bne.n	8000938 <HAL_RCC_ClockConfig+0x11c>
 800094a:	e776      	b.n	800083a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800094c:	6813      	ldr	r3, [r2, #0]
 800094e:	f023 0307 	bic.w	r3, r3, #7
 8000952:	4333      	orrs	r3, r6
 8000954:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	f003 0307 	and.w	r3, r3, #7
 800095c:	429e      	cmp	r6, r3
 800095e:	d19c      	bne.n	800089a <HAL_RCC_ClockConfig+0x7e>
 8000960:	e772      	b.n	8000848 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000962:	6863      	ldr	r3, [r4, #4]
 8000964:	68e9      	ldr	r1, [r5, #12]
 8000966:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800096a:	430b      	orrs	r3, r1
 800096c:	6063      	str	r3, [r4, #4]
 800096e:	e771      	b.n	8000854 <HAL_RCC_ClockConfig+0x38>
 8000970:	40022000 	.word	0x40022000
 8000974:	40021000 	.word	0x40021000
 8000978:	080011a8 	.word	0x080011a8
 800097c:	20000008 	.word	0x20000008

08000980 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000980:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000982:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	f042 0201 	orr.w	r2, r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	f042 0201 	orr.w	r2, r2, #1
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	4770      	bx	lr

08000996 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000996:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800099a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800099c:	2b01      	cmp	r3, #1
 800099e:	f04f 0302 	mov.w	r3, #2
 80009a2:	d01c      	beq.n	80009de <HAL_TIM_ConfigClockSource+0x48>
 80009a4:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80009a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80009aa:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80009ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80009b0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80009b2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80009b6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80009ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80009bc:	680a      	ldr	r2, [r1, #0]
 80009be:	2a40      	cmp	r2, #64	; 0x40
 80009c0:	d079      	beq.n	8000ab6 <HAL_TIM_ConfigClockSource+0x120>
 80009c2:	d819      	bhi.n	80009f8 <HAL_TIM_ConfigClockSource+0x62>
 80009c4:	2a10      	cmp	r2, #16
 80009c6:	f000 8093 	beq.w	8000af0 <HAL_TIM_ConfigClockSource+0x15a>
 80009ca:	d80a      	bhi.n	80009e2 <HAL_TIM_ConfigClockSource+0x4c>
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f000 8089 	beq.w	8000ae4 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80009d8:	2300      	movs	r3, #0
 80009da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80009de:	4618      	mov	r0, r3

  return HAL_OK;
}
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80009e2:	2a20      	cmp	r2, #32
 80009e4:	f000 808a 	beq.w	8000afc <HAL_TIM_ConfigClockSource+0x166>
 80009e8:	2a30      	cmp	r2, #48	; 0x30
 80009ea:	d1f2      	bne.n	80009d2 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80009ec:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80009ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80009f2:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80009f6:	e036      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80009f8:	2a70      	cmp	r2, #112	; 0x70
 80009fa:	d036      	beq.n	8000a6a <HAL_TIM_ConfigClockSource+0xd4>
 80009fc:	d81b      	bhi.n	8000a36 <HAL_TIM_ConfigClockSource+0xa0>
 80009fe:	2a50      	cmp	r2, #80	; 0x50
 8000a00:	d042      	beq.n	8000a88 <HAL_TIM_ConfigClockSource+0xf2>
 8000a02:	2a60      	cmp	r2, #96	; 0x60
 8000a04:	d1e5      	bne.n	80009d2 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a06:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a08:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a0a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a0e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a10:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a12:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000a14:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000a16:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000a1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000a1e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000a22:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000a26:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a28:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000a2a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a30:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000a34:	e017      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a36:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000a3a:	d011      	beq.n	8000a60 <HAL_TIM_ConfigClockSource+0xca>
 8000a3c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a40:	d1c7      	bne.n	80009d2 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a42:	688a      	ldr	r2, [r1, #8]
 8000a44:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000a46:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a48:	68c9      	ldr	r1, [r1, #12]
 8000a4a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a4c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a54:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000a56:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a5e:	e002      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	e7b3      	b.n	80009d2 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a6a:	688a      	ldr	r2, [r1, #8]
 8000a6c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000a6e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a70:	68c9      	ldr	r1, [r1, #12]
 8000a72:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a74:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a7c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000a7e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000a80:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000a82:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000a86:	e7ee      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000a88:	684c      	ldr	r4, [r1, #4]
 8000a8a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000a8c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a8e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000a90:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a94:	f025 0501 	bic.w	r5, r5, #1
 8000a98:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a9a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000a9c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000a9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000aa2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000aa8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000aaa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000aac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ab0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000ab4:	e7d7      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ab6:	684c      	ldr	r4, [r1, #4]
 8000ab8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000aba:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000abc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000abe:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ac2:	f025 0501 	bic.w	r5, r5, #1
 8000ac6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ac8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000aca:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000acc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ad0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ad6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ad8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ada:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ade:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000ae2:	e7c0      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000ae4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ae6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000aea:	f042 0207 	orr.w	r2, r2, #7
 8000aee:	e7ba      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000af0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000af2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000af6:	f042 0217 	orr.w	r2, r2, #23
 8000afa:	e7b4      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000afc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000afe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b02:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000b06:	e7ae      	b.n	8000a66 <HAL_TIM_ConfigClockSource+0xd0>

08000b08 <HAL_TIM_OC_DelayElapsedCallback>:
 8000b08:	4770      	bx	lr

08000b0a <HAL_TIM_IC_CaptureCallback>:
 8000b0a:	4770      	bx	lr

08000b0c <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b0c:	4770      	bx	lr

08000b0e <HAL_TIM_TriggerCallback>:
 8000b0e:	4770      	bx	lr

08000b10 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b10:	6803      	ldr	r3, [r0, #0]
{
 8000b12:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b14:	691a      	ldr	r2, [r3, #16]
{
 8000b16:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b18:	0791      	lsls	r1, r2, #30
 8000b1a:	d50e      	bpl.n	8000b3a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b1c:	68da      	ldr	r2, [r3, #12]
 8000b1e:	0792      	lsls	r2, r2, #30
 8000b20:	d50b      	bpl.n	8000b3a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b22:	f06f 0202 	mvn.w	r2, #2
 8000b26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b28:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b2a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b2c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b2e:	079b      	lsls	r3, r3, #30
 8000b30:	d077      	beq.n	8000c22 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000b32:	f7ff ffea 	bl	8000b0a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b36:	2300      	movs	r3, #0
 8000b38:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	0750      	lsls	r0, r2, #29
 8000b40:	d510      	bpl.n	8000b64 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	0751      	lsls	r1, r2, #29
 8000b46:	d50d      	bpl.n	8000b64 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000b48:	f06f 0204 	mvn.w	r2, #4
 8000b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b4e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b50:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b52:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b54:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000b58:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b5a:	d068      	beq.n	8000c2e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b5c:	f7ff ffd5 	bl	8000b0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b60:	2300      	movs	r3, #0
 8000b62:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	691a      	ldr	r2, [r3, #16]
 8000b68:	0712      	lsls	r2, r2, #28
 8000b6a:	d50f      	bpl.n	8000b8c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	0710      	lsls	r0, r2, #28
 8000b70:	d50c      	bpl.n	8000b8c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000b72:	f06f 0208 	mvn.w	r2, #8
 8000b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b78:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b7a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b7c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b7e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000b80:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b82:	d05a      	beq.n	8000c3a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b84:	f7ff ffc1 	bl	8000b0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	691a      	ldr	r2, [r3, #16]
 8000b90:	06d2      	lsls	r2, r2, #27
 8000b92:	d510      	bpl.n	8000bb6 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	06d0      	lsls	r0, r2, #27
 8000b98:	d50d      	bpl.n	8000bb6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000b9a:	f06f 0210 	mvn.w	r2, #16
 8000b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ba0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ba2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ba4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ba6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000baa:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bac:	d04b      	beq.n	8000c46 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bae:	f7ff ffac 	bl	8000b0a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	07d1      	lsls	r1, r2, #31
 8000bbc:	d508      	bpl.n	8000bd0 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	07d2      	lsls	r2, r2, #31
 8000bc2:	d505      	bpl.n	8000bd0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000bc4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000bc8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000bca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000bcc:	f000 f95e 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	691a      	ldr	r2, [r3, #16]
 8000bd4:	0610      	lsls	r0, r2, #24
 8000bd6:	d508      	bpl.n	8000bea <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	0611      	lsls	r1, r2, #24
 8000bdc:	d505      	bpl.n	8000bea <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000bde:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000be2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000be4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000be6:	f000 f8aa 	bl	8000d3e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000bea:	6823      	ldr	r3, [r4, #0]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	0652      	lsls	r2, r2, #25
 8000bf0:	d508      	bpl.n	8000c04 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	0650      	lsls	r0, r2, #25
 8000bf6:	d505      	bpl.n	8000c04 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000bfc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000bfe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c00:	f7ff ff85 	bl	8000b0e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	0691      	lsls	r1, r2, #26
 8000c0a:	d522      	bpl.n	8000c52 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	0692      	lsls	r2, r2, #26
 8000c10:	d51f      	bpl.n	8000c52 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c12:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c16:	4620      	mov	r0, r4
}
 8000c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c1e:	f000 b88d 	b.w	8000d3c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c22:	f7ff ff71 	bl	8000b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c26:	4620      	mov	r0, r4
 8000c28:	f7ff ff70 	bl	8000b0c <HAL_TIM_PWM_PulseFinishedCallback>
 8000c2c:	e783      	b.n	8000b36 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c2e:	f7ff ff6b 	bl	8000b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c32:	4620      	mov	r0, r4
 8000c34:	f7ff ff6a 	bl	8000b0c <HAL_TIM_PWM_PulseFinishedCallback>
 8000c38:	e792      	b.n	8000b60 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c3a:	f7ff ff65 	bl	8000b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f7ff ff64 	bl	8000b0c <HAL_TIM_PWM_PulseFinishedCallback>
 8000c44:	e7a0      	b.n	8000b88 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c46:	f7ff ff5f 	bl	8000b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f7ff ff5e 	bl	8000b0c <HAL_TIM_PWM_PulseFinishedCallback>
 8000c50:	e7af      	b.n	8000bb2 <HAL_TIM_IRQHandler+0xa2>
 8000c52:	bd10      	pop	{r4, pc}

08000c54 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c54:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000c56:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	d00a      	beq.n	8000c72 <TIM_Base_SetConfig+0x1e>
 8000c5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c60:	d007      	beq.n	8000c72 <TIM_Base_SetConfig+0x1e>
 8000c62:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c66:	4290      	cmp	r0, r2
 8000c68:	d003      	beq.n	8000c72 <TIM_Base_SetConfig+0x1e>
 8000c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c6e:	4290      	cmp	r0, r2
 8000c70:	d115      	bne.n	8000c9e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000c72:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c78:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c7a:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <TIM_Base_SetConfig+0x6c>)
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d00a      	beq.n	8000c96 <TIM_Base_SetConfig+0x42>
 8000c80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c84:	d007      	beq.n	8000c96 <TIM_Base_SetConfig+0x42>
 8000c86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d003      	beq.n	8000c96 <TIM_Base_SetConfig+0x42>
 8000c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d103      	bne.n	8000c9e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c96:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c9c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c9e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000ca4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000ca6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ca8:	688b      	ldr	r3, [r1, #8]
 8000caa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000cac:	680b      	ldr	r3, [r1, #0]
 8000cae:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <TIM_Base_SetConfig+0x6c>)
 8000cb2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000cb4:	bf04      	itt	eq
 8000cb6:	690b      	ldreq	r3, [r1, #16]
 8000cb8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	6143      	str	r3, [r0, #20]
 8000cbe:	4770      	bx	lr
 8000cc0:	40012c00 	.word	0x40012c00

08000cc4 <HAL_TIM_Base_Init>:
{
 8000cc4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	b1a0      	cbz	r0, 8000cf4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000cca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000cce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cd2:	b91b      	cbnz	r3, 8000cdc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000cd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000cd8:	f000 f9ac 	bl	8001034 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000cdc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cde:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000ce0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ce4:	1d21      	adds	r1, r4, #4
 8000ce6:	f7ff ffb5 	bl	8000c54 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000cea:	2301      	movs	r3, #1
  return HAL_OK;
 8000cec:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000cee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000cf2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
}
 8000cf6:	bd10      	pop	{r4, pc}

08000cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000cf8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000cfc:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	f04f 0302 	mov.w	r3, #2
 8000d04:	d018      	beq.n	8000d38 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000d06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d0a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d0c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d0e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d10:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d16:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4322      	orrs	r2, r4
 8000d1c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d24:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000d32:	2300      	movs	r3, #0
 8000d34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000d38:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d3a:	bd10      	pop	{r4, pc}

08000d3c <HAL_TIMEx_CommutationCallback>:
 8000d3c:	4770      	bx	lr

08000d3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d3e:	4770      	bx	lr

08000d40 <KeyBufIn.constprop.0>:

static uint8_t KeyScanState;

static void KeyBufIn(uint8_t code);

static void KeyBufIn(uint8_t code)
 8000d40:	b510      	push	{r4, lr}
{
    if( KeyNRead < KEY_BUF_SIZE )
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <KeyBufIn.constprop.0+0x2c>)
 8000d44:	7813      	ldrb	r3, [r2, #0]
 8000d46:	2b09      	cmp	r3, #9
 8000d48:	d80e      	bhi.n	8000d68 <KeyBufIn.constprop.0+0x28>
    {
        KeyNRead++;
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	7013      	strb	r3, [r2, #0]
        KeyBuf[KeyBufInIx++] = code;
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <KeyBufIn.constprop.0+0x30>)
 8000d50:	2401      	movs	r4, #1
 8000d52:	7811      	ldrb	r1, [r2, #0]
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <KeyBufIn.constprop.0+0x34>)
 8000d56:	1c4b      	adds	r3, r1, #1
 8000d58:	b2db      	uxtb	r3, r3
        if( KeyBufInIx >= KEY_BUF_SIZE )
 8000d5a:	2b09      	cmp	r3, #9
        KeyBuf[KeyBufInIx++] = code;
 8000d5c:	7013      	strb	r3, [r2, #0]
        {
            KeyBufInIx = 0;
 8000d5e:	bf88      	it	hi
 8000d60:	2300      	movhi	r3, #0
        KeyBuf[KeyBufInIx++] = code;
 8000d62:	5444      	strb	r4, [r0, r1]
            KeyBufInIx = 0;
 8000d64:	bf88      	it	hi
 8000d66:	7013      	strbhi	r3, [r2, #0]
 8000d68:	bd10      	pop	{r4, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000034 	.word	0x20000034
 8000d70:	20000032 	.word	0x20000032
 8000d74:	20000028 	.word	0x20000028

08000d78 <KeyHit>:

bool KeyHit(void)
{
    bool hit;

    hit = (bool)(KeyNRead > 0) ? TRUE : FALSE;
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <KeyHit+0xc>)
 8000d7a:	7818      	ldrb	r0, [r3, #0]

    return hit;
}
 8000d7c:	3000      	adds	r0, #0
 8000d7e:	bf18      	it	ne
 8000d80:	2001      	movne	r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	20000034 	.word	0x20000034

08000d88 <KeyGetKey>:

uint8_t KeyGetKey(void)
{
    uint8_t code;

    if( KeyNRead > 0 )
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <KeyGetKey+0x24>)
 8000d8a:	7813      	ldrb	r3, [r2, #0]
 8000d8c:	b163      	cbz	r3, 8000da8 <KeyGetKey+0x20>
    {
        KeyNRead--;
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	7013      	strb	r3, [r2, #0]
        code = KeyBuf[KeyBufOutIx];
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <KeyGetKey+0x28>)
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <KeyGetKey+0x2c>)
 8000d96:	7813      	ldrb	r3, [r2, #0]
 8000d98:	5cc8      	ldrb	r0, [r1, r3]
        KeyBufOutIx++;
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
        if( KeyBufOutIx >= KEY_BUF_SIZE )
 8000d9e:	2b09      	cmp	r3, #9
        {
            KeyBufOutIx = 0;
 8000da0:	bf88      	it	hi
 8000da2:	2300      	movhi	r3, #0
 8000da4:	7013      	strb	r3, [r2, #0]
 8000da6:	4770      	bx	lr

        return code;
    }
    else
    {
        return 0xFF;
 8000da8:	20ff      	movs	r0, #255	; 0xff
    }
}
 8000daa:	4770      	bx	lr
 8000dac:	20000034 	.word	0x20000034
 8000db0:	20000033 	.word	0x20000033
 8000db4:	20000028 	.word	0x20000028

08000db8 <KeyInit>:

void KeyInit(void)
{
    KeyScanState = KEY_STATE_UP;
 8000db8:	2201      	movs	r2, #1
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <KeyInit+0x18>)
 8000dbc:	701a      	strb	r2, [r3, #0]
    KeyNRead = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <KeyInit+0x1c>)
 8000dc2:	7013      	strb	r3, [r2, #0]
    KeyBufInIx = 0;
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <KeyInit+0x20>)
 8000dc6:	7013      	strb	r3, [r2, #0]
    KeyBufOutIx = 0;
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <KeyInit+0x24>)
 8000dca:	7013      	strb	r3, [r2, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000037 	.word	0x20000037
 8000dd4:	20000034 	.word	0x20000034
 8000dd8:	20000032 	.word	0x20000032
 8000ddc:	20000033 	.word	0x20000033

08000de0 <KeyScanTask>:
}

void KeyScanTask(void)
{
 8000de0:	b510      	push	{r4, lr}
    switch( KeyScanState )
 8000de2:	4c26      	ldr	r4, [pc, #152]	; (8000e7c <KeyScanTask+0x9c>)
 8000de4:	7823      	ldrb	r3, [r4, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d818      	bhi.n	8000e1e <KeyScanTask+0x3e>
 8000dec:	e8df f003 	tbb	[pc, r3]
 8000df0:	311a0a02 	.word	0x311a0a02
    {
        case KEY_STATE_UP:
            if( HAL_GPIO_ReadPin(KEY_PORT, KEY_PORT_PIN) == GPIO_PIN_RESET )
 8000df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df8:	4821      	ldr	r0, [pc, #132]	; (8000e80 <KeyScanTask+0xa0>)
 8000dfa:	f7ff fb37 	bl	800046c <HAL_GPIO_ReadPin>
 8000dfe:	b970      	cbnz	r0, 8000e1e <KeyScanTask+0x3e>
                {
                    KeyRptDlyCtr--;
                    if( KeyRptStartDlyCtr == 0)
                    {
                        KeyBufIn(1);
                        KeyRptDlyCtr = KEY_RPT_DLY;
 8000e00:	2302      	movs	r3, #2
 8000e02:	e00b      	b.n	8000e1c <KeyScanTask+0x3c>
            if( HAL_GPIO_ReadPin(KEY_PORT, KEY_PORT_PIN) == GPIO_PIN_RESET )
 8000e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e08:	481d      	ldr	r0, [pc, #116]	; (8000e80 <KeyScanTask+0xa0>)
 8000e0a:	f7ff fb2f 	bl	800046c <HAL_GPIO_ReadPin>
 8000e0e:	b938      	cbnz	r0, 8000e20 <KeyScanTask+0x40>
                KeyBufIn(1);    // 1: stored key code
 8000e10:	f7ff ff96 	bl	8000d40 <KeyBufIn.constprop.0>
                KeyRptStartDlyCtr = KEY_RPT_START_DLY;
 8000e14:	220a      	movs	r2, #10
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <KeyScanTask+0xa4>)
 8000e18:	701a      	strb	r2, [r3, #0]
                KeyScanState = KEY_STATE_RPT_START_DLY;
 8000e1a:	2303      	movs	r3, #3
                        KeyRptDlyCtr = KEY_RPT_DLY;
 8000e1c:	7023      	strb	r3, [r4, #0]
 8000e1e:	bd10      	pop	{r4, pc}
                KeyScanState = KEY_STATE_UP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e7fb      	b.n	8000e1c <KeyScanTask+0x3c>
            if( HAL_GPIO_ReadPin(KEY_PORT, KEY_PORT_PIN) == GPIO_PIN_RESET )
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <KeyScanTask+0xa0>)
 8000e2a:	f7ff fb1f 	bl	800046c <HAL_GPIO_ReadPin>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d1e6      	bne.n	8000e00 <KeyScanTask+0x20>
                if( KeyRptStartDlyCtr > 0)
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <KeyScanTask+0xa4>)
 8000e34:	7813      	ldrb	r3, [r2, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f1      	beq.n	8000e1e <KeyScanTask+0x3e>
                    KeyRptStartDlyCtr--;
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	7013      	strb	r3, [r2, #0]
                    if( KeyRptStartDlyCtr == 0)
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1ec      	bne.n	8000e1e <KeyScanTask+0x3e>
                        KeyBufIn(1);
 8000e44:	f7ff ff7c 	bl	8000d40 <KeyBufIn.constprop.0>
                        KeyRptDlyCtr = KEY_RPT_DLY;
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <KeyScanTask+0xa8>)
 8000e4c:	701a      	strb	r2, [r3, #0]
                        KeyScanState = KEY_STATE_RPT_DLY;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e7e4      	b.n	8000e1c <KeyScanTask+0x3c>
            if( HAL_GPIO_ReadPin(KEY_PORT, KEY_PORT_PIN) == GPIO_PIN_RESET )
 8000e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <KeyScanTask+0xa0>)
 8000e58:	f7ff fb08 	bl	800046c <HAL_GPIO_ReadPin>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d1cf      	bne.n	8000e00 <KeyScanTask+0x20>
                if( KeyRptDlyCtr > 0)
 8000e60:	4c09      	ldr	r4, [pc, #36]	; (8000e88 <KeyScanTask+0xa8>)
 8000e62:	7823      	ldrb	r3, [r4, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0da      	beq.n	8000e1e <KeyScanTask+0x3e>
                    KeyRptDlyCtr--;
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	7023      	strb	r3, [r4, #0]
                    if( KeyRptStartDlyCtr == 0)
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <KeyScanTask+0xa4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1d4      	bne.n	8000e1e <KeyScanTask+0x3e>
                        KeyBufIn(1);
 8000e74:	f7ff ff64 	bl	8000d40 <KeyBufIn.constprop.0>
 8000e78:	e7c2      	b.n	8000e00 <KeyScanTask+0x20>
 8000e7a:	bf00      	nop
 8000e7c:	20000037 	.word	0x20000037
 8000e80:	40011000 	.word	0x40011000
 8000e84:	20000036 	.word	0x20000036
 8000e88:	20000035 	.word	0x20000035

08000e8c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
volatile uint32_t Tick1m;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    Tick1m++;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	3201      	adds	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

    if( (Tick1m % 100) == 0)
 8000e94:	2264      	movs	r2, #100	; 0x64
 8000e96:	6819      	ldr	r1, [r3, #0]
 8000e98:	fbb1 f3f2 	udiv	r3, r1, r2
 8000e9c:	fb02 1313 	mls	r3, r2, r3, r1
 8000ea0:	b90b      	cbnz	r3, 8000ea6 <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        KeyScanTask();
 8000ea2:	f7ff bf9d 	b.w	8000de0 <KeyScanTask>
 8000ea6:	4770      	bx	lr
 8000ea8:	2000003c 	.word	0x2000003c

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b500      	push	{lr}
 8000eae:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb0:	2228      	movs	r2, #40	; 0x28
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	a806      	add	r0, sp, #24
 8000eb6:	f000 f95b 	bl	8001170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eba:	2214      	movs	r2, #20
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	a801      	add	r0, sp, #4
 8000ec0:	f000 f956 	bl	8001170 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ecc:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f7ff fadb 	bl	800048c <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed6:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eda:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ede:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee6:	f7ff fc99 	bl	800081c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000eea:	b011      	add	sp, #68	; 0x44
 8000eec:	f85d fb04 	ldr.w	pc, [sp], #4

08000ef0 <main>:
{
 8000ef0:	b500      	push	{lr}
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000ef4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
{
 8000ef8:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000efa:	f7ff f94b 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000efe:	f7ff ffd5 	bl	8000eac <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	2210      	movs	r2, #16
 8000f04:	2100      	movs	r1, #0
 8000f06:	a806      	add	r0, sp, #24
 8000f08:	f000 f932 	bl	8001170 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <main+0xec>)
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f0e:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f12:	4833      	ldr	r0, [pc, #204]	; (8000fe0 <main+0xf0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	f042 0204 	orr.w	r2, r2, #4
 8000f18:	619a      	str	r2, [r3, #24]
 8000f1a:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8000f1c:	4c31      	ldr	r4, [pc, #196]	; (8000fe4 <main+0xf4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	f002 0204 	and.w	r2, r2, #4
 8000f22:	9201      	str	r2, [sp, #4]
 8000f24:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	f042 0210 	orr.w	r2, r2, #16
 8000f2c:	619a      	str	r2, [r3, #24]
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	f002 0210 	and.w	r2, r2, #16
 8000f34:	9202      	str	r2, [sp, #8]
 8000f36:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	f042 0208 	orr.w	r2, r2, #8
 8000f3e:	619a      	str	r2, [r3, #24]
 8000f40:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	9303      	str	r3, [sp, #12]
 8000f4a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f4c:	f7ff fa94 	bl	8000478 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000f50:	a906      	add	r1, sp, #24
 8000f52:	4825      	ldr	r0, [pc, #148]	; (8000fe8 <main+0xf8>)
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000f54:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f7ff f9a7 	bl	80002ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f5e:	2340      	movs	r3, #64	; 0x40
 8000f60:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f68:	a906      	add	r1, sp, #24
 8000f6a:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <main+0xf0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f7ff f99c 	bl	80002ac <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f74:	4629      	mov	r1, r5
 8000f76:	2210      	movs	r2, #16
 8000f78:	a806      	add	r0, sp, #24
 8000f7a:	f000 f8f9 	bl	8001170 <memset>
  htim1.Init.Prescaler = 8-1;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	4a1a      	ldr	r2, [pc, #104]	; (8000fec <main+0xfc>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f82:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 8-1;
 8000f84:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.Period = 1000-1;
 8000f88:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f8c:	60e3      	str	r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f8e:	2380      	movs	r3, #128	; 0x80
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	60a5      	str	r5, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f92:	61a3      	str	r3, [r4, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f96:	6165      	str	r5, [r4, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	9504      	str	r5, [sp, #16]
 8000f9a:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f9c:	f7ff fe92 	bl	8000cc4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa0:	a906      	add	r1, sp, #24
 8000fa2:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	9606      	str	r6, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa6:	f7ff fcf6 	bl	8000996 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000faa:	a904      	add	r1, sp, #16
 8000fac:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	9504      	str	r5, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	9505      	str	r5, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb2:	f7ff fea1 	bl	8000cf8 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim1);
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff fce2 	bl	8000980 <HAL_TIM_Base_Start_IT>
  KeyInit();
 8000fbc:	f7ff fefc 	bl	8000db8 <KeyInit>
              HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000fc0:	4c07      	ldr	r4, [pc, #28]	; (8000fe0 <main+0xf0>)
      if( KeyHit() )
 8000fc2:	f7ff fed9 	bl	8000d78 <KeyHit>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d0fb      	beq.n	8000fc2 <main+0xd2>
          if( KeyGetKey() == 1 )
 8000fca:	f7ff fedd 	bl	8000d88 <KeyGetKey>
 8000fce:	2801      	cmp	r0, #1
 8000fd0:	d1f7      	bne.n	8000fc2 <main+0xd2>
              HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f7ff fa54 	bl	8000482 <HAL_GPIO_TogglePin>
 8000fda:	e7f2      	b.n	8000fc2 <main+0xd2>
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	20000040 	.word	0x20000040
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40012c00 	.word	0x40012c00

08000ff0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_MspInit+0x3c>)
{
 8000ff2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	699a      	ldr	r2, [r3, #24]
 8000ffe:	f002 0201 	and.w	r2, r2, #1
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	69da      	ldr	r2, [r3, #28]
 8001008:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800100c:	61da      	str	r2, [r3, #28]
 800100e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800101a:	6853      	ldr	r3, [r2, #4]
 800101c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	b002      	add	sp, #8
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_TIM_Base_MspInit+0x38>)
 8001038:	6802      	ldr	r2, [r0, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d112      	bne.n	8001064 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001042:	699a      	ldr	r2, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001044:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800104a:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104e:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001050:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800105a:	f7ff f8d1 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800105e:	2019      	movs	r0, #25
 8001060:	f7ff f902 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001064:	b003      	add	sp, #12
 8001066:	f85d fb04 	ldr.w	pc, [sp], #4
 800106a:	bf00      	nop
 800106c:	40012c00 	.word	0x40012c00

08001070 <NMI_Handler>:
 8001070:	4770      	bx	lr

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler>

0800107a <SVC_Handler>:
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f7ff b89a 	b.w	80001b8 <HAL_IncTick>

08001084 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001084:	4801      	ldr	r0, [pc, #4]	; (800108c <TIM1_UP_IRQHandler+0x8>)
 8001086:	f7ff bd43 	b.w	8000b10 <HAL_TIM_IRQHandler>
 800108a:	bf00      	nop
 800108c:	20000040 	.word	0x20000040

08001090 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SystemInit+0x40>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800109a:	6859      	ldr	r1, [r3, #4]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <SystemInit+0x44>)
 800109e:	400a      	ands	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80010bc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <SystemInit+0x48>)
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	f8ff0000 	.word	0xf8ff0000
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010de:	e003      	b.n	80010e8 <LoopCopyDataInit>

080010e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010e6:	3104      	adds	r1, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010f0:	d3f6      	bcc.n	80010e0 <CopyDataInit>
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010f4:	e002      	b.n	80010fc <LoopFillZerobss>

080010f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010f8:	f842 3b04 	str.w	r3, [r2], #4

080010fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001100:	d3f9      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001102:	f7ff ffc5 	bl	8001090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f000 f80f 	bl	8001128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff fef1 	bl	8000ef0 <main>
  bx lr
 800110e:	4770      	bx	lr
  ldr r3, =_sidata
 8001110:	080011c0 	.word	0x080011c0
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001118:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800111c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001120:	20000080 	.word	0x20000080

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <__libc_init_array>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	2500      	movs	r5, #0
 800112c:	4e0c      	ldr	r6, [pc, #48]	; (8001160 <__libc_init_array+0x38>)
 800112e:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <__libc_init_array+0x3c>)
 8001130:	1ba4      	subs	r4, r4, r6
 8001132:	10a4      	asrs	r4, r4, #2
 8001134:	42a5      	cmp	r5, r4
 8001136:	d109      	bne.n	800114c <__libc_init_array+0x24>
 8001138:	f000 f822 	bl	8001180 <_init>
 800113c:	2500      	movs	r5, #0
 800113e:	4e0a      	ldr	r6, [pc, #40]	; (8001168 <__libc_init_array+0x40>)
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <__libc_init_array+0x44>)
 8001142:	1ba4      	subs	r4, r4, r6
 8001144:	10a4      	asrs	r4, r4, #2
 8001146:	42a5      	cmp	r5, r4
 8001148:	d105      	bne.n	8001156 <__libc_init_array+0x2e>
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001150:	4798      	blx	r3
 8001152:	3501      	adds	r5, #1
 8001154:	e7ee      	b.n	8001134 <__libc_init_array+0xc>
 8001156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800115a:	4798      	blx	r3
 800115c:	3501      	adds	r5, #1
 800115e:	e7f2      	b.n	8001146 <__libc_init_array+0x1e>
 8001160:	080011b8 	.word	0x080011b8
 8001164:	080011b8 	.word	0x080011b8
 8001168:	080011b8 	.word	0x080011b8
 800116c:	080011bc 	.word	0x080011bc

08001170 <memset>:
 8001170:	4603      	mov	r3, r0
 8001172:	4402      	add	r2, r0
 8001174:	4293      	cmp	r3, r2
 8001176:	d100      	bne.n	800117a <memset+0xa>
 8001178:	4770      	bx	lr
 800117a:	f803 1b01 	strb.w	r1, [r3], #1
 800117e:	e7f9      	b.n	8001174 <memset+0x4>

08001180 <_init>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	bf00      	nop
 8001184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001186:	bc08      	pop	{r3}
 8001188:	469e      	mov	lr, r3
 800118a:	4770      	bx	lr

0800118c <_fini>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	bf00      	nop
 8001190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001192:	bc08      	pop	{r3}
 8001194:	469e      	mov	lr, r3
 8001196:	4770      	bx	lr
